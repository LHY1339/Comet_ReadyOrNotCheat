#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_UI_PlanningMap

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ReadyOrNot_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_UI_PlanningMap.BP_UI_PlanningMap_C
// 0x0140 (0x03D8 - 0x0298)
class ABP_UI_PlanningMap_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCineCameraComponent*                   MapCamera;                                         // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    SpringArm;                                         // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Prep_Map_Default;                                  // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          MapCameraActive;                                   // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C9[0x7];                                      // 0x02C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CurrentZoom;                                       // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZoomIncrement;                                     // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxZoomDistance;                                   // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinZoomDistance;                                   // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PanningSpeed;                                      // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                StartingPos;                                       // 0x02F8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Panning;                                           // 0x0310(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_311[0x7];                                      // 0x0311(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              PanningBoundaryY;                                  // 0x0318(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              PanningBoundaryX;                                  // 0x0328(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MapDynMat;                                         // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<struct FSpawnPoints>                   SpawnPoints;                                       // 0x0340(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          AbsolutePanning;                                   // 0x0350(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_351[0x7];                                      // 0x0351(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_UI_PlanningMap_SpawnPoint_C*        NewVar_0;                                          // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class UBP_UI_PlanningMap_SpawnPoint_C*> SpawnPointComponents;                             // 0x0360(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TMulticastInlineDelegate<void(double ZoomValue)> OnZoomUpdated;                                  // 0x0370(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(int32 Floor)>   OnChangeFloors;                                    // 0x0380(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<struct FLevelFloorData>                Floors;                                            // 0x0390(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Initialized;                                       // 0x03A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A1[0x7];                                      // 0x03A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     CurrentMaterialParent;                             // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              OnFloorMaterialUpdated;                            // 0x03B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          FloorMaterialUpdated;                              // 0x03C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C1[0x7];                                      // 0x03C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBP_UI_PlanningMap_Marker_C*>    MapMarkerComponents;                               // 0x03C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)

public:
	void AbsolutePan(const struct FVector2D& Delta);
	void ActivateMapCamera();
	void AdditivePan();
	void AnimateHide(bool Silent);
	void AnimateShow();
	void ChangeFloors(int32 Floor);
	void DeactivateCamera();
	void ExecuteUbergraph_BP_UI_PlanningMap(int32 EntryPoint);
	void Fill_Level_Data_from_Table();
	void GetCurrentMapMaterial(class UMaterialInterface** CurrentMaterial);
	void GetMapMaterial(bool ForceUpdate, class UMaterialInstanceDynamic** MapDynMat_0);
	void InitializeFloor();
	void InpActEvt_MouseScrollDown_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_MouseScrollUp_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void OnLoaded_6AC405FF4BFE790347C0B19681EDEBD5(class UObject* Loaded);
	void PanCamera(bool Panning_0, const struct FVector2D& CursorPos);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void RollOutMap();
	void SetMapMaterial(class UMaterialInterface* Material);
	void SpawnMapMarker(const struct FVector& Location, class UBP_UI_PlanningMap_Marker_C** OutputPin);
	void UpdateZoom();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_UI_PlanningMap_C">();
	}
	static class ABP_UI_PlanningMap_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_UI_PlanningMap_C>();
	}
};
static_assert(alignof(ABP_UI_PlanningMap_C) == 0x000008, "Wrong alignment on ABP_UI_PlanningMap_C");
static_assert(sizeof(ABP_UI_PlanningMap_C) == 0x0003D8, "Wrong size on ABP_UI_PlanningMap_C");
static_assert(offsetof(ABP_UI_PlanningMap_C, UberGraphFrame) == 0x000298, "Member 'ABP_UI_PlanningMap_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_UI_PlanningMap_C, MapCamera) == 0x0002A0, "Member 'ABP_UI_PlanningMap_C::MapCamera' has a wrong offset!");
static_assert(offsetof(ABP_UI_PlanningMap_C, SpringArm) == 0x0002A8, "Member 'ABP_UI_PlanningMap_C::SpringArm' has a wrong offset!");
static_assert(offsetof(ABP_UI_PlanningMap_C, Scene) == 0x0002B0, "Member 'ABP_UI_PlanningMap_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_UI_PlanningMap_C, Prep_Map_Default) == 0x0002B8, "Member 'ABP_UI_PlanningMap_C::Prep_Map_Default' has a wrong offset!");
static_assert(offsetof(ABP_UI_PlanningMap_C, DefaultSceneRoot) == 0x0002C0, "Member 'ABP_UI_PlanningMap_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_UI_PlanningMap_C, MapCameraActive) == 0x0002C8, "Member 'ABP_UI_PlanningMap_C::MapCameraActive' has a wrong offset!");
static_assert(offsetof(ABP_UI_PlanningMap_C, CurrentZoom) == 0x0002D0, "Member 'ABP_UI_PlanningMap_C::CurrentZoom' has a wrong offset!");
static_assert(offsetof(ABP_UI_PlanningMap_C, ZoomIncrement) == 0x0002D8, "Member 'ABP_UI_PlanningMap_C::ZoomIncrement' has a wrong offset!");
static_assert(offsetof(ABP_UI_PlanningMap_C, MaxZoomDistance) == 0x0002E0, "Member 'ABP_UI_PlanningMap_C::MaxZoomDistance' has a wrong offset!");
static_assert(offsetof(ABP_UI_PlanningMap_C, MinZoomDistance) == 0x0002E8, "Member 'ABP_UI_PlanningMap_C::MinZoomDistance' has a wrong offset!");
static_assert(offsetof(ABP_UI_PlanningMap_C, PanningSpeed) == 0x0002F0, "Member 'ABP_UI_PlanningMap_C::PanningSpeed' has a wrong offset!");
static_assert(offsetof(ABP_UI_PlanningMap_C, StartingPos) == 0x0002F8, "Member 'ABP_UI_PlanningMap_C::StartingPos' has a wrong offset!");
static_assert(offsetof(ABP_UI_PlanningMap_C, Panning) == 0x000310, "Member 'ABP_UI_PlanningMap_C::Panning' has a wrong offset!");
static_assert(offsetof(ABP_UI_PlanningMap_C, PanningBoundaryY) == 0x000318, "Member 'ABP_UI_PlanningMap_C::PanningBoundaryY' has a wrong offset!");
static_assert(offsetof(ABP_UI_PlanningMap_C, PanningBoundaryX) == 0x000328, "Member 'ABP_UI_PlanningMap_C::PanningBoundaryX' has a wrong offset!");
static_assert(offsetof(ABP_UI_PlanningMap_C, MapDynMat) == 0x000338, "Member 'ABP_UI_PlanningMap_C::MapDynMat' has a wrong offset!");
static_assert(offsetof(ABP_UI_PlanningMap_C, SpawnPoints) == 0x000340, "Member 'ABP_UI_PlanningMap_C::SpawnPoints' has a wrong offset!");
static_assert(offsetof(ABP_UI_PlanningMap_C, AbsolutePanning) == 0x000350, "Member 'ABP_UI_PlanningMap_C::AbsolutePanning' has a wrong offset!");
static_assert(offsetof(ABP_UI_PlanningMap_C, NewVar_0) == 0x000358, "Member 'ABP_UI_PlanningMap_C::NewVar_0' has a wrong offset!");
static_assert(offsetof(ABP_UI_PlanningMap_C, SpawnPointComponents) == 0x000360, "Member 'ABP_UI_PlanningMap_C::SpawnPointComponents' has a wrong offset!");
static_assert(offsetof(ABP_UI_PlanningMap_C, OnZoomUpdated) == 0x000370, "Member 'ABP_UI_PlanningMap_C::OnZoomUpdated' has a wrong offset!");
static_assert(offsetof(ABP_UI_PlanningMap_C, OnChangeFloors) == 0x000380, "Member 'ABP_UI_PlanningMap_C::OnChangeFloors' has a wrong offset!");
static_assert(offsetof(ABP_UI_PlanningMap_C, Floors) == 0x000390, "Member 'ABP_UI_PlanningMap_C::Floors' has a wrong offset!");
static_assert(offsetof(ABP_UI_PlanningMap_C, Initialized) == 0x0003A0, "Member 'ABP_UI_PlanningMap_C::Initialized' has a wrong offset!");
static_assert(offsetof(ABP_UI_PlanningMap_C, CurrentMaterialParent) == 0x0003A8, "Member 'ABP_UI_PlanningMap_C::CurrentMaterialParent' has a wrong offset!");
static_assert(offsetof(ABP_UI_PlanningMap_C, OnFloorMaterialUpdated) == 0x0003B0, "Member 'ABP_UI_PlanningMap_C::OnFloorMaterialUpdated' has a wrong offset!");
static_assert(offsetof(ABP_UI_PlanningMap_C, FloorMaterialUpdated) == 0x0003C0, "Member 'ABP_UI_PlanningMap_C::FloorMaterialUpdated' has a wrong offset!");
static_assert(offsetof(ABP_UI_PlanningMap_C, MapMarkerComponents) == 0x0003C8, "Member 'ABP_UI_PlanningMap_C::MapMarkerComponents' has a wrong offset!");

}

