#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_WorldMap_MissionSelect

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "ReadyOrNot_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_WorldMap_MissionSelect.W_WorldMap_MissionSelect_C
// 0x01A8 (0x0468 - 0x02C0)
class UW_WorldMap_MissionSelect_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Hide;                                              // 0x02C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Reveal;                                            // 0x02D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UW_Button_C*                            btn_AcceptMission_1;                               // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 div_Formation_Bot_1;                               // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 div_Formation_Top_1;                               // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HB_Equipment_1;                                    // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 img_MissionImg;                                    // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              lbl_Formation_1;                                   // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                SelectedMissionPanel_1;                            // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBox;                                           // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              txt_ActiveShooterDifficulty;                       // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              txt_BestGrade;                                     // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              txt_BestTime;                                      // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              txt_Formation_1;                                   // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             txt_MissionDescription;                            // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              txt_MissionName;                                   // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FSpawnPoints                           SpawnInfo;                                         // 0x0348(0x00A0)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void(class UW_WorldMap_MissionSelect_C* BtnClicked)> OnSetMissionButtonClicked; // 0x03E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class FName                                   CurrentSpawn;                                      // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Hidden;                                            // 0x0400(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_401[0x7];                                      // 0x0401(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             MissionSelectTexture;                              // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class FText                                   MissionName;                                       // 0x0410(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	class FText                                   MissionDifficulty;                                 // 0x0428(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	class FName                                   MissionURL;                                        // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class FText                                   MissionDescription;                                // 0x0448(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	ECOOPMode                                     ModeEnum;                                          // 0x0460(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void BndEvt__W_WorldMap_MissionSelect_btn_AcceptMission_1_K2Node_ComponentBoundEvent_2_Clicked__DelegateSignature(class UW_Button_C* Button);
	void ExecuteUbergraph_W_WorldMap_MissionSelect(int32 EntryPoint);
	void OnShow(class FName SelectedMission);
	void PreConstruct(bool IsDesignTime);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void UpdateMissionScore(class FName SelectionMission);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_WorldMap_MissionSelect_C">();
	}
	static class UW_WorldMap_MissionSelect_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_WorldMap_MissionSelect_C>();
	}
};
static_assert(alignof(UW_WorldMap_MissionSelect_C) == 0x000008, "Wrong alignment on UW_WorldMap_MissionSelect_C");
static_assert(sizeof(UW_WorldMap_MissionSelect_C) == 0x000468, "Wrong size on UW_WorldMap_MissionSelect_C");
static_assert(offsetof(UW_WorldMap_MissionSelect_C, UberGraphFrame) == 0x0002C0, "Member 'UW_WorldMap_MissionSelect_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_WorldMap_MissionSelect_C, Hide) == 0x0002C8, "Member 'UW_WorldMap_MissionSelect_C::Hide' has a wrong offset!");
static_assert(offsetof(UW_WorldMap_MissionSelect_C, Reveal) == 0x0002D0, "Member 'UW_WorldMap_MissionSelect_C::Reveal' has a wrong offset!");
static_assert(offsetof(UW_WorldMap_MissionSelect_C, btn_AcceptMission_1) == 0x0002D8, "Member 'UW_WorldMap_MissionSelect_C::btn_AcceptMission_1' has a wrong offset!");
static_assert(offsetof(UW_WorldMap_MissionSelect_C, div_Formation_Bot_1) == 0x0002E0, "Member 'UW_WorldMap_MissionSelect_C::div_Formation_Bot_1' has a wrong offset!");
static_assert(offsetof(UW_WorldMap_MissionSelect_C, div_Formation_Top_1) == 0x0002E8, "Member 'UW_WorldMap_MissionSelect_C::div_Formation_Top_1' has a wrong offset!");
static_assert(offsetof(UW_WorldMap_MissionSelect_C, HB_Equipment_1) == 0x0002F0, "Member 'UW_WorldMap_MissionSelect_C::HB_Equipment_1' has a wrong offset!");
static_assert(offsetof(UW_WorldMap_MissionSelect_C, img_MissionImg) == 0x0002F8, "Member 'UW_WorldMap_MissionSelect_C::img_MissionImg' has a wrong offset!");
static_assert(offsetof(UW_WorldMap_MissionSelect_C, lbl_Formation_1) == 0x000300, "Member 'UW_WorldMap_MissionSelect_C::lbl_Formation_1' has a wrong offset!");
static_assert(offsetof(UW_WorldMap_MissionSelect_C, SelectedMissionPanel_1) == 0x000308, "Member 'UW_WorldMap_MissionSelect_C::SelectedMissionPanel_1' has a wrong offset!");
static_assert(offsetof(UW_WorldMap_MissionSelect_C, SizeBox) == 0x000310, "Member 'UW_WorldMap_MissionSelect_C::SizeBox' has a wrong offset!");
static_assert(offsetof(UW_WorldMap_MissionSelect_C, txt_ActiveShooterDifficulty) == 0x000318, "Member 'UW_WorldMap_MissionSelect_C::txt_ActiveShooterDifficulty' has a wrong offset!");
static_assert(offsetof(UW_WorldMap_MissionSelect_C, txt_BestGrade) == 0x000320, "Member 'UW_WorldMap_MissionSelect_C::txt_BestGrade' has a wrong offset!");
static_assert(offsetof(UW_WorldMap_MissionSelect_C, txt_BestTime) == 0x000328, "Member 'UW_WorldMap_MissionSelect_C::txt_BestTime' has a wrong offset!");
static_assert(offsetof(UW_WorldMap_MissionSelect_C, txt_Formation_1) == 0x000330, "Member 'UW_WorldMap_MissionSelect_C::txt_Formation_1' has a wrong offset!");
static_assert(offsetof(UW_WorldMap_MissionSelect_C, txt_MissionDescription) == 0x000338, "Member 'UW_WorldMap_MissionSelect_C::txt_MissionDescription' has a wrong offset!");
static_assert(offsetof(UW_WorldMap_MissionSelect_C, txt_MissionName) == 0x000340, "Member 'UW_WorldMap_MissionSelect_C::txt_MissionName' has a wrong offset!");
static_assert(offsetof(UW_WorldMap_MissionSelect_C, SpawnInfo) == 0x000348, "Member 'UW_WorldMap_MissionSelect_C::SpawnInfo' has a wrong offset!");
static_assert(offsetof(UW_WorldMap_MissionSelect_C, OnSetMissionButtonClicked) == 0x0003E8, "Member 'UW_WorldMap_MissionSelect_C::OnSetMissionButtonClicked' has a wrong offset!");
static_assert(offsetof(UW_WorldMap_MissionSelect_C, CurrentSpawn) == 0x0003F8, "Member 'UW_WorldMap_MissionSelect_C::CurrentSpawn' has a wrong offset!");
static_assert(offsetof(UW_WorldMap_MissionSelect_C, Hidden) == 0x000400, "Member 'UW_WorldMap_MissionSelect_C::Hidden' has a wrong offset!");
static_assert(offsetof(UW_WorldMap_MissionSelect_C, MissionSelectTexture) == 0x000408, "Member 'UW_WorldMap_MissionSelect_C::MissionSelectTexture' has a wrong offset!");
static_assert(offsetof(UW_WorldMap_MissionSelect_C, MissionName) == 0x000410, "Member 'UW_WorldMap_MissionSelect_C::MissionName' has a wrong offset!");
static_assert(offsetof(UW_WorldMap_MissionSelect_C, MissionDifficulty) == 0x000428, "Member 'UW_WorldMap_MissionSelect_C::MissionDifficulty' has a wrong offset!");
static_assert(offsetof(UW_WorldMap_MissionSelect_C, MissionURL) == 0x000440, "Member 'UW_WorldMap_MissionSelect_C::MissionURL' has a wrong offset!");
static_assert(offsetof(UW_WorldMap_MissionSelect_C, MissionDescription) == 0x000448, "Member 'UW_WorldMap_MissionSelect_C::MissionDescription' has a wrong offset!");
static_assert(offsetof(UW_WorldMap_MissionSelect_C, ModeEnum) == 0x000460, "Member 'UW_WorldMap_MissionSelect_C::ModeEnum' has a wrong offset!");

}

