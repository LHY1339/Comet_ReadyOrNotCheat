#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ReplayController

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ReadyOrNot_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ReplayController.BP_ReplayController_C
// 0x0040 (0x0E78 - 0x0E38)
class ABP_ReplayController_C final : public AReplayController
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0E38(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          bRemoveReplayControls;                             // 0x0E40(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSetInitialPosition;                               // 0x0E41(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSprintHeld;                                       // 0x0E42(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCrouchHeld;                                       // 0x0E43(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFollowLocalPlayer;                                // 0x0E44(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E45[0x3];                                      // 0x0E45(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AReadyOrNotCharacter*                   LocalPlayer;                                       // 0x0E48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        DeltaSeconds;                                      // 0x0E50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABaseItem*>                      IgnoredActors;                                     // 0x0E58(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          MouseRightPressed;                                 // 0x0E68(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E69[0x3];                                      // 0x0E69(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HUDState;                                          // 0x0E6C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPrePaused;                                        // 0x0E70(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_ReplayController(int32 EntryPoint);
	void InpActEvt_ReplayDecreasePlaybackSpeed_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_ReplayDecreasePlaybackSpeed_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpActEvt_ReplayIncreasePlaybackSpeed_K2Node_InputActionEvent_2(const struct FKey& Key);
	void InpActEvt_ReplayIncreasePlaybackSpeed_K2Node_InputActionEvent_3(const struct FKey& Key);
	void OnPauseMenuClosed();
	void OnPauseMenuOpened();
	void OnScrubComplete();
	void ToggleReplayHUD();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ReplayController_C">();
	}
	static class ABP_ReplayController_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ReplayController_C>();
	}
};
static_assert(alignof(ABP_ReplayController_C) == 0x000008, "Wrong alignment on ABP_ReplayController_C");
static_assert(sizeof(ABP_ReplayController_C) == 0x000E78, "Wrong size on ABP_ReplayController_C");
static_assert(offsetof(ABP_ReplayController_C, UberGraphFrame) == 0x000E38, "Member 'ABP_ReplayController_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_ReplayController_C, bRemoveReplayControls) == 0x000E40, "Member 'ABP_ReplayController_C::bRemoveReplayControls' has a wrong offset!");
static_assert(offsetof(ABP_ReplayController_C, bSetInitialPosition) == 0x000E41, "Member 'ABP_ReplayController_C::bSetInitialPosition' has a wrong offset!");
static_assert(offsetof(ABP_ReplayController_C, bSprintHeld) == 0x000E42, "Member 'ABP_ReplayController_C::bSprintHeld' has a wrong offset!");
static_assert(offsetof(ABP_ReplayController_C, bCrouchHeld) == 0x000E43, "Member 'ABP_ReplayController_C::bCrouchHeld' has a wrong offset!");
static_assert(offsetof(ABP_ReplayController_C, bFollowLocalPlayer) == 0x000E44, "Member 'ABP_ReplayController_C::bFollowLocalPlayer' has a wrong offset!");
static_assert(offsetof(ABP_ReplayController_C, LocalPlayer) == 0x000E48, "Member 'ABP_ReplayController_C::LocalPlayer' has a wrong offset!");
static_assert(offsetof(ABP_ReplayController_C, DeltaSeconds) == 0x000E50, "Member 'ABP_ReplayController_C::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(ABP_ReplayController_C, IgnoredActors) == 0x000E58, "Member 'ABP_ReplayController_C::IgnoredActors' has a wrong offset!");
static_assert(offsetof(ABP_ReplayController_C, MouseRightPressed) == 0x000E68, "Member 'ABP_ReplayController_C::MouseRightPressed' has a wrong offset!");
static_assert(offsetof(ABP_ReplayController_C, HUDState) == 0x000E6C, "Member 'ABP_ReplayController_C::HUDState' has a wrong offset!");
static_assert(offsetof(ABP_ReplayController_C, bPrePaused) == 0x000E70, "Member 'ABP_ReplayController_C::bPrePaused' has a wrong offset!");

}

