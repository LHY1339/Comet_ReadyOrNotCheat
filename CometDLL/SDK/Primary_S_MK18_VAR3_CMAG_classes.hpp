#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Primary_S_MK18_VAR3_CMAG

#include "Basic.hpp"

#include "ReadyOrNot_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass Primary_S_MK18_VAR3_CMAG.Primary_S_MK18_VAR3_CMAG_C
// 0x0020 (0x1760 - 0x1740)
class APrimary_S_MK18_VAR3_CMAG_C final : public ABaseMagazineWeapon
{
public:
	uint8                                         Pad_1738[0x8];                                     // 0x1738(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USpotLightComponent*                    SpotLight;                                         // 0x1740(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Light;                                             // 0x1748(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Grip;                                              // 0x1750(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Optic;                                             // 0x1758(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"Primary_S_MK18_VAR3_CMAG_C">();
	}
	static class APrimary_S_MK18_VAR3_CMAG_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<APrimary_S_MK18_VAR3_CMAG_C>();
	}
};
static_assert(alignof(APrimary_S_MK18_VAR3_CMAG_C) == 0x000010, "Wrong alignment on APrimary_S_MK18_VAR3_CMAG_C");
static_assert(sizeof(APrimary_S_MK18_VAR3_CMAG_C) == 0x001760, "Wrong size on APrimary_S_MK18_VAR3_CMAG_C");
static_assert(offsetof(APrimary_S_MK18_VAR3_CMAG_C, SpotLight) == 0x001740, "Member 'APrimary_S_MK18_VAR3_CMAG_C::SpotLight' has a wrong offset!");
static_assert(offsetof(APrimary_S_MK18_VAR3_CMAG_C, Light) == 0x001748, "Member 'APrimary_S_MK18_VAR3_CMAG_C::Light' has a wrong offset!");
static_assert(offsetof(APrimary_S_MK18_VAR3_CMAG_C, Grip) == 0x001750, "Member 'APrimary_S_MK18_VAR3_CMAG_C::Grip' has a wrong offset!");
static_assert(offsetof(APrimary_S_MK18_VAR3_CMAG_C, Optic) == 0x001758, "Member 'APrimary_S_MK18_VAR3_CMAG_C::Optic' has a wrong offset!");

}

