#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_SBL_Code

#include "Basic.hpp"

#include "BPI_SBL_Code_classes.hpp"
#include "BPI_SBL_Code_parameters.hpp"


namespace SDK
{

// Function BPI_SBL_Code.BPI_SBL_Code_C.GetAllModActors
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>*                  Actors                                                 (Parm, OutParm)

void IBPI_SBL_Code_C::GetAllModActors(TArray<class AActor*>* Actors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_SBL_Code_C", "GetAllModActors");

	Params::BPI_SBL_Code_C_GetAllModActors Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (Actors != nullptr)
		*Actors = std::move(Parms.Actors);
}


// Function BPI_SBL_Code.BPI_SBL_Code_C.GetAllModData
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    OnlyActive                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class UPDA_SBL_ModData_C*>*      ModData                                                (Parm, OutParm)

void IBPI_SBL_Code_C::GetAllModData(bool OnlyActive, TArray<class UPDA_SBL_ModData_C*>* ModData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_SBL_Code_C", "GetAllModData");

	Params::BPI_SBL_Code_C_GetAllModData Parms{};

	Parms.OnlyActive = OnlyActive;

	AsUObject()->ProcessEvent(Func, &Parms);

	if (ModData != nullptr)
		*ModData = std::move(Parms.ModData);
}


// Function BPI_SBL_Code.BPI_SBL_Code_C.GetModActorsFromData
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPDA_SBL_ModData_C*               ModData                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<class AActor*>*                  Actors                                                 (Parm, OutParm)
// bool*                                   IsActive                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_SBL_Code_C::GetModActorsFromData(class UPDA_SBL_ModData_C* ModData, TArray<class AActor*>* Actors, bool* IsActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_SBL_Code_C", "GetModActorsFromData");

	Params::BPI_SBL_Code_C_GetModActorsFromData Parms{};

	Parms.ModData = ModData;

	AsUObject()->ProcessEvent(Func, &Parms);

	if (Actors != nullptr)
		*Actors = std::move(Parms.Actors);

	if (IsActive != nullptr)
		*IsActive = Parms.IsActive;
}


// Function BPI_SBL_Code.BPI_SBL_Code_C.GetModDataActive
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPDA_SBL_ModData_C*               ModData                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsActive                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_SBL_Code_C::GetModDataActive(class UPDA_SBL_ModData_C* ModData, bool* IsActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_SBL_Code_C", "GetModDataActive");

	Params::BPI_SBL_Code_C_GetModDataActive Parms{};

	Parms.ModData = ModData;

	AsUObject()->ProcessEvent(Func, &Parms);

	if (IsActive != nullptr)
		*IsActive = Parms.IsActive;
}


// Function BPI_SBL_Code.BPI_SBL_Code_C.GetModDataFromModActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPDA_SBL_ModData_C**              ModData                                                (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   Valid                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_SBL_Code_C::GetModDataFromModActor(class AActor* Actor, class UPDA_SBL_ModData_C** ModData, bool* Valid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_SBL_Code_C", "GetModDataFromModActor");

	Params::BPI_SBL_Code_C_GetModDataFromModActor Parms{};

	Parms.Actor = Actor;

	AsUObject()->ProcessEvent(Func, &Parms);

	if (ModData != nullptr)
		*ModData = Parms.ModData;

	if (Valid != nullptr)
		*Valid = Parms.Valid;
}


// Function BPI_SBL_Code.BPI_SBL_Code_C.GetModInfo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPDA_SBL_ModData_C*               ModData                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FText*                            ModName                                                (Parm, OutParm)
// class FText*                            ModOverview                                            (Parm, OutParm)
// TArray<class FText>*                    ModAuthors                                             (Parm, OutParm)
// class FText*                            ModVersion                                             (Parm, OutParm)
// class FName*                            ModPakName                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  ModNexusID                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName*                            ModModioID                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsActive                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_SBL_Code_C::GetModInfo(class UPDA_SBL_ModData_C* ModData, class FText* ModName, class FText* ModOverview, TArray<class FText>* ModAuthors, class FText* ModVersion, class FName* ModPakName, int32* ModNexusID, class FName* ModModioID, bool* IsActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_SBL_Code_C", "GetModInfo");

	Params::BPI_SBL_Code_C_GetModInfo Parms{};

	Parms.ModData = ModData;

	AsUObject()->ProcessEvent(Func, &Parms);

	if (ModName != nullptr)
		*ModName = std::move(Parms.ModName);

	if (ModOverview != nullptr)
		*ModOverview = std::move(Parms.ModOverview);

	if (ModAuthors != nullptr)
		*ModAuthors = std::move(Parms.ModAuthors);

	if (ModVersion != nullptr)
		*ModVersion = std::move(Parms.ModVersion);

	if (ModPakName != nullptr)
		*ModPakName = Parms.ModPakName;

	if (ModNexusID != nullptr)
		*ModNexusID = Parms.ModNexusID;

	if (ModModioID != nullptr)
		*ModModioID = Parms.ModModioID;

	if (IsActive != nullptr)
		*IsActive = Parms.IsActive;
}


// Function BPI_SBL_Code.BPI_SBL_Code_C.SetModDataActive
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPDA_SBL_ModData_C*               ModData                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    IsActive                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_SBL_Code_C::SetModDataActive(class UPDA_SBL_ModData_C* ModData, bool IsActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_SBL_Code_C", "SetModDataActive");

	Params::BPI_SBL_Code_C_SetModDataActive Parms{};

	Parms.ModData = ModData;
	Parms.IsActive = IsActive;

	AsUObject()->ProcessEvent(Func, &Parms);
}

}

