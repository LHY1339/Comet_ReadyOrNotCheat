#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_LoadoutInfo_EffectsListEntry

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "ST_ItemEffects_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "ReadyOrNot_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_LoadoutInfo_EffectsListEntry.W_LoadoutInfo_EffectsListEntry_C
// 0x00A8 (0x0368 - 0x02C0)
class UW_LoadoutInfo_EffectsListEntry_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       animReveal;                                        // 0x02C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UBorder*                                EffectBorder;                                      // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              txt_EffectSymbol;                                  // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              txt_EffectText;                                    // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class FText                                   EffectText;                                        // 0x02E8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   EffectSymbol;                                      // 0x0300(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FLinearColor                           EffectColor;                                       // 0x0318(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           PositiveColor;                                     // 0x0328(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           NegativeColor;                                     // 0x0338(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FST_ItemEffects                        Effect;                                            // 0x0348(0x0020)(Edit, BlueprintVisible, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void BackPage(bool* Handled);
	void ChangePage(class FName PageName);
	void Construct();
	void ExecuteUbergraph_W_LoadoutInfo_EffectsListEntry(int32 EntryPoint);
	void HeaderSubpageNavigation(class FName OptionNameID);
	void Hide(double Delay, bool Collapse);
	void PreConstruct(bool IsDesignTime);
	void Reveal(double Delay);
	void SetInfo(const struct FST_ItemEffects& Effect_0);
	void SetInputMode(bool IsGamepad);
	void SetLoadoutWidget(class UW_Loadout_C* LoadoutWidget);
	void UpdateActiveLoadout(const struct FSavedLoadout& ActiveLoadout);
	void UpdateCurrentItemMap(const TMap<EItemCategory, class UClass*>& ItemCategory);
	void UpdateCurrentSlot(class UW_LoadoutSlot_C* CurrentSlot);

	void GetFocusTarget(class UWidget** Focus) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_LoadoutInfo_EffectsListEntry_C">();
	}
	static class UW_LoadoutInfo_EffectsListEntry_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_LoadoutInfo_EffectsListEntry_C>();
	}
};
static_assert(alignof(UW_LoadoutInfo_EffectsListEntry_C) == 0x000008, "Wrong alignment on UW_LoadoutInfo_EffectsListEntry_C");
static_assert(sizeof(UW_LoadoutInfo_EffectsListEntry_C) == 0x000368, "Wrong size on UW_LoadoutInfo_EffectsListEntry_C");
static_assert(offsetof(UW_LoadoutInfo_EffectsListEntry_C, UberGraphFrame) == 0x0002C0, "Member 'UW_LoadoutInfo_EffectsListEntry_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_LoadoutInfo_EffectsListEntry_C, animReveal) == 0x0002C8, "Member 'UW_LoadoutInfo_EffectsListEntry_C::animReveal' has a wrong offset!");
static_assert(offsetof(UW_LoadoutInfo_EffectsListEntry_C, EffectBorder) == 0x0002D0, "Member 'UW_LoadoutInfo_EffectsListEntry_C::EffectBorder' has a wrong offset!");
static_assert(offsetof(UW_LoadoutInfo_EffectsListEntry_C, txt_EffectSymbol) == 0x0002D8, "Member 'UW_LoadoutInfo_EffectsListEntry_C::txt_EffectSymbol' has a wrong offset!");
static_assert(offsetof(UW_LoadoutInfo_EffectsListEntry_C, txt_EffectText) == 0x0002E0, "Member 'UW_LoadoutInfo_EffectsListEntry_C::txt_EffectText' has a wrong offset!");
static_assert(offsetof(UW_LoadoutInfo_EffectsListEntry_C, EffectText) == 0x0002E8, "Member 'UW_LoadoutInfo_EffectsListEntry_C::EffectText' has a wrong offset!");
static_assert(offsetof(UW_LoadoutInfo_EffectsListEntry_C, EffectSymbol) == 0x000300, "Member 'UW_LoadoutInfo_EffectsListEntry_C::EffectSymbol' has a wrong offset!");
static_assert(offsetof(UW_LoadoutInfo_EffectsListEntry_C, EffectColor) == 0x000318, "Member 'UW_LoadoutInfo_EffectsListEntry_C::EffectColor' has a wrong offset!");
static_assert(offsetof(UW_LoadoutInfo_EffectsListEntry_C, PositiveColor) == 0x000328, "Member 'UW_LoadoutInfo_EffectsListEntry_C::PositiveColor' has a wrong offset!");
static_assert(offsetof(UW_LoadoutInfo_EffectsListEntry_C, NegativeColor) == 0x000338, "Member 'UW_LoadoutInfo_EffectsListEntry_C::NegativeColor' has a wrong offset!");
static_assert(offsetof(UW_LoadoutInfo_EffectsListEntry_C, Effect) == 0x000348, "Member 'UW_LoadoutInfo_EffectsListEntry_C::Effect' has a wrong offset!");

}

