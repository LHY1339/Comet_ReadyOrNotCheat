#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SMM_SaveGame_Base

#include "Basic.hpp"

#include "Slate_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass SMM_SaveGame_Base.SMM_SaveGame_Base_C
// 0x0450 (0x0478 - 0x0028)
class USMM_SaveGame_Base_C : public USaveGame
{
public:
	class FString                                 ModName;                                           // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 SaveSlot;                                          // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	TMap<class FName, bool>                       Bools;                                             // 0x0048(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, uint8>                      Bytes;                                             // 0x0098(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, int32>                      Integers;                                          // 0x00E8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, double>                     Floats;                                            // 0x0138(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, class FName>                Names;                                             // 0x0188(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, class FString>              Strings;                                           // 0x01D8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, class FText>                Texts;                                             // 0x0228(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, struct FVector>             Vectors;                                           // 0x0278(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, struct FRotator>            Rotators;                                          // 0x02C8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, struct FTransform>          Transforms;                                        // 0x0318(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, struct FInputChord>         Inputs;                                            // 0x0368(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, TSoftObjectPtr<class UObject>> SoftObjects;                                    // 0x03B8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, TSoftClassPtr<class UClass>> SoftClasses;                                      // 0x0408(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void()>              OnSaved;                                           // 0x0458(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnUpdated;                                         // 0x0468(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void Created();
	void GetBoolByKey(class FName Key, bool* BoolValue, bool* Valid);
	void GetByteByKey(class FName Key, uint8* ByteValue, bool* Valid);
	void GetClassByKey(class FName Key, TSoftClassPtr<class UClass>* Value, bool* Valid);
	void GetFloatByKey(class FName Key, double* FloatValue, bool* Valid);
	void GetInputByKey(class FName Key, struct FInputChord* Value, bool* Valid);
	void GetIntegerByKey(class FName Key, int32* IntValue, bool* Valid);
	void GetNameByKey(class FName Key, class FName* NameValue, bool* Valid);
	void GetObjectByKey(class FName Key, TSoftObjectPtr<class UObject>* Value, bool* Valid);
	void GetRotatorByKey(class FName Key, struct FRotator* Value, bool* Valid);
	void GetStringByKey(class FName Key, class FString* StringValue, bool* Valid);
	void GetTextByKey(class FName Key, class FText* Value, bool* Valid);
	void GetTransformByKey(class FName Key, struct FTransform* Value, bool* Valid);
	void GetVectorByKey(class FName Key, struct FVector* Value, bool* Valid);
	void Loaded();
	void Saved();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"SMM_SaveGame_Base_C">();
	}
	static class USMM_SaveGame_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<USMM_SaveGame_Base_C>();
	}
};
static_assert(alignof(USMM_SaveGame_Base_C) == 0x000008, "Wrong alignment on USMM_SaveGame_Base_C");
static_assert(sizeof(USMM_SaveGame_Base_C) == 0x000478, "Wrong size on USMM_SaveGame_Base_C");
static_assert(offsetof(USMM_SaveGame_Base_C, ModName) == 0x000028, "Member 'USMM_SaveGame_Base_C::ModName' has a wrong offset!");
static_assert(offsetof(USMM_SaveGame_Base_C, SaveSlot) == 0x000038, "Member 'USMM_SaveGame_Base_C::SaveSlot' has a wrong offset!");
static_assert(offsetof(USMM_SaveGame_Base_C, Bools) == 0x000048, "Member 'USMM_SaveGame_Base_C::Bools' has a wrong offset!");
static_assert(offsetof(USMM_SaveGame_Base_C, Bytes) == 0x000098, "Member 'USMM_SaveGame_Base_C::Bytes' has a wrong offset!");
static_assert(offsetof(USMM_SaveGame_Base_C, Integers) == 0x0000E8, "Member 'USMM_SaveGame_Base_C::Integers' has a wrong offset!");
static_assert(offsetof(USMM_SaveGame_Base_C, Floats) == 0x000138, "Member 'USMM_SaveGame_Base_C::Floats' has a wrong offset!");
static_assert(offsetof(USMM_SaveGame_Base_C, Names) == 0x000188, "Member 'USMM_SaveGame_Base_C::Names' has a wrong offset!");
static_assert(offsetof(USMM_SaveGame_Base_C, Strings) == 0x0001D8, "Member 'USMM_SaveGame_Base_C::Strings' has a wrong offset!");
static_assert(offsetof(USMM_SaveGame_Base_C, Texts) == 0x000228, "Member 'USMM_SaveGame_Base_C::Texts' has a wrong offset!");
static_assert(offsetof(USMM_SaveGame_Base_C, Vectors) == 0x000278, "Member 'USMM_SaveGame_Base_C::Vectors' has a wrong offset!");
static_assert(offsetof(USMM_SaveGame_Base_C, Rotators) == 0x0002C8, "Member 'USMM_SaveGame_Base_C::Rotators' has a wrong offset!");
static_assert(offsetof(USMM_SaveGame_Base_C, Transforms) == 0x000318, "Member 'USMM_SaveGame_Base_C::Transforms' has a wrong offset!");
static_assert(offsetof(USMM_SaveGame_Base_C, Inputs) == 0x000368, "Member 'USMM_SaveGame_Base_C::Inputs' has a wrong offset!");
static_assert(offsetof(USMM_SaveGame_Base_C, SoftObjects) == 0x0003B8, "Member 'USMM_SaveGame_Base_C::SoftObjects' has a wrong offset!");
static_assert(offsetof(USMM_SaveGame_Base_C, SoftClasses) == 0x000408, "Member 'USMM_SaveGame_Base_C::SoftClasses' has a wrong offset!");
static_assert(offsetof(USMM_SaveGame_Base_C, OnSaved) == 0x000458, "Member 'USMM_SaveGame_Base_C::OnSaved' has a wrong offset!");
static_assert(offsetof(USMM_SaveGame_Base_C, OnUpdated) == 0x000468, "Member 'USMM_SaveGame_Base_C::OnUpdated' has a wrong offset!");

}

