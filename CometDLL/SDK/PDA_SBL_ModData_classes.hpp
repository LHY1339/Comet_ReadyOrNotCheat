#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PDA_SBL_ModData

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass PDA_SBL_ModData.PDA_SBL_ModData_C
// 0x0080 (0x00B0 - 0x0030)
class UPDA_SBL_ModData_C final : public UPrimaryDataAsset
{
public:
	class FText                                   ModName;                                           // 0x0030(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   ModOverview;                                       // 0x0048(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FText>                           ModAuthors;                                        // 0x0060(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   ModVersion;                                        // 0x0070(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<TSoftClassPtr<class UClass>>           ModActors;                                         // 0x0088(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FName                                   ModPakName;                                        // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ModNexusID;                                        // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ModModioID;                                        // 0x00A4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"PDA_SBL_ModData_C">();
	}
	static class UPDA_SBL_ModData_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPDA_SBL_ModData_C>();
	}
};
static_assert(alignof(UPDA_SBL_ModData_C) == 0x000008, "Wrong alignment on UPDA_SBL_ModData_C");
static_assert(sizeof(UPDA_SBL_ModData_C) == 0x0000B0, "Wrong size on UPDA_SBL_ModData_C");
static_assert(offsetof(UPDA_SBL_ModData_C, ModName) == 0x000030, "Member 'UPDA_SBL_ModData_C::ModName' has a wrong offset!");
static_assert(offsetof(UPDA_SBL_ModData_C, ModOverview) == 0x000048, "Member 'UPDA_SBL_ModData_C::ModOverview' has a wrong offset!");
static_assert(offsetof(UPDA_SBL_ModData_C, ModAuthors) == 0x000060, "Member 'UPDA_SBL_ModData_C::ModAuthors' has a wrong offset!");
static_assert(offsetof(UPDA_SBL_ModData_C, ModVersion) == 0x000070, "Member 'UPDA_SBL_ModData_C::ModVersion' has a wrong offset!");
static_assert(offsetof(UPDA_SBL_ModData_C, ModActors) == 0x000088, "Member 'UPDA_SBL_ModData_C::ModActors' has a wrong offset!");
static_assert(offsetof(UPDA_SBL_ModData_C, ModPakName) == 0x000098, "Member 'UPDA_SBL_ModData_C::ModPakName' has a wrong offset!");
static_assert(offsetof(UPDA_SBL_ModData_C, ModNexusID) == 0x0000A0, "Member 'UPDA_SBL_ModData_C::ModNexusID' has a wrong offset!");
static_assert(offsetof(UPDA_SBL_ModData_C, ModModioID) == 0x0000A4, "Member 'UPDA_SBL_ModData_C::ModModioID' has a wrong offset!");

}

