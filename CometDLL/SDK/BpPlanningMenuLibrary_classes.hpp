#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BpPlanningMenuLibrary

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "UMG_structs.hpp"
#include "ReadyOrNot_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BpPlanningMenuLibrary.BpPlanningMenuLibrary_C
// 0x0000 (0x0028 - 0x0028)
class UBpPlanningMenuLibrary_C final : public UBlueprintFunctionLibrary
{
public:
	static void CanCustomizeWeaponClass(class UClass* WeaponClass, class UObject* __WorldContext, bool* CanCustomize);
	static void CanCustomizeWeaponData(const struct FWeaponData& WeaponClass, class UObject* __WorldContext, bool* CanCustomize);
	static void ConstructEquipmentOverviewAmmoString(uint8 AmmoType, int32 MagazineCount, class UObject* __WorldContext, class FText* Text);
	static void CreateOverviewDeployableListText(TArray<int32>& Deployables, class UObject* __WorldContext, class FText* Text);
	static void CreateOverviewPersonnelListText(TArray<int32>& PersonnelList, class UObject* __WorldContext, class FText* Text);
	static void FindIconFromItemClass(class APlayerController* Player_Controller, class UClass* ItemClass, class UObject* __WorldContext, class UTexture2D** Return_Value);
	static void FormatSpawnPoint(const class FText& SpawnPointFormat, const struct FSpawnPoints& Spawn, bool DoubleCost, class UObject* __WorldContext, class FText* Text);
	static void GetActiveDeployablesText(class UObject* __WorldContext, class FText* Text);
	static void GetActivePersonnelText(class UObject* __WorldContext, class FText* Text);
	static void GetAmmoDescriptionForWeaponAndAmmo(class UClass* Weapon, uint8 AmmoType, class UObject* __WorldContext, class FText* Text);
	static void GetAmmoTypeNameForWeaponAndAmmo(class UClass* WeaponClass, uint8 AmmoType, class UObject* __WorldContext, class FText* Text);
	static void GetArmorCoverageText(EArmourCoverage Coverage, uint8 Level, class UObject* __WorldContext, class FText* Text);
	static void GetAttachmentTextData(class UClass* Attachment, class UObject* __WorldContext, ESlateVisibility* Visibility, class FText* Text);
	static void GetCaliberFromBlueprint(TSoftClassPtr<class UClass> WeaponBlueprint, class UObject* __WorldContext, class FText* CaliberText);
	static void GetCharacterDataFromHandle(class FName Handle, class UObject* __WorldContext, struct FCharacterData* Data);
	static void GetFirstWeaponType(TArray<EWeaponType>& WeaponTypes, class UObject* __WorldContext, EWeaponType* WeaponType);
	static void GetNonDefaultLoadouts(class UObject* __WorldContext, TArray<class FString>* Loadouts);
	static void GetSpawnForEntryNum(uint8 Spawn_Num, class UObject* __WorldContext, struct FSpawnPoints* Out_Spawn);
	static void GetWeaponTypeLocalizedName(EWeaponType WeaponType, class UObject* __WorldContext, class FText* LocalizedName);
	static void IsFactorySkin(class UClass* SkinClass, class UObject* __WorldContext, bool* Return_Value);
	static void ItemWeightToText(double Weight, bool Fractional, class UObject* __WorldContext, class FText* Text);
	static void MuzzleVelocityToText(double MuzzleVelocity, class UObject* __WorldContext, class FText* Text);
	static void PlayerStatusToText(EPlayerStatus Status, class APlayerCharacter* PlayerState, class UObject* __WorldContext, class FText* StatusText);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BpPlanningMenuLibrary_C">();
	}
	static class UBpPlanningMenuLibrary_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBpPlanningMenuLibrary_C>();
	}
};
static_assert(alignof(UBpPlanningMenuLibrary_C) == 0x000008, "Wrong alignment on UBpPlanningMenuLibrary_C");
static_assert(sizeof(UBpPlanningMenuLibrary_C) == 0x000028, "Wrong size on UBpPlanningMenuLibrary_C");

}

