#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_EquipTeamMateCategory

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ReadyOrNot_structs.hpp"


namespace SDK::Params
{

// Function W_EquipTeamMateCategory.W_EquipTeamMateCategory_C.BndEvt__Button_K2Node_ComponentBoundEvent_5_OnClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_EquipTeamMateCategory_C_BndEvt__Button_K2Node_ComponentBoundEvent_5_OnClicked__DelegateSignature final
{
public:
	class UW_StandardButton_C*                    CallingButton;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_EquipTeamMateCategory_C_BndEvt__Button_K2Node_ComponentBoundEvent_5_OnClicked__DelegateSignature) == 0x000008, "Wrong alignment on W_EquipTeamMateCategory_C_BndEvt__Button_K2Node_ComponentBoundEvent_5_OnClicked__DelegateSignature");
static_assert(sizeof(W_EquipTeamMateCategory_C_BndEvt__Button_K2Node_ComponentBoundEvent_5_OnClicked__DelegateSignature) == 0x000008, "Wrong size on W_EquipTeamMateCategory_C_BndEvt__Button_K2Node_ComponentBoundEvent_5_OnClicked__DelegateSignature");
static_assert(offsetof(W_EquipTeamMateCategory_C_BndEvt__Button_K2Node_ComponentBoundEvent_5_OnClicked__DelegateSignature, CallingButton) == 0x000000, "Member 'W_EquipTeamMateCategory_C_BndEvt__Button_K2Node_ComponentBoundEvent_5_OnClicked__DelegateSignature::CallingButton' has a wrong offset!");

// Function W_EquipTeamMateCategory.W_EquipTeamMateCategory_C.ExecuteUbergraph_W_EquipTeamMateCategory
// 0x00A0 (0x00A0 - 0x0000)
struct W_EquipTeamMateCategory_C_ExecuteUbergraph_W_EquipTeamMateCategory final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Get_GearCategory_Text_Text_0_ReturnValue; // 0x0008(0x0018)()
	struct FLinearColor                           CallFunc_GetColorAndOpacity_0_ReturnValue;         // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_StandardButton_C*                    K2Node_ComponentBoundEvent_CallingButton;          // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0038(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPremissionPlanning*                    CallFunc_GetPremissionPlanning_ReturnValue;        // 0x0078(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EEquippingSwat                                CallFunc_GetEquippingSwatMember_EquippingSwat;     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_GetColorAndOpacity_0_ReturnValue_1;       // 0x0084(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UPremissionPlanning*                    CallFunc_GetPremissionPlanning_ReturnValue_1;      // 0x0098(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_EquipTeamMateCategory_C_ExecuteUbergraph_W_EquipTeamMateCategory) == 0x000008, "Wrong alignment on W_EquipTeamMateCategory_C_ExecuteUbergraph_W_EquipTeamMateCategory");
static_assert(sizeof(W_EquipTeamMateCategory_C_ExecuteUbergraph_W_EquipTeamMateCategory) == 0x0000A0, "Wrong size on W_EquipTeamMateCategory_C_ExecuteUbergraph_W_EquipTeamMateCategory");
static_assert(offsetof(W_EquipTeamMateCategory_C_ExecuteUbergraph_W_EquipTeamMateCategory, EntryPoint) == 0x000000, "Member 'W_EquipTeamMateCategory_C_ExecuteUbergraph_W_EquipTeamMateCategory::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_EquipTeamMateCategory_C_ExecuteUbergraph_W_EquipTeamMateCategory, K2Node_Event_IsDesignTime) == 0x000004, "Member 'W_EquipTeamMateCategory_C_ExecuteUbergraph_W_EquipTeamMateCategory::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(W_EquipTeamMateCategory_C_ExecuteUbergraph_W_EquipTeamMateCategory, CallFunc_Get_GearCategory_Text_Text_0_ReturnValue) == 0x000008, "Member 'W_EquipTeamMateCategory_C_ExecuteUbergraph_W_EquipTeamMateCategory::CallFunc_Get_GearCategory_Text_Text_0_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_EquipTeamMateCategory_C_ExecuteUbergraph_W_EquipTeamMateCategory, CallFunc_GetColorAndOpacity_0_ReturnValue) == 0x000020, "Member 'W_EquipTeamMateCategory_C_ExecuteUbergraph_W_EquipTeamMateCategory::CallFunc_GetColorAndOpacity_0_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_EquipTeamMateCategory_C_ExecuteUbergraph_W_EquipTeamMateCategory, K2Node_ComponentBoundEvent_CallingButton) == 0x000030, "Member 'W_EquipTeamMateCategory_C_ExecuteUbergraph_W_EquipTeamMateCategory::K2Node_ComponentBoundEvent_CallingButton' has a wrong offset!");
static_assert(offsetof(W_EquipTeamMateCategory_C_ExecuteUbergraph_W_EquipTeamMateCategory, K2Node_Event_MyGeometry) == 0x000038, "Member 'W_EquipTeamMateCategory_C_ExecuteUbergraph_W_EquipTeamMateCategory::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(W_EquipTeamMateCategory_C_ExecuteUbergraph_W_EquipTeamMateCategory, K2Node_Event_InDeltaTime) == 0x000070, "Member 'W_EquipTeamMateCategory_C_ExecuteUbergraph_W_EquipTeamMateCategory::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(W_EquipTeamMateCategory_C_ExecuteUbergraph_W_EquipTeamMateCategory, CallFunc_GetPremissionPlanning_ReturnValue) == 0x000078, "Member 'W_EquipTeamMateCategory_C_ExecuteUbergraph_W_EquipTeamMateCategory::CallFunc_GetPremissionPlanning_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_EquipTeamMateCategory_C_ExecuteUbergraph_W_EquipTeamMateCategory, CallFunc_GetEquippingSwatMember_EquippingSwat) == 0x000080, "Member 'W_EquipTeamMateCategory_C_ExecuteUbergraph_W_EquipTeamMateCategory::CallFunc_GetEquippingSwatMember_EquippingSwat' has a wrong offset!");
static_assert(offsetof(W_EquipTeamMateCategory_C_ExecuteUbergraph_W_EquipTeamMateCategory, CallFunc_GetColorAndOpacity_0_ReturnValue_1) == 0x000084, "Member 'W_EquipTeamMateCategory_C_ExecuteUbergraph_W_EquipTeamMateCategory::CallFunc_GetColorAndOpacity_0_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_EquipTeamMateCategory_C_ExecuteUbergraph_W_EquipTeamMateCategory, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000094, "Member 'W_EquipTeamMateCategory_C_ExecuteUbergraph_W_EquipTeamMateCategory::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_EquipTeamMateCategory_C_ExecuteUbergraph_W_EquipTeamMateCategory, CallFunc_GetPremissionPlanning_ReturnValue_1) == 0x000098, "Member 'W_EquipTeamMateCategory_C_ExecuteUbergraph_W_EquipTeamMateCategory::CallFunc_GetPremissionPlanning_ReturnValue_1' has a wrong offset!");

// Function W_EquipTeamMateCategory.W_EquipTeamMateCategory_C.Get_GearCategory_Text_Text_0
// 0x0020 (0x0020 - 0x0000)
struct W_EquipTeamMateCategory_C_Get_GearCategory_Text_Text_0 final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_EquipTeamMateCategory_C_Get_GearCategory_Text_Text_0) == 0x000008, "Wrong alignment on W_EquipTeamMateCategory_C_Get_GearCategory_Text_Text_0");
static_assert(sizeof(W_EquipTeamMateCategory_C_Get_GearCategory_Text_Text_0) == 0x000020, "Wrong size on W_EquipTeamMateCategory_C_Get_GearCategory_Text_Text_0");
static_assert(offsetof(W_EquipTeamMateCategory_C_Get_GearCategory_Text_Text_0, ReturnValue) == 0x000000, "Member 'W_EquipTeamMateCategory_C_Get_GearCategory_Text_Text_0::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_EquipTeamMateCategory_C_Get_GearCategory_Text_Text_0, K2Node_SwitchEnum_CmpSuccess) == 0x000018, "Member 'W_EquipTeamMateCategory_C_Get_GearCategory_Text_Text_0::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function W_EquipTeamMateCategory.W_EquipTeamMateCategory_C.GetColorAndOpacity_0
// 0x0014 (0x0014 - 0x0000)
struct W_EquipTeamMateCategory_C_GetColorAndOpacity_0 final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_EquipTeamMateCategory_C_GetColorAndOpacity_0) == 0x000004, "Wrong alignment on W_EquipTeamMateCategory_C_GetColorAndOpacity_0");
static_assert(sizeof(W_EquipTeamMateCategory_C_GetColorAndOpacity_0) == 0x000014, "Wrong size on W_EquipTeamMateCategory_C_GetColorAndOpacity_0");
static_assert(offsetof(W_EquipTeamMateCategory_C_GetColorAndOpacity_0, ReturnValue) == 0x000000, "Member 'W_EquipTeamMateCategory_C_GetColorAndOpacity_0::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_EquipTeamMateCategory_C_GetColorAndOpacity_0, K2Node_SwitchEnum_CmpSuccess) == 0x000010, "Member 'W_EquipTeamMateCategory_C_GetColorAndOpacity_0::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function W_EquipTeamMateCategory.W_EquipTeamMateCategory_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct W_EquipTeamMateCategory_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_EquipTeamMateCategory_C_PreConstruct) == 0x000001, "Wrong alignment on W_EquipTeamMateCategory_C_PreConstruct");
static_assert(sizeof(W_EquipTeamMateCategory_C_PreConstruct) == 0x000001, "Wrong size on W_EquipTeamMateCategory_C_PreConstruct");
static_assert(offsetof(W_EquipTeamMateCategory_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'W_EquipTeamMateCategory_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function W_EquipTeamMateCategory.W_EquipTeamMateCategory_C.Tick
// 0x003C (0x003C - 0x0000)
struct W_EquipTeamMateCategory_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_EquipTeamMateCategory_C_Tick) == 0x000004, "Wrong alignment on W_EquipTeamMateCategory_C_Tick");
static_assert(sizeof(W_EquipTeamMateCategory_C_Tick) == 0x00003C, "Wrong size on W_EquipTeamMateCategory_C_Tick");
static_assert(offsetof(W_EquipTeamMateCategory_C_Tick, MyGeometry) == 0x000000, "Member 'W_EquipTeamMateCategory_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_EquipTeamMateCategory_C_Tick, InDeltaTime) == 0x000038, "Member 'W_EquipTeamMateCategory_C_Tick::InDeltaTime' has a wrong offset!");

}

