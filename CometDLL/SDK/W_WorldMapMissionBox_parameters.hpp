#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_WorldMapMissionBox

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "ReadyOrNot_structs.hpp"


namespace SDK::Params
{

// Function W_WorldMapMissionBox.W_WorldMapMissionBox_C.BndEvt__W_WorldMapMissionBox_W_Button_K2Node_ComponentBoundEvent_0_Clicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_WorldMapMissionBox_C_BndEvt__W_WorldMapMissionBox_W_Button_K2Node_ComponentBoundEvent_0_Clicked__DelegateSignature final
{
public:
	class UW_Button_C*                            Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_WorldMapMissionBox_C_BndEvt__W_WorldMapMissionBox_W_Button_K2Node_ComponentBoundEvent_0_Clicked__DelegateSignature) == 0x000008, "Wrong alignment on W_WorldMapMissionBox_C_BndEvt__W_WorldMapMissionBox_W_Button_K2Node_ComponentBoundEvent_0_Clicked__DelegateSignature");
static_assert(sizeof(W_WorldMapMissionBox_C_BndEvt__W_WorldMapMissionBox_W_Button_K2Node_ComponentBoundEvent_0_Clicked__DelegateSignature) == 0x000008, "Wrong size on W_WorldMapMissionBox_C_BndEvt__W_WorldMapMissionBox_W_Button_K2Node_ComponentBoundEvent_0_Clicked__DelegateSignature");
static_assert(offsetof(W_WorldMapMissionBox_C_BndEvt__W_WorldMapMissionBox_W_Button_K2Node_ComponentBoundEvent_0_Clicked__DelegateSignature, Button) == 0x000000, "Member 'W_WorldMapMissionBox_C_BndEvt__W_WorldMapMissionBox_W_Button_K2Node_ComponentBoundEvent_0_Clicked__DelegateSignature::Button' has a wrong offset!");

// Function W_WorldMapMissionBox.W_WorldMapMissionBox_C.BndEvt__W_WorldMapMissionBox_W_Button_K2Node_ComponentBoundEvent_1_Hovered__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_WorldMapMissionBox_C_BndEvt__W_WorldMapMissionBox_W_Button_K2Node_ComponentBoundEvent_1_Hovered__DelegateSignature final
{
public:
	class UW_Button_C*                            Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_WorldMapMissionBox_C_BndEvt__W_WorldMapMissionBox_W_Button_K2Node_ComponentBoundEvent_1_Hovered__DelegateSignature) == 0x000008, "Wrong alignment on W_WorldMapMissionBox_C_BndEvt__W_WorldMapMissionBox_W_Button_K2Node_ComponentBoundEvent_1_Hovered__DelegateSignature");
static_assert(sizeof(W_WorldMapMissionBox_C_BndEvt__W_WorldMapMissionBox_W_Button_K2Node_ComponentBoundEvent_1_Hovered__DelegateSignature) == 0x000008, "Wrong size on W_WorldMapMissionBox_C_BndEvt__W_WorldMapMissionBox_W_Button_K2Node_ComponentBoundEvent_1_Hovered__DelegateSignature");
static_assert(offsetof(W_WorldMapMissionBox_C_BndEvt__W_WorldMapMissionBox_W_Button_K2Node_ComponentBoundEvent_1_Hovered__DelegateSignature, Button) == 0x000000, "Member 'W_WorldMapMissionBox_C_BndEvt__W_WorldMapMissionBox_W_Button_K2Node_ComponentBoundEvent_1_Hovered__DelegateSignature::Button' has a wrong offset!");

// Function W_WorldMapMissionBox.W_WorldMapMissionBox_C.ExecuteUbergraph_W_WorldMapMissionBox
// 0x0910 (0x0910 - 0x0000)
struct W_WorldMapMissionBox_C_ExecuteUbergraph_W_WorldMapMissionBox final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0004(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue;         // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_RandomFloatInRange_ReturnValue;           // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_Button_C*                            K2Node_ComponentBoundEvent_Button_1;               // 0x0060(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_NameToString_ReturnValue_1;          // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_DoesLevelExistInBuild_ReturnValue;        // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLevelDataLookupTable                  CallFunc_GetMapDetailsFromName_ReturnValue;        // 0x0090(0x0818)()
	class UTexture2D*                             CallFunc_GetLazyLoadedImage_ReturnValue;           // 0x08A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_NameToString_ReturnValue_2;          // 0x08B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLevelUnlocked_OutIsUnlocked;            // 0x08C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C1[0x3];                                      // 0x08C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_IsLevelUnlocked_OutScoreRequired;         // 0x08C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_IsLevelUnlocked_OutLockedUrl;             // 0x08C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLevelUnlocked_ReturnValue;              // 0x08D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x08D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8DA[0x2];                                      // 0x08DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFocusEvent                            K2Node_Event_InFocusEvent_1;                       // 0x08DC(0x0008)(NoDestructor)
	uint8                                         Pad_8E4[0x4];                                      // 0x08E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x08E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasUserFocus_ReturnValue;                 // 0x08F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F1[0x3];                                      // 0x08F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFocusEvent                            K2Node_Event_InFocusEvent;                         // 0x08F4(0x0008)(NoDestructor)
	uint8                                         Pad_8FC[0x4];                                      // 0x08FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_Button_C*                            K2Node_ComponentBoundEvent_Button;                 // 0x0900(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Delay_Duration_ImplicitCast;              // 0x0908(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_WorldMapMissionBox_C_ExecuteUbergraph_W_WorldMapMissionBox) == 0x000008, "Wrong alignment on W_WorldMapMissionBox_C_ExecuteUbergraph_W_WorldMapMissionBox");
static_assert(sizeof(W_WorldMapMissionBox_C_ExecuteUbergraph_W_WorldMapMissionBox) == 0x000910, "Wrong size on W_WorldMapMissionBox_C_ExecuteUbergraph_W_WorldMapMissionBox");
static_assert(offsetof(W_WorldMapMissionBox_C_ExecuteUbergraph_W_WorldMapMissionBox, EntryPoint) == 0x000000, "Member 'W_WorldMapMissionBox_C_ExecuteUbergraph_W_WorldMapMissionBox::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_WorldMapMissionBox_C_ExecuteUbergraph_W_WorldMapMissionBox, K2Node_Event_MyGeometry) == 0x000004, "Member 'W_WorldMapMissionBox_C_ExecuteUbergraph_W_WorldMapMissionBox::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(W_WorldMapMissionBox_C_ExecuteUbergraph_W_WorldMapMissionBox, K2Node_Event_InDeltaTime) == 0x00003C, "Member 'W_WorldMapMissionBox_C_ExecuteUbergraph_W_WorldMapMissionBox::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(W_WorldMapMissionBox_C_ExecuteUbergraph_W_WorldMapMissionBox, K2Node_Event_IsDesignTime) == 0x000040, "Member 'W_WorldMapMissionBox_C_ExecuteUbergraph_W_WorldMapMissionBox::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(W_WorldMapMissionBox_C_ExecuteUbergraph_W_WorldMapMissionBox, CallFunc_PlayAnimationReverse_ReturnValue) == 0x000048, "Member 'W_WorldMapMissionBox_C_ExecuteUbergraph_W_WorldMapMissionBox::CallFunc_PlayAnimationReverse_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WorldMapMissionBox_C_ExecuteUbergraph_W_WorldMapMissionBox, CallFunc_PlayAnimationForward_ReturnValue) == 0x000050, "Member 'W_WorldMapMissionBox_C_ExecuteUbergraph_W_WorldMapMissionBox::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WorldMapMissionBox_C_ExecuteUbergraph_W_WorldMapMissionBox, CallFunc_RandomFloatInRange_ReturnValue) == 0x000058, "Member 'W_WorldMapMissionBox_C_ExecuteUbergraph_W_WorldMapMissionBox::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WorldMapMissionBox_C_ExecuteUbergraph_W_WorldMapMissionBox, K2Node_ComponentBoundEvent_Button_1) == 0x000060, "Member 'W_WorldMapMissionBox_C_ExecuteUbergraph_W_WorldMapMissionBox::K2Node_ComponentBoundEvent_Button_1' has a wrong offset!");
static_assert(offsetof(W_WorldMapMissionBox_C_ExecuteUbergraph_W_WorldMapMissionBox, CallFunc_Conv_NameToString_ReturnValue) == 0x000068, "Member 'W_WorldMapMissionBox_C_ExecuteUbergraph_W_WorldMapMissionBox::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WorldMapMissionBox_C_ExecuteUbergraph_W_WorldMapMissionBox, CallFunc_Conv_NameToString_ReturnValue_1) == 0x000078, "Member 'W_WorldMapMissionBox_C_ExecuteUbergraph_W_WorldMapMissionBox::CallFunc_Conv_NameToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_WorldMapMissionBox_C_ExecuteUbergraph_W_WorldMapMissionBox, CallFunc_DoesLevelExistInBuild_ReturnValue) == 0x000088, "Member 'W_WorldMapMissionBox_C_ExecuteUbergraph_W_WorldMapMissionBox::CallFunc_DoesLevelExistInBuild_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WorldMapMissionBox_C_ExecuteUbergraph_W_WorldMapMissionBox, CallFunc_GetMapDetailsFromName_ReturnValue) == 0x000090, "Member 'W_WorldMapMissionBox_C_ExecuteUbergraph_W_WorldMapMissionBox::CallFunc_GetMapDetailsFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WorldMapMissionBox_C_ExecuteUbergraph_W_WorldMapMissionBox, CallFunc_GetLazyLoadedImage_ReturnValue) == 0x0008A8, "Member 'W_WorldMapMissionBox_C_ExecuteUbergraph_W_WorldMapMissionBox::CallFunc_GetLazyLoadedImage_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WorldMapMissionBox_C_ExecuteUbergraph_W_WorldMapMissionBox, CallFunc_Conv_NameToString_ReturnValue_2) == 0x0008B0, "Member 'W_WorldMapMissionBox_C_ExecuteUbergraph_W_WorldMapMissionBox::CallFunc_Conv_NameToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_WorldMapMissionBox_C_ExecuteUbergraph_W_WorldMapMissionBox, CallFunc_IsLevelUnlocked_OutIsUnlocked) == 0x0008C0, "Member 'W_WorldMapMissionBox_C_ExecuteUbergraph_W_WorldMapMissionBox::CallFunc_IsLevelUnlocked_OutIsUnlocked' has a wrong offset!");
static_assert(offsetof(W_WorldMapMissionBox_C_ExecuteUbergraph_W_WorldMapMissionBox, CallFunc_IsLevelUnlocked_OutScoreRequired) == 0x0008C4, "Member 'W_WorldMapMissionBox_C_ExecuteUbergraph_W_WorldMapMissionBox::CallFunc_IsLevelUnlocked_OutScoreRequired' has a wrong offset!");
static_assert(offsetof(W_WorldMapMissionBox_C_ExecuteUbergraph_W_WorldMapMissionBox, CallFunc_IsLevelUnlocked_OutLockedUrl) == 0x0008C8, "Member 'W_WorldMapMissionBox_C_ExecuteUbergraph_W_WorldMapMissionBox::CallFunc_IsLevelUnlocked_OutLockedUrl' has a wrong offset!");
static_assert(offsetof(W_WorldMapMissionBox_C_ExecuteUbergraph_W_WorldMapMissionBox, CallFunc_IsLevelUnlocked_ReturnValue) == 0x0008D8, "Member 'W_WorldMapMissionBox_C_ExecuteUbergraph_W_WorldMapMissionBox::CallFunc_IsLevelUnlocked_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WorldMapMissionBox_C_ExecuteUbergraph_W_WorldMapMissionBox, CallFunc_Not_PreBool_ReturnValue) == 0x0008D9, "Member 'W_WorldMapMissionBox_C_ExecuteUbergraph_W_WorldMapMissionBox::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WorldMapMissionBox_C_ExecuteUbergraph_W_WorldMapMissionBox, K2Node_Event_InFocusEvent_1) == 0x0008DC, "Member 'W_WorldMapMissionBox_C_ExecuteUbergraph_W_WorldMapMissionBox::K2Node_Event_InFocusEvent_1' has a wrong offset!");
static_assert(offsetof(W_WorldMapMissionBox_C_ExecuteUbergraph_W_WorldMapMissionBox, CallFunc_GetOwningPlayer_ReturnValue) == 0x0008E8, "Member 'W_WorldMapMissionBox_C_ExecuteUbergraph_W_WorldMapMissionBox::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WorldMapMissionBox_C_ExecuteUbergraph_W_WorldMapMissionBox, CallFunc_HasUserFocus_ReturnValue) == 0x0008F0, "Member 'W_WorldMapMissionBox_C_ExecuteUbergraph_W_WorldMapMissionBox::CallFunc_HasUserFocus_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_WorldMapMissionBox_C_ExecuteUbergraph_W_WorldMapMissionBox, K2Node_Event_InFocusEvent) == 0x0008F4, "Member 'W_WorldMapMissionBox_C_ExecuteUbergraph_W_WorldMapMissionBox::K2Node_Event_InFocusEvent' has a wrong offset!");
static_assert(offsetof(W_WorldMapMissionBox_C_ExecuteUbergraph_W_WorldMapMissionBox, K2Node_ComponentBoundEvent_Button) == 0x000900, "Member 'W_WorldMapMissionBox_C_ExecuteUbergraph_W_WorldMapMissionBox::K2Node_ComponentBoundEvent_Button' has a wrong offset!");
static_assert(offsetof(W_WorldMapMissionBox_C_ExecuteUbergraph_W_WorldMapMissionBox, CallFunc_Delay_Duration_ImplicitCast) == 0x000908, "Member 'W_WorldMapMissionBox_C_ExecuteUbergraph_W_WorldMapMissionBox::CallFunc_Delay_Duration_ImplicitCast' has a wrong offset!");

// Function W_WorldMapMissionBox.W_WorldMapMissionBox_C.OnAddedToFocusPath
// 0x0008 (0x0008 - 0x0000)
struct W_WorldMapMissionBox_C_OnAddedToFocusPath final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
};
static_assert(alignof(W_WorldMapMissionBox_C_OnAddedToFocusPath) == 0x000004, "Wrong alignment on W_WorldMapMissionBox_C_OnAddedToFocusPath");
static_assert(sizeof(W_WorldMapMissionBox_C_OnAddedToFocusPath) == 0x000008, "Wrong size on W_WorldMapMissionBox_C_OnAddedToFocusPath");
static_assert(offsetof(W_WorldMapMissionBox_C_OnAddedToFocusPath, InFocusEvent) == 0x000000, "Member 'W_WorldMapMissionBox_C_OnAddedToFocusPath::InFocusEvent' has a wrong offset!");

// Function W_WorldMapMissionBox.W_WorldMapMissionBox_C.OnRemovedFromFocusPath
// 0x0008 (0x0008 - 0x0000)
struct W_WorldMapMissionBox_C_OnRemovedFromFocusPath final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
};
static_assert(alignof(W_WorldMapMissionBox_C_OnRemovedFromFocusPath) == 0x000004, "Wrong alignment on W_WorldMapMissionBox_C_OnRemovedFromFocusPath");
static_assert(sizeof(W_WorldMapMissionBox_C_OnRemovedFromFocusPath) == 0x000008, "Wrong size on W_WorldMapMissionBox_C_OnRemovedFromFocusPath");
static_assert(offsetof(W_WorldMapMissionBox_C_OnRemovedFromFocusPath, InFocusEvent) == 0x000000, "Member 'W_WorldMapMissionBox_C_OnRemovedFromFocusPath::InFocusEvent' has a wrong offset!");

// Function W_WorldMapMissionBox.W_WorldMapMissionBox_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct W_WorldMapMissionBox_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_WorldMapMissionBox_C_PreConstruct) == 0x000001, "Wrong alignment on W_WorldMapMissionBox_C_PreConstruct");
static_assert(sizeof(W_WorldMapMissionBox_C_PreConstruct) == 0x000001, "Wrong size on W_WorldMapMissionBox_C_PreConstruct");
static_assert(offsetof(W_WorldMapMissionBox_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'W_WorldMapMissionBox_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function W_WorldMapMissionBox.W_WorldMapMissionBox_C.Tick
// 0x003C (0x003C - 0x0000)
struct W_WorldMapMissionBox_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_WorldMapMissionBox_C_Tick) == 0x000004, "Wrong alignment on W_WorldMapMissionBox_C_Tick");
static_assert(sizeof(W_WorldMapMissionBox_C_Tick) == 0x00003C, "Wrong size on W_WorldMapMissionBox_C_Tick");
static_assert(offsetof(W_WorldMapMissionBox_C_Tick, MyGeometry) == 0x000000, "Member 'W_WorldMapMissionBox_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_WorldMapMissionBox_C_Tick, InDeltaTime) == 0x000038, "Member 'W_WorldMapMissionBox_C_Tick::InDeltaTime' has a wrong offset!");

}

