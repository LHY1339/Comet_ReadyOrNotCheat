#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BpPlanningMenuLibrary

#include "Basic.hpp"

#include "BpPlanningMenuLibrary_classes.hpp"
#include "BpPlanningMenuLibrary_parameters.hpp"


namespace SDK
{

// Function BpPlanningMenuLibrary.BpPlanningMenuLibrary_C.CanCustomizeWeaponClass
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UClass*                           WeaponClass                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   CanCustomize                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBpPlanningMenuLibrary_C::CanCustomizeWeaponClass(class UClass* WeaponClass, class UObject* __WorldContext, bool* CanCustomize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpPlanningMenuLibrary_C", "CanCustomizeWeaponClass");

	Params::BpPlanningMenuLibrary_C_CanCustomizeWeaponClass Parms{};

	Parms.WeaponClass = WeaponClass;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (CanCustomize != nullptr)
		*CanCustomize = Parms.CanCustomize;
}


// Function BpPlanningMenuLibrary.BpPlanningMenuLibrary_C.CanCustomizeWeaponData
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FWeaponData&               WeaponClass                                            (BlueprintVisible, BlueprintReadOnly, Parm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   CanCustomize                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBpPlanningMenuLibrary_C::CanCustomizeWeaponData(const struct FWeaponData& WeaponClass, class UObject* __WorldContext, bool* CanCustomize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpPlanningMenuLibrary_C", "CanCustomizeWeaponData");

	Params::BpPlanningMenuLibrary_C_CanCustomizeWeaponData Parms{};

	Parms.WeaponClass = std::move(WeaponClass);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (CanCustomize != nullptr)
		*CanCustomize = Parms.CanCustomize;
}


// Function BpPlanningMenuLibrary.BpPlanningMenuLibrary_C.ConstructEquipmentOverviewAmmoString
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// uint8                                   AmmoType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MagazineCount                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FText*                            Text                                                   (Parm, OutParm)

void UBpPlanningMenuLibrary_C::ConstructEquipmentOverviewAmmoString(uint8 AmmoType, int32 MagazineCount, class UObject* __WorldContext, class FText* Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpPlanningMenuLibrary_C", "ConstructEquipmentOverviewAmmoString");

	Params::BpPlanningMenuLibrary_C_ConstructEquipmentOverviewAmmoString Parms{};

	Parms.AmmoType = AmmoType;
	Parms.MagazineCount = MagazineCount;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Text != nullptr)
		*Text = std::move(Parms.Text);
}


// Function BpPlanningMenuLibrary.BpPlanningMenuLibrary_C.CreateOverviewDeployableListText
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>&                          Deployables                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FText*                            Text                                                   (Parm, OutParm)

void UBpPlanningMenuLibrary_C::CreateOverviewDeployableListText(TArray<int32>& Deployables, class UObject* __WorldContext, class FText* Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpPlanningMenuLibrary_C", "CreateOverviewDeployableListText");

	Params::BpPlanningMenuLibrary_C_CreateOverviewDeployableListText Parms{};

	Parms.Deployables = std::move(Deployables);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Deployables = std::move(Parms.Deployables);

	if (Text != nullptr)
		*Text = std::move(Parms.Text);
}


// Function BpPlanningMenuLibrary.BpPlanningMenuLibrary_C.CreateOverviewPersonnelListText
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>&                          PersonnelList                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FText*                            Text                                                   (Parm, OutParm)

void UBpPlanningMenuLibrary_C::CreateOverviewPersonnelListText(TArray<int32>& PersonnelList, class UObject* __WorldContext, class FText* Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpPlanningMenuLibrary_C", "CreateOverviewPersonnelListText");

	Params::BpPlanningMenuLibrary_C_CreateOverviewPersonnelListText Parms{};

	Parms.PersonnelList = std::move(PersonnelList);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	PersonnelList = std::move(Parms.PersonnelList);

	if (Text != nullptr)
		*Text = std::move(Parms.Text);
}


// Function BpPlanningMenuLibrary.BpPlanningMenuLibrary_C.FindIconFromItemClass
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class APlayerController*                Player_Controller                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UClass*                           ItemClass                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UTexture2D**                      Return_Value                                           (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBpPlanningMenuLibrary_C::FindIconFromItemClass(class APlayerController* Player_Controller, class UClass* ItemClass, class UObject* __WorldContext, class UTexture2D** Return_Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpPlanningMenuLibrary_C", "FindIconFromItemClass");

	Params::BpPlanningMenuLibrary_C_FindIconFromItemClass Parms{};

	Parms.Player_Controller = Player_Controller;
	Parms.ItemClass = ItemClass;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_Value != nullptr)
		*Return_Value = Parms.Return_Value;
}


// Function BpPlanningMenuLibrary.BpPlanningMenuLibrary_C.FormatSpawnPoint
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const class FText&                      SpawnPointFormat                                       (BlueprintVisible, BlueprintReadOnly, Parm)
// const struct FSpawnPoints&              Spawn                                                  (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    DoubleCost                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FText*                            Text                                                   (Parm, OutParm)

void UBpPlanningMenuLibrary_C::FormatSpawnPoint(const class FText& SpawnPointFormat, const struct FSpawnPoints& Spawn, bool DoubleCost, class UObject* __WorldContext, class FText* Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpPlanningMenuLibrary_C", "FormatSpawnPoint");

	Params::BpPlanningMenuLibrary_C_FormatSpawnPoint Parms{};

	Parms.SpawnPointFormat = std::move(SpawnPointFormat);
	Parms.Spawn = std::move(Spawn);
	Parms.DoubleCost = DoubleCost;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Text != nullptr)
		*Text = std::move(Parms.Text);
}


// Function BpPlanningMenuLibrary.BpPlanningMenuLibrary_C.GetActiveDeployablesText
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FText*                            Text                                                   (Parm, OutParm)

void UBpPlanningMenuLibrary_C::GetActiveDeployablesText(class UObject* __WorldContext, class FText* Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpPlanningMenuLibrary_C", "GetActiveDeployablesText");

	Params::BpPlanningMenuLibrary_C_GetActiveDeployablesText Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Text != nullptr)
		*Text = std::move(Parms.Text);
}


// Function BpPlanningMenuLibrary.BpPlanningMenuLibrary_C.GetActivePersonnelText
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FText*                            Text                                                   (Parm, OutParm)

void UBpPlanningMenuLibrary_C::GetActivePersonnelText(class UObject* __WorldContext, class FText* Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpPlanningMenuLibrary_C", "GetActivePersonnelText");

	Params::BpPlanningMenuLibrary_C_GetActivePersonnelText Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Text != nullptr)
		*Text = std::move(Parms.Text);
}


// Function BpPlanningMenuLibrary.BpPlanningMenuLibrary_C.GetAmmoDescriptionForWeaponAndAmmo
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UClass*                           Weapon                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// uint8                                   AmmoType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FText*                            Text                                                   (Parm, OutParm)

void UBpPlanningMenuLibrary_C::GetAmmoDescriptionForWeaponAndAmmo(class UClass* Weapon, uint8 AmmoType, class UObject* __WorldContext, class FText* Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpPlanningMenuLibrary_C", "GetAmmoDescriptionForWeaponAndAmmo");

	Params::BpPlanningMenuLibrary_C_GetAmmoDescriptionForWeaponAndAmmo Parms{};

	Parms.Weapon = Weapon;
	Parms.AmmoType = AmmoType;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Text != nullptr)
		*Text = std::move(Parms.Text);
}


// Function BpPlanningMenuLibrary.BpPlanningMenuLibrary_C.GetAmmoTypeNameForWeaponAndAmmo
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UClass*                           WeaponClass                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// uint8                                   AmmoType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FText*                            Text                                                   (Parm, OutParm)

void UBpPlanningMenuLibrary_C::GetAmmoTypeNameForWeaponAndAmmo(class UClass* WeaponClass, uint8 AmmoType, class UObject* __WorldContext, class FText* Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpPlanningMenuLibrary_C", "GetAmmoTypeNameForWeaponAndAmmo");

	Params::BpPlanningMenuLibrary_C_GetAmmoTypeNameForWeaponAndAmmo Parms{};

	Parms.WeaponClass = WeaponClass;
	Parms.AmmoType = AmmoType;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Text != nullptr)
		*Text = std::move(Parms.Text);
}


// Function BpPlanningMenuLibrary.BpPlanningMenuLibrary_C.GetArmorCoverageText
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EArmourCoverage                         Coverage                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   Level                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FText*                            Text                                                   (Parm, OutParm)

void UBpPlanningMenuLibrary_C::GetArmorCoverageText(EArmourCoverage Coverage, uint8 Level, class UObject* __WorldContext, class FText* Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpPlanningMenuLibrary_C", "GetArmorCoverageText");

	Params::BpPlanningMenuLibrary_C_GetArmorCoverageText Parms{};

	Parms.Coverage = Coverage;
	Parms.Level = Level;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Text != nullptr)
		*Text = std::move(Parms.Text);
}


// Function BpPlanningMenuLibrary.BpPlanningMenuLibrary_C.GetAttachmentTextData
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UClass*                           Attachment                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// ESlateVisibility*                       Visibility                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText*                            Text                                                   (Parm, OutParm)

void UBpPlanningMenuLibrary_C::GetAttachmentTextData(class UClass* Attachment, class UObject* __WorldContext, ESlateVisibility* Visibility, class FText* Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpPlanningMenuLibrary_C", "GetAttachmentTextData");

	Params::BpPlanningMenuLibrary_C_GetAttachmentTextData Parms{};

	Parms.Attachment = Attachment;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Visibility != nullptr)
		*Visibility = Parms.Visibility;

	if (Text != nullptr)
		*Text = std::move(Parms.Text);
}


// Function BpPlanningMenuLibrary.BpPlanningMenuLibrary_C.GetCaliberFromBlueprint
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TSoftClassPtr<class UClass>             WeaponBlueprint                                        (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FText*                            CaliberText                                            (Parm, OutParm)

void UBpPlanningMenuLibrary_C::GetCaliberFromBlueprint(TSoftClassPtr<class UClass> WeaponBlueprint, class UObject* __WorldContext, class FText* CaliberText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpPlanningMenuLibrary_C", "GetCaliberFromBlueprint");

	Params::BpPlanningMenuLibrary_C_GetCaliberFromBlueprint Parms{};

	Parms.WeaponBlueprint = WeaponBlueprint;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (CaliberText != nullptr)
		*CaliberText = std::move(Parms.CaliberText);
}


// Function BpPlanningMenuLibrary.BpPlanningMenuLibrary_C.GetCharacterDataFromHandle
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             Handle                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FCharacterData*                  Data                                                   (Parm, OutParm)

void UBpPlanningMenuLibrary_C::GetCharacterDataFromHandle(class FName Handle, class UObject* __WorldContext, struct FCharacterData* Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpPlanningMenuLibrary_C", "GetCharacterDataFromHandle");

	Params::BpPlanningMenuLibrary_C_GetCharacterDataFromHandle Parms{};

	Parms.Handle = Handle;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Data != nullptr)
		*Data = std::move(Parms.Data);
}


// Function BpPlanningMenuLibrary.BpPlanningMenuLibrary_C.GetFirstWeaponType
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<EWeaponType>&                    WeaponTypes                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// EWeaponType*                            WeaponType                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBpPlanningMenuLibrary_C::GetFirstWeaponType(TArray<EWeaponType>& WeaponTypes, class UObject* __WorldContext, EWeaponType* WeaponType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpPlanningMenuLibrary_C", "GetFirstWeaponType");

	Params::BpPlanningMenuLibrary_C_GetFirstWeaponType Parms{};

	Parms.WeaponTypes = std::move(WeaponTypes);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	WeaponTypes = std::move(Parms.WeaponTypes);

	if (WeaponType != nullptr)
		*WeaponType = Parms.WeaponType;
}


// Function BpPlanningMenuLibrary.BpPlanningMenuLibrary_C.GetNonDefaultLoadouts
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<class FString>*                  Loadouts                                               (Parm, OutParm)

void UBpPlanningMenuLibrary_C::GetNonDefaultLoadouts(class UObject* __WorldContext, TArray<class FString>* Loadouts)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpPlanningMenuLibrary_C", "GetNonDefaultLoadouts");

	Params::BpPlanningMenuLibrary_C_GetNonDefaultLoadouts Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Loadouts != nullptr)
		*Loadouts = std::move(Parms.Loadouts);
}


// Function BpPlanningMenuLibrary.BpPlanningMenuLibrary_C.GetSpawnForEntryNum
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// uint8                                   Spawn_Num                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FSpawnPoints*                    Out_Spawn                                              (Parm, OutParm)

void UBpPlanningMenuLibrary_C::GetSpawnForEntryNum(uint8 Spawn_Num, class UObject* __WorldContext, struct FSpawnPoints* Out_Spawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpPlanningMenuLibrary_C", "GetSpawnForEntryNum");

	Params::BpPlanningMenuLibrary_C_GetSpawnForEntryNum Parms{};

	Parms.Spawn_Num = Spawn_Num;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Out_Spawn != nullptr)
		*Out_Spawn = std::move(Parms.Out_Spawn);
}


// Function BpPlanningMenuLibrary.BpPlanningMenuLibrary_C.GetWeaponTypeLocalizedName
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EWeaponType                             WeaponType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FText*                            LocalizedName                                          (Parm, OutParm)

void UBpPlanningMenuLibrary_C::GetWeaponTypeLocalizedName(EWeaponType WeaponType, class UObject* __WorldContext, class FText* LocalizedName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpPlanningMenuLibrary_C", "GetWeaponTypeLocalizedName");

	Params::BpPlanningMenuLibrary_C_GetWeaponTypeLocalizedName Parms{};

	Parms.WeaponType = WeaponType;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (LocalizedName != nullptr)
		*LocalizedName = std::move(Parms.LocalizedName);
}


// Function BpPlanningMenuLibrary.BpPlanningMenuLibrary_C.IsFactorySkin
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UClass*                           SkinClass                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   Return_Value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBpPlanningMenuLibrary_C::IsFactorySkin(class UClass* SkinClass, class UObject* __WorldContext, bool* Return_Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpPlanningMenuLibrary_C", "IsFactorySkin");

	Params::BpPlanningMenuLibrary_C_IsFactorySkin Parms{};

	Parms.SkinClass = SkinClass;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Return_Value != nullptr)
		*Return_Value = Parms.Return_Value;
}


// Function BpPlanningMenuLibrary.BpPlanningMenuLibrary_C.ItemWeightToText
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Weight                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Fractional                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FText*                            Text                                                   (Parm, OutParm)

void UBpPlanningMenuLibrary_C::ItemWeightToText(double Weight, bool Fractional, class UObject* __WorldContext, class FText* Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpPlanningMenuLibrary_C", "ItemWeightToText");

	Params::BpPlanningMenuLibrary_C_ItemWeightToText Parms{};

	Parms.Weight = Weight;
	Parms.Fractional = Fractional;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Text != nullptr)
		*Text = std::move(Parms.Text);
}


// Function BpPlanningMenuLibrary.BpPlanningMenuLibrary_C.MuzzleVelocityToText
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  MuzzleVelocity                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FText*                            Text                                                   (Parm, OutParm)

void UBpPlanningMenuLibrary_C::MuzzleVelocityToText(double MuzzleVelocity, class UObject* __WorldContext, class FText* Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpPlanningMenuLibrary_C", "MuzzleVelocityToText");

	Params::BpPlanningMenuLibrary_C_MuzzleVelocityToText Parms{};

	Parms.MuzzleVelocity = MuzzleVelocity;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Text != nullptr)
		*Text = std::move(Parms.Text);
}


// Function BpPlanningMenuLibrary.BpPlanningMenuLibrary_C.PlayerStatusToText
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EPlayerStatus                           Status                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APlayerCharacter*                 PlayerState                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FText*                            StatusText                                             (Parm, OutParm)

void UBpPlanningMenuLibrary_C::PlayerStatusToText(EPlayerStatus Status, class APlayerCharacter* PlayerState, class UObject* __WorldContext, class FText* StatusText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BpPlanningMenuLibrary_C", "PlayerStatusToText");

	Params::BpPlanningMenuLibrary_C_PlayerStatusToText Parms{};

	Parms.Status = Status;
	Parms.PlayerState = PlayerState;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (StatusText != nullptr)
		*StatusText = std::move(Parms.StatusText);
}

}

