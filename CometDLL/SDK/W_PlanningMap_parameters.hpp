#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_PlanningMap

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"
#include "ReadyOrNot_structs.hpp"
#include "InputCore_structs.hpp"


namespace SDK::Params
{

// Function W_PlanningMap.W_PlanningMap_C.ChangeFloor
// 0x0008 (0x0008 - 0x0000)
struct W_PlanningMap_C_ChangeFloor final
{
public:
	class UW_Button_C*                            Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PlanningMap_C_ChangeFloor) == 0x000008, "Wrong alignment on W_PlanningMap_C_ChangeFloor");
static_assert(sizeof(W_PlanningMap_C_ChangeFloor) == 0x000008, "Wrong size on W_PlanningMap_C_ChangeFloor");
static_assert(offsetof(W_PlanningMap_C_ChangeFloor, Button) == 0x000000, "Member 'W_PlanningMap_C_ChangeFloor::Button' has a wrong offset!");

// Function W_PlanningMap.W_PlanningMap_C.ExecuteUbergraph_W_PlanningMap
// 0x0B90 (0x0B90 - 0x0000)
struct W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLevelDataLookupTable                  CallFunc_GetLevelData_ReturnValue;                 // 0x0008(0x0818)()
	int32                                         K2Node_CustomEvent_FloorIndex;                     // 0x0820(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0824(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0828(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x082C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPointerEvent                          K2Node_Event_PointerEvent;                         // 0x0830(0x0078)(ConstParm)
	class UDragDropOperation*                     K2Node_Event_Operation;                            // 0x08A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class UBP_UI_PlanningMap_SpawnPoint_C*> K2Node_CustomEvent_SpawnPointComponents;          // 0x08B0(0x0010)(ConstParm, ReferenceParm, ContainsInstancedReference)
	class ABP_UI_PlanningMap_C*                   K2Node_CustomEvent_PlanningMapActor;               // 0x08C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UW_Button_C* Button)>    K2Node_CreateDelegate_OutputDelegate;              // 0x08C8(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UW_Button_C*                            K2Node_CustomEvent_Button;                         // 0x08D8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x08E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x08E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UW_Button_C*                            CallFunc_Array_Get_Item;                           // 0x08E8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_Floor;                          // 0x08F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(int32 Floor)>                  K2Node_CreateDelegate_OutputDelegate_1;            // 0x08F4(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(double ZoomValue)>             K2Node_CreateDelegate_OutputDelegate_2;            // 0x0904(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_914[0x4];                                      // 0x0914(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UW_PlanningMap_BreachPoint_C*>   CallFunc_Map_Values_Values;                        // 0x0918(0x0010)(ReferenceParm, ContainsInstancedReference)
	struct FLevelFloorData                        CallFunc_Array_Get_Item_1;                         // 0x0928(0x0080)()
	class UW_PlanningMap_BreachPoint_C*           CallFunc_Array_Get_Item_2;                         // 0x09A8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x09B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x09B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x09B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x09BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x09BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9BE[0x2];                                      // 0x09BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x09C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C4[0x4];                                      // 0x09C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_PlanningMap_BreachPoint_C*           K2Node_CustomEvent_HoveredPoint;                   // 0x09C8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UW_PlanningMap_BreachPoint_C*           K2Node_CustomEvent_ClickedPoint;                   // 0x09D0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FSpawnPoints                           CallFunc_GetSpawnPointInfo_SpawnPointInfo;         // 0x09D8(0x00A0)()
	int32                                         CallFunc_GetSpawnPointInfo_Index;                  // 0x0A78(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A7C[0x4];                                      // 0x0A7C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0A80(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_1;           // 0x0A88(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetPosition_ReturnValue;                  // 0x0A90(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetDetailPanePosition_ReturnValue;        // 0x0AA0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0AB0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0AB1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AB2[0x6];                                      // 0x0AB2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_2;           // 0x0AB8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_3;           // 0x0AC0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FSpawnPoints                           CallFunc_GetSpawnPointInfo_SpawnPointInfo_1;       // 0x0AC8(0x00A0)()
	int32                                         CallFunc_GetSpawnPointInfo_Index_1;                // 0x0B68(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B6C[0x4];                                      // 0x0B6C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_Button_C*                            CallFunc_Array_Get_Item_3;                         // 0x0B70(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UW_Button_C*                            CallFunc_Create_ReturnValue;                       // 0x0B78(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UVerticalBoxSlot*                       CallFunc_AddChildToVerticalBox_ReturnValue;        // 0x0B80(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0B88(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0B8C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0B8D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap) == 0x000008, "Wrong alignment on W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap");
static_assert(sizeof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap) == 0x000B90, "Wrong size on W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, EntryPoint) == 0x000000, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_GetLevelData_ReturnValue) == 0x000008, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_GetLevelData_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, K2Node_CustomEvent_FloorIndex) == 0x000820, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::K2Node_CustomEvent_FloorIndex' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, Temp_int_Loop_Counter_Variable) == 0x000824, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_Add_IntInt_ReturnValue) == 0x000828, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, Temp_int_Array_Index_Variable) == 0x00082C, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, K2Node_Event_PointerEvent) == 0x000830, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::K2Node_Event_PointerEvent' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, K2Node_Event_Operation) == 0x0008A8, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::K2Node_Event_Operation' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, K2Node_CustomEvent_SpawnPointComponents) == 0x0008B0, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::K2Node_CustomEvent_SpawnPointComponents' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, K2Node_CustomEvent_PlanningMapActor) == 0x0008C0, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::K2Node_CustomEvent_PlanningMapActor' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, K2Node_CreateDelegate_OutputDelegate) == 0x0008C8, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, K2Node_CustomEvent_Button) == 0x0008D8, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::K2Node_CustomEvent_Button' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_Array_Find_ReturnValue) == 0x0008E0, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, Temp_int_Array_Index_Variable_1) == 0x0008E4, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_Array_Get_Item) == 0x0008E8, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, K2Node_CustomEvent_Floor) == 0x0008F0, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::K2Node_CustomEvent_Floor' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, K2Node_CreateDelegate_OutputDelegate_1) == 0x0008F4, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, K2Node_CreateDelegate_OutputDelegate_2) == 0x000904, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_Map_Values_Values) == 0x000918, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_Map_Values_Values' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_Array_Get_Item_1) == 0x000928, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_Array_Get_Item_2) == 0x0009A8, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_Array_Length_ReturnValue) == 0x0009B0, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_Array_Length_ReturnValue_1) == 0x0009B4, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, Temp_int_Loop_Counter_Variable_1) == 0x0009B8, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_Less_IntInt_ReturnValue) == 0x0009BC, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_Less_IntInt_ReturnValue_1) == 0x0009BD, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_Add_IntInt_ReturnValue_1) == 0x0009C0, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, K2Node_CustomEvent_HoveredPoint) == 0x0009C8, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::K2Node_CustomEvent_HoveredPoint' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, K2Node_CustomEvent_ClickedPoint) == 0x0009D0, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::K2Node_CustomEvent_ClickedPoint' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_GetSpawnPointInfo_SpawnPointInfo) == 0x0009D8, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_GetSpawnPointInfo_SpawnPointInfo' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_GetSpawnPointInfo_Index) == 0x000A78, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_GetSpawnPointInfo_Index' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000A80, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_SlotAsCanvasSlot_ReturnValue_1) == 0x000A88, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_SlotAsCanvasSlot_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_GetPosition_ReturnValue) == 0x000A90, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_GetPosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_GetDetailPanePosition_ReturnValue) == 0x000AA0, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_GetDetailPanePosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000AB0, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_IsValid_ReturnValue) == 0x000AB1, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_SlotAsCanvasSlot_ReturnValue_2) == 0x000AB8, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_SlotAsCanvasSlot_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_SlotAsCanvasSlot_ReturnValue_3) == 0x000AC0, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_SlotAsCanvasSlot_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_GetSpawnPointInfo_SpawnPointInfo_1) == 0x000AC8, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_GetSpawnPointInfo_SpawnPointInfo_1' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_GetSpawnPointInfo_Index_1) == 0x000B68, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_GetSpawnPointInfo_Index_1' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_Array_Get_Item_3) == 0x000B70, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_Create_ReturnValue) == 0x000B78, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_AddChildToVerticalBox_ReturnValue) == 0x000B80, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_AddChildToVerticalBox_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_Array_Add_ReturnValue) == 0x000B88, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000B8C, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap, CallFunc_Not_PreBool_ReturnValue) == 0x000B8D, "Member 'W_PlanningMap_C_ExecuteUbergraph_W_PlanningMap::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function W_PlanningMap.W_PlanningMap_C.GetDetailPanePosition
// 0x00B8 (0x00B8 - 0x0000)
struct W_PlanningMap_C_GetDetailPanePosition final
{
public:
	struct FVector2D                              PointScreenPosition;                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetViewportSize_ReturnValue;              // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Add_Vector2DVector2D_ReturnValue;         // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_2;       // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue_1;                // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue_2;                // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x00A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PlanningMap_C_GetDetailPanePosition) == 0x000008, "Wrong alignment on W_PlanningMap_C_GetDetailPanePosition");
static_assert(sizeof(W_PlanningMap_C_GetDetailPanePosition) == 0x0000B8, "Wrong size on W_PlanningMap_C_GetDetailPanePosition");
static_assert(offsetof(W_PlanningMap_C_GetDetailPanePosition, PointScreenPosition) == 0x000000, "Member 'W_PlanningMap_C_GetDetailPanePosition::PointScreenPosition' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_GetDetailPanePosition, ReturnValue) == 0x000010, "Member 'W_PlanningMap_C_GetDetailPanePosition::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_GetDetailPanePosition, CallFunc_GetViewportSize_ReturnValue) == 0x000020, "Member 'W_PlanningMap_C_GetDetailPanePosition::CallFunc_GetViewportSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_GetDetailPanePosition, CallFunc_BreakVector2D_X) == 0x000030, "Member 'W_PlanningMap_C_GetDetailPanePosition::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_GetDetailPanePosition, CallFunc_BreakVector2D_Y) == 0x000038, "Member 'W_PlanningMap_C_GetDetailPanePosition::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_GetDetailPanePosition, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000040, "Member 'W_PlanningMap_C_GetDetailPanePosition::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_GetDetailPanePosition, CallFunc_Add_Vector2DVector2D_ReturnValue) == 0x000048, "Member 'W_PlanningMap_C_GetDetailPanePosition::CallFunc_Add_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_GetDetailPanePosition, CallFunc_BreakVector2D_X_1) == 0x000058, "Member 'W_PlanningMap_C_GetDetailPanePosition::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_GetDetailPanePosition, CallFunc_BreakVector2D_Y_1) == 0x000060, "Member 'W_PlanningMap_C_GetDetailPanePosition::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_GetDetailPanePosition, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000068, "Member 'W_PlanningMap_C_GetDetailPanePosition::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_GetDetailPanePosition, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x000069, "Member 'W_PlanningMap_C_GetDetailPanePosition::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_GetDetailPanePosition, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000070, "Member 'W_PlanningMap_C_GetDetailPanePosition::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_GetDetailPanePosition, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x000078, "Member 'W_PlanningMap_C_GetDetailPanePosition::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_GetDetailPanePosition, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000080, "Member 'W_PlanningMap_C_GetDetailPanePosition::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_GetDetailPanePosition, CallFunc_Greater_DoubleDouble_ReturnValue_2) == 0x000088, "Member 'W_PlanningMap_C_GetDetailPanePosition::CallFunc_Greater_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_GetDetailPanePosition, CallFunc_SelectFloat_ReturnValue) == 0x000090, "Member 'W_PlanningMap_C_GetDetailPanePosition::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_GetDetailPanePosition, CallFunc_SelectFloat_ReturnValue_1) == 0x000098, "Member 'W_PlanningMap_C_GetDetailPanePosition::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_GetDetailPanePosition, CallFunc_SelectFloat_ReturnValue_2) == 0x0000A0, "Member 'W_PlanningMap_C_GetDetailPanePosition::CallFunc_SelectFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_GetDetailPanePosition, CallFunc_MakeVector2D_ReturnValue) == 0x0000A8, "Member 'W_PlanningMap_C_GetDetailPanePosition::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");

// Function W_PlanningMap.W_PlanningMap_C.GetSpawnPointInfo
// 0x00E0 (0x00E0 - 0x0000)
struct W_PlanningMap_C_GetSpawnPointInfo final
{
public:
	const class UW_PlanningMap_BreachPoint_C*     BreachPointButton;                                 // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	struct FSpawnPoints                           SpawnPointInfo;                                    // 0x0008(0x00A0)(Parm, OutParm)
	int32                                         Index_0;                                           // 0x00A8(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UW_PlanningMap_BreachPoint_C*>   CallFunc_Map_Values_Values;                        // 0x00B0(0x0010)(ReferenceParm, ContainsInstancedReference)
	TArray<class UBP_UI_PlanningMap_SpawnPoint_C*> CallFunc_Map_Keys_Keys;                           // 0x00C0(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_UI_PlanningMap_SpawnPoint_C*        CallFunc_Array_Get_Item;                           // 0x00D8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PlanningMap_C_GetSpawnPointInfo) == 0x000008, "Wrong alignment on W_PlanningMap_C_GetSpawnPointInfo");
static_assert(sizeof(W_PlanningMap_C_GetSpawnPointInfo) == 0x0000E0, "Wrong size on W_PlanningMap_C_GetSpawnPointInfo");
static_assert(offsetof(W_PlanningMap_C_GetSpawnPointInfo, BreachPointButton) == 0x000000, "Member 'W_PlanningMap_C_GetSpawnPointInfo::BreachPointButton' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_GetSpawnPointInfo, SpawnPointInfo) == 0x000008, "Member 'W_PlanningMap_C_GetSpawnPointInfo::SpawnPointInfo' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_GetSpawnPointInfo, Index_0) == 0x0000A8, "Member 'W_PlanningMap_C_GetSpawnPointInfo::Index_0' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_GetSpawnPointInfo, CallFunc_Map_Values_Values) == 0x0000B0, "Member 'W_PlanningMap_C_GetSpawnPointInfo::CallFunc_Map_Values_Values' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_GetSpawnPointInfo, CallFunc_Map_Keys_Keys) == 0x0000C0, "Member 'W_PlanningMap_C_GetSpawnPointInfo::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_GetSpawnPointInfo, CallFunc_Array_Find_ReturnValue) == 0x0000D0, "Member 'W_PlanningMap_C_GetSpawnPointInfo::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_GetSpawnPointInfo, CallFunc_Array_Get_Item) == 0x0000D8, "Member 'W_PlanningMap_C_GetSpawnPointInfo::CallFunc_Array_Get_Item' has a wrong offset!");

// Function W_PlanningMap.W_PlanningMap_C.InitPlanningMap
// 0x0008 (0x0008 - 0x0000)
struct W_PlanningMap_C_InitPlanningMap final
{
public:
	class ABP_UI_PlanningMap_C*                   PlanningMapActor_0;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PlanningMap_C_InitPlanningMap) == 0x000008, "Wrong alignment on W_PlanningMap_C_InitPlanningMap");
static_assert(sizeof(W_PlanningMap_C_InitPlanningMap) == 0x000008, "Wrong size on W_PlanningMap_C_InitPlanningMap");
static_assert(offsetof(W_PlanningMap_C_InitPlanningMap, PlanningMapActor_0) == 0x000000, "Member 'W_PlanningMap_C_InitPlanningMap::PlanningMapActor_0' has a wrong offset!");

// Function W_PlanningMap.W_PlanningMap_C.MapFloorUpdated
// 0x0004 (0x0004 - 0x0000)
struct W_PlanningMap_C_MapFloorUpdated final
{
public:
	int32                                         Floor;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PlanningMap_C_MapFloorUpdated) == 0x000004, "Wrong alignment on W_PlanningMap_C_MapFloorUpdated");
static_assert(sizeof(W_PlanningMap_C_MapFloorUpdated) == 0x000004, "Wrong size on W_PlanningMap_C_MapFloorUpdated");
static_assert(offsetof(W_PlanningMap_C_MapFloorUpdated, Floor) == 0x000000, "Member 'W_PlanningMap_C_MapFloorUpdated::Floor' has a wrong offset!");

// Function W_PlanningMap.W_PlanningMap_C.OnDragCancelled
// 0x0080 (0x0080 - 0x0000)
struct W_PlanningMap_C_OnDragCancelled final
{
public:
	struct FPointerEvent                          PointerEvent;                                      // 0x0000(0x0078)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UDragDropOperation*                     Operation;                                         // 0x0078(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PlanningMap_C_OnDragCancelled) == 0x000008, "Wrong alignment on W_PlanningMap_C_OnDragCancelled");
static_assert(sizeof(W_PlanningMap_C_OnDragCancelled) == 0x000080, "Wrong size on W_PlanningMap_C_OnDragCancelled");
static_assert(offsetof(W_PlanningMap_C_OnDragCancelled, PointerEvent) == 0x000000, "Member 'W_PlanningMap_C_OnDragCancelled::PointerEvent' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OnDragCancelled, Operation) == 0x000078, "Member 'W_PlanningMap_C_OnDragCancelled::Operation' has a wrong offset!");

// Function W_PlanningMap.W_PlanningMap_C.OnDragDetected
// 0x00B8 (0x00B8 - 0x0000)
struct W_PlanningMap_C_OnDragDetected final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          PointerEvent;                                      // 0x0038(0x0078)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UDragDropOperation*                     Operation;                                         // 0x00B0(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PlanningMap_C_OnDragDetected) == 0x000008, "Wrong alignment on W_PlanningMap_C_OnDragDetected");
static_assert(sizeof(W_PlanningMap_C_OnDragDetected) == 0x0000B8, "Wrong size on W_PlanningMap_C_OnDragDetected");
static_assert(offsetof(W_PlanningMap_C_OnDragDetected, MyGeometry) == 0x000000, "Member 'W_PlanningMap_C_OnDragDetected::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OnDragDetected, PointerEvent) == 0x000038, "Member 'W_PlanningMap_C_OnDragDetected::PointerEvent' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OnDragDetected, Operation) == 0x0000B0, "Member 'W_PlanningMap_C_OnDragDetected::Operation' has a wrong offset!");

// Function W_PlanningMap.W_PlanningMap_C.OnMouseButtonDown
// 0x0240 (0x0240 - 0x0000)
struct W_PlanningMap_C_OnMouseButtonDown final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0078)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00B0(0x00B8)(Parm, OutParm, ReturnParm)
	struct FKey                                   CallFunc_PointerEvent_GetEffectingButton_ReturnValue; // 0x0168(0x0018)(HasGetValueTypeHash)
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0180(0x00B8)()
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue;            // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PlanningMap_C_OnMouseButtonDown) == 0x000008, "Wrong alignment on W_PlanningMap_C_OnMouseButtonDown");
static_assert(sizeof(W_PlanningMap_C_OnMouseButtonDown) == 0x000240, "Wrong size on W_PlanningMap_C_OnMouseButtonDown");
static_assert(offsetof(W_PlanningMap_C_OnMouseButtonDown, MyGeometry) == 0x000000, "Member 'W_PlanningMap_C_OnMouseButtonDown::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OnMouseButtonDown, MouseEvent) == 0x000038, "Member 'W_PlanningMap_C_OnMouseButtonDown::MouseEvent' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OnMouseButtonDown, ReturnValue) == 0x0000B0, "Member 'W_PlanningMap_C_OnMouseButtonDown::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OnMouseButtonDown, CallFunc_PointerEvent_GetEffectingButton_ReturnValue) == 0x000168, "Member 'W_PlanningMap_C_OnMouseButtonDown::CallFunc_PointerEvent_GetEffectingButton_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OnMouseButtonDown, CallFunc_Handled_ReturnValue) == 0x000180, "Member 'W_PlanningMap_C_OnMouseButtonDown::CallFunc_Handled_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OnMouseButtonDown, CallFunc_EqualEqual_KeyKey_ReturnValue) == 0x000238, "Member 'W_PlanningMap_C_OnMouseButtonDown::CallFunc_EqualEqual_KeyKey_ReturnValue' has a wrong offset!");

// Function W_PlanningMap.W_PlanningMap_C.OnMouseButtonUp
// 0x02F8 (0x02F8 - 0x0000)
struct W_PlanningMap_C_OnMouseButtonUp final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0078)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00B0(0x00B8)(Parm, OutParm, ReturnParm)
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0168(0x00B8)()
	struct FKey                                   CallFunc_PointerEvent_GetEffectingButton_ReturnValue; // 0x0220(0x0018)(HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue;            // 0x0238(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_KeyKey_ReturnValue_1;          // 0x0239(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23A[0x6];                                      // 0x023A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            CallFunc_Handled_ReturnValue_1;                    // 0x0240(0x00B8)()
};
static_assert(alignof(W_PlanningMap_C_OnMouseButtonUp) == 0x000008, "Wrong alignment on W_PlanningMap_C_OnMouseButtonUp");
static_assert(sizeof(W_PlanningMap_C_OnMouseButtonUp) == 0x0002F8, "Wrong size on W_PlanningMap_C_OnMouseButtonUp");
static_assert(offsetof(W_PlanningMap_C_OnMouseButtonUp, MyGeometry) == 0x000000, "Member 'W_PlanningMap_C_OnMouseButtonUp::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OnMouseButtonUp, MouseEvent) == 0x000038, "Member 'W_PlanningMap_C_OnMouseButtonUp::MouseEvent' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OnMouseButtonUp, ReturnValue) == 0x0000B0, "Member 'W_PlanningMap_C_OnMouseButtonUp::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OnMouseButtonUp, CallFunc_Handled_ReturnValue) == 0x000168, "Member 'W_PlanningMap_C_OnMouseButtonUp::CallFunc_Handled_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OnMouseButtonUp, CallFunc_PointerEvent_GetEffectingButton_ReturnValue) == 0x000220, "Member 'W_PlanningMap_C_OnMouseButtonUp::CallFunc_PointerEvent_GetEffectingButton_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OnMouseButtonUp, CallFunc_EqualEqual_KeyKey_ReturnValue) == 0x000238, "Member 'W_PlanningMap_C_OnMouseButtonUp::CallFunc_EqualEqual_KeyKey_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OnMouseButtonUp, CallFunc_EqualEqual_KeyKey_ReturnValue_1) == 0x000239, "Member 'W_PlanningMap_C_OnMouseButtonUp::CallFunc_EqualEqual_KeyKey_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OnMouseButtonUp, CallFunc_Handled_ReturnValue_1) == 0x000240, "Member 'W_PlanningMap_C_OnMouseButtonUp::CallFunc_Handled_ReturnValue_1' has a wrong offset!");

// Function W_PlanningMap.W_PlanningMap_C.OnMouseMove
// 0x03B0 (0x03B0 - 0x0000)
struct W_PlanningMap_C_OnMouseMove final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FPointerEvent                          MouseEvent;                                        // 0x0038(0x0078)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	struct FEventReply                            ReturnValue;                                       // 0x00B0(0x00B8)(Parm, OutParm, ReturnParm)
	struct FVector2D                              CallFunc_PointerEvent_GetCursorDelta_ReturnValue;  // 0x0168(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_Vector2DVector2D_ReturnValue;  // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_179[0x7];                                      // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            CallFunc_Handled_ReturnValue;                      // 0x0180(0x00B8)()
	struct FEventReply                            CallFunc_Handled_ReturnValue_1;                    // 0x0238(0x00B8)()
	bool                                          CallFunc_EqualEqual_Vector2DVector2D_ReturnValue_1; // 0x02F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F1[0x7];                                      // 0x02F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEventReply                            CallFunc_Handled_ReturnValue_2;                    // 0x02F8(0x00B8)()
};
static_assert(alignof(W_PlanningMap_C_OnMouseMove) == 0x000008, "Wrong alignment on W_PlanningMap_C_OnMouseMove");
static_assert(sizeof(W_PlanningMap_C_OnMouseMove) == 0x0003B0, "Wrong size on W_PlanningMap_C_OnMouseMove");
static_assert(offsetof(W_PlanningMap_C_OnMouseMove, MyGeometry) == 0x000000, "Member 'W_PlanningMap_C_OnMouseMove::MyGeometry' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OnMouseMove, MouseEvent) == 0x000038, "Member 'W_PlanningMap_C_OnMouseMove::MouseEvent' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OnMouseMove, ReturnValue) == 0x0000B0, "Member 'W_PlanningMap_C_OnMouseMove::ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OnMouseMove, CallFunc_PointerEvent_GetCursorDelta_ReturnValue) == 0x000168, "Member 'W_PlanningMap_C_OnMouseMove::CallFunc_PointerEvent_GetCursorDelta_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OnMouseMove, CallFunc_EqualEqual_Vector2DVector2D_ReturnValue) == 0x000178, "Member 'W_PlanningMap_C_OnMouseMove::CallFunc_EqualEqual_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OnMouseMove, CallFunc_Handled_ReturnValue) == 0x000180, "Member 'W_PlanningMap_C_OnMouseMove::CallFunc_Handled_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OnMouseMove, CallFunc_Handled_ReturnValue_1) == 0x000238, "Member 'W_PlanningMap_C_OnMouseMove::CallFunc_Handled_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OnMouseMove, CallFunc_EqualEqual_Vector2DVector2D_ReturnValue_1) == 0x0002F0, "Member 'W_PlanningMap_C_OnMouseMove::CallFunc_EqualEqual_Vector2DVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OnMouseMove, CallFunc_Handled_ReturnValue_2) == 0x0002F8, "Member 'W_PlanningMap_C_OnMouseMove::CallFunc_Handled_ReturnValue_2' has a wrong offset!");

// Function W_PlanningMap.W_PlanningMap_C.OpenPlanningMarker
// 0x0180 (0x0180 - 0x0000)
struct W_PlanningMap_C_OpenPlanningMarker final
{
public:
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0000(0x0010)(ConstParm, ReferenceParm)
	struct FVector2D                              CallFunc_GetMousePositionOnViewport_ReturnValue;   // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_DeprojectScreenToWorld_WorldPosition;     // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_DeprojectScreenToWorld_WorldDirection;    // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DeprojectScreenToWorld_ReturnValue;       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x0090(0x00E8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PlanningMap_C_OpenPlanningMarker) == 0x000008, "Wrong alignment on W_PlanningMap_C_OpenPlanningMarker");
static_assert(sizeof(W_PlanningMap_C_OpenPlanningMarker) == 0x000180, "Wrong size on W_PlanningMap_C_OpenPlanningMarker");
static_assert(offsetof(W_PlanningMap_C_OpenPlanningMarker, Temp_object_Variable) == 0x000000, "Member 'W_PlanningMap_C_OpenPlanningMarker::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OpenPlanningMarker, CallFunc_GetMousePositionOnViewport_ReturnValue) == 0x000010, "Member 'W_PlanningMap_C_OpenPlanningMarker::CallFunc_GetMousePositionOnViewport_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OpenPlanningMarker, CallFunc_GetPlayerController_ReturnValue) == 0x000020, "Member 'W_PlanningMap_C_OpenPlanningMarker::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OpenPlanningMarker, CallFunc_DeprojectScreenToWorld_WorldPosition) == 0x000028, "Member 'W_PlanningMap_C_OpenPlanningMarker::CallFunc_DeprojectScreenToWorld_WorldPosition' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OpenPlanningMarker, CallFunc_DeprojectScreenToWorld_WorldDirection) == 0x000040, "Member 'W_PlanningMap_C_OpenPlanningMarker::CallFunc_DeprojectScreenToWorld_WorldDirection' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OpenPlanningMarker, CallFunc_DeprojectScreenToWorld_ReturnValue) == 0x000058, "Member 'W_PlanningMap_C_OpenPlanningMarker::CallFunc_DeprojectScreenToWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OpenPlanningMarker, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000060, "Member 'W_PlanningMap_C_OpenPlanningMarker::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OpenPlanningMarker, CallFunc_Add_VectorVector_ReturnValue) == 0x000078, "Member 'W_PlanningMap_C_OpenPlanningMarker::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OpenPlanningMarker, CallFunc_LineTraceSingle_OutHit) == 0x000090, "Member 'W_PlanningMap_C_OpenPlanningMarker::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_OpenPlanningMarker, CallFunc_LineTraceSingle_ReturnValue) == 0x000178, "Member 'W_PlanningMap_C_OpenPlanningMarker::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");

// Function W_PlanningMap.W_PlanningMap_C.PointClicked
// 0x0008 (0x0008 - 0x0000)
struct W_PlanningMap_C_PointClicked final
{
public:
	class UW_PlanningMap_BreachPoint_C*           ClickedPoint;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PlanningMap_C_PointClicked) == 0x000008, "Wrong alignment on W_PlanningMap_C_PointClicked");
static_assert(sizeof(W_PlanningMap_C_PointClicked) == 0x000008, "Wrong size on W_PlanningMap_C_PointClicked");
static_assert(offsetof(W_PlanningMap_C_PointClicked, ClickedPoint) == 0x000000, "Member 'W_PlanningMap_C_PointClicked::ClickedPoint' has a wrong offset!");

// Function W_PlanningMap.W_PlanningMap_C.PointHovered
// 0x0008 (0x0008 - 0x0000)
struct W_PlanningMap_C_PointHovered final
{
public:
	class UW_PlanningMap_BreachPoint_C*           HoveredPoint;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PlanningMap_C_PointHovered) == 0x000008, "Wrong alignment on W_PlanningMap_C_PointHovered");
static_assert(sizeof(W_PlanningMap_C_PointHovered) == 0x000008, "Wrong size on W_PlanningMap_C_PointHovered");
static_assert(offsetof(W_PlanningMap_C_PointHovered, HoveredPoint) == 0x000000, "Member 'W_PlanningMap_C_PointHovered::HoveredPoint' has a wrong offset!");

// Function W_PlanningMap.W_PlanningMap_C.RefreshSpawns
// 0x00B8 (0x00B8 - 0x0000)
struct W_PlanningMap_C_RefreshSpawns final
{
public:
	double                                        ZoomValue;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              ScreenPosition;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UW_PlanningMap_BreachPoint_C* ClickedPoint)> K2Node_CreateDelegate_OutputDelegate; // 0x0018(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UW_PlanningMap_BreachPoint_C* HoveredPoint)> K2Node_CreateDelegate_OutputDelegate_1; // 0x0028(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_PlanningMap_BreachPoint_C*           CallFunc_Create_ReturnValue;                       // 0x0048(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_AddChildToCanvas_ReturnValue;             // 0x0060(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_UI_PlanningMap_SpawnPoint_C*        CallFunc_Array_Get_Item;                           // 0x0068(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UW_PlanningMap_BreachPoint_C*           CallFunc_Map_Find_Value;                           // 0x0070(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0080(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_ProjectWorldLocationToWidgetPosition_ScreenPosition; // 0x00A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ProjectWorldLocationToWidgetPosition_ReturnValue; // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PlanningMap_C_RefreshSpawns) == 0x000008, "Wrong alignment on W_PlanningMap_C_RefreshSpawns");
static_assert(sizeof(W_PlanningMap_C_RefreshSpawns) == 0x0000B8, "Wrong size on W_PlanningMap_C_RefreshSpawns");
static_assert(offsetof(W_PlanningMap_C_RefreshSpawns, ZoomValue) == 0x000000, "Member 'W_PlanningMap_C_RefreshSpawns::ZoomValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_RefreshSpawns, ScreenPosition) == 0x000008, "Member 'W_PlanningMap_C_RefreshSpawns::ScreenPosition' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_RefreshSpawns, K2Node_CreateDelegate_OutputDelegate) == 0x000018, "Member 'W_PlanningMap_C_RefreshSpawns::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_RefreshSpawns, K2Node_CreateDelegate_OutputDelegate_1) == 0x000028, "Member 'W_PlanningMap_C_RefreshSpawns::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_RefreshSpawns, Temp_int_Loop_Counter_Variable) == 0x000038, "Member 'W_PlanningMap_C_RefreshSpawns::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_RefreshSpawns, CallFunc_Array_Length_ReturnValue) == 0x00003C, "Member 'W_PlanningMap_C_RefreshSpawns::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_RefreshSpawns, CallFunc_Add_IntInt_ReturnValue) == 0x000040, "Member 'W_PlanningMap_C_RefreshSpawns::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_RefreshSpawns, CallFunc_Less_IntInt_ReturnValue) == 0x000044, "Member 'W_PlanningMap_C_RefreshSpawns::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_RefreshSpawns, CallFunc_Create_ReturnValue) == 0x000048, "Member 'W_PlanningMap_C_RefreshSpawns::CallFunc_Create_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_RefreshSpawns, CallFunc_GetPlayerController_ReturnValue) == 0x000050, "Member 'W_PlanningMap_C_RefreshSpawns::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_RefreshSpawns, Temp_int_Array_Index_Variable) == 0x000058, "Member 'W_PlanningMap_C_RefreshSpawns::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_RefreshSpawns, CallFunc_AddChildToCanvas_ReturnValue) == 0x000060, "Member 'W_PlanningMap_C_RefreshSpawns::CallFunc_AddChildToCanvas_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_RefreshSpawns, CallFunc_Array_Get_Item) == 0x000068, "Member 'W_PlanningMap_C_RefreshSpawns::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_RefreshSpawns, CallFunc_Map_Find_Value) == 0x000070, "Member 'W_PlanningMap_C_RefreshSpawns::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_RefreshSpawns, CallFunc_Map_Find_ReturnValue) == 0x000078, "Member 'W_PlanningMap_C_RefreshSpawns::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_RefreshSpawns, CallFunc_Subtract_IntInt_ReturnValue) == 0x00007C, "Member 'W_PlanningMap_C_RefreshSpawns::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_RefreshSpawns, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000080, "Member 'W_PlanningMap_C_RefreshSpawns::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_RefreshSpawns, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000088, "Member 'W_PlanningMap_C_RefreshSpawns::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_RefreshSpawns, CallFunc_ProjectWorldLocationToWidgetPosition_ScreenPosition) == 0x0000A0, "Member 'W_PlanningMap_C_RefreshSpawns::CallFunc_ProjectWorldLocationToWidgetPosition_ScreenPosition' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_RefreshSpawns, CallFunc_ProjectWorldLocationToWidgetPosition_ReturnValue) == 0x0000B0, "Member 'W_PlanningMap_C_RefreshSpawns::CallFunc_ProjectWorldLocationToWidgetPosition_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_RefreshSpawns, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0000B1, "Member 'W_PlanningMap_C_RefreshSpawns::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_PlanningMap_C_RefreshSpawns, CallFunc_BooleanAND_ReturnValue) == 0x0000B2, "Member 'W_PlanningMap_C_RefreshSpawns::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function W_PlanningMap.W_PlanningMap_C.UpdateMap
// 0x0004 (0x0004 - 0x0000)
struct W_PlanningMap_C_UpdateMap final
{
public:
	int32                                         FloorIndex;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_PlanningMap_C_UpdateMap) == 0x000004, "Wrong alignment on W_PlanningMap_C_UpdateMap");
static_assert(sizeof(W_PlanningMap_C_UpdateMap) == 0x000004, "Wrong size on W_PlanningMap_C_UpdateMap");
static_assert(offsetof(W_PlanningMap_C_UpdateMap, FloorIndex) == 0x000000, "Member 'W_PlanningMap_C_UpdateMap::FloorIndex' has a wrong offset!");

// Function W_PlanningMap.W_PlanningMap_C.UpdateSpawns
// 0x0010 (0x0010 - 0x0000)
struct W_PlanningMap_C_UpdateSpawns final
{
public:
	TArray<class UBP_UI_PlanningMap_SpawnPoint_C*> SpawnPointComponents_0;                           // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(W_PlanningMap_C_UpdateSpawns) == 0x000008, "Wrong alignment on W_PlanningMap_C_UpdateSpawns");
static_assert(sizeof(W_PlanningMap_C_UpdateSpawns) == 0x000010, "Wrong size on W_PlanningMap_C_UpdateSpawns");
static_assert(offsetof(W_PlanningMap_C_UpdateSpawns, SpawnPointComponents_0) == 0x000000, "Member 'W_PlanningMap_C_UpdateSpawns::SpawnPointComponents_0' has a wrong offset!");

}

