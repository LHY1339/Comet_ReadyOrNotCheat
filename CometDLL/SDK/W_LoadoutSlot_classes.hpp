#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_LoadoutSlot

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "ReadyOrNot_structs.hpp"
#include "ReadyOrNot_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "ST_Style_Text_structs.hpp"
#include "LoadoutCategory_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_LoadoutSlot.W_LoadoutSlot_C
// 0x14E8 (0x1980 - 0x0498)
class UW_LoadoutSlot_C final : public ULoadoutSlotWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0498(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       animReveal_Expand;                                 // 0x04A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       animCollapse;                                      // 0x04A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       animReveal;                                        // 0x04B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       animHideAugment;                                   // 0x04B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       animRevealAugment;                                 // 0x04C0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UBorder*                                AugmentContainer;                                  // 0x04C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                Border_1;                                          // 0x04D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 img_DivBot;                                        // 0x04D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 img_ItemImage;                                     // 0x04E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              lbl_Equipped;                                      // 0x04E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                Name_0;                                            // 0x04F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SB_Equipped;                                       // 0x04F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScaleBox*                              SB_Icon;                                           // 0x0500(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScaleBox*                              scale_Name;                                        // 0x0508(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBox_0;                                         // 0x0510(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Button_C*                            SlotButton;                                        // 0x0518(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                SlotContents;                                      // 0x0520(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              txt_Augment;                                       // 0x0528(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              txt_Category;                                      // 0x0530(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              txt_Count;                                         // 0x0538(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              txt_Name;                                          // 0x0540(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          StartCollapsed;                                    // 0x0548(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_549[0x7];                                      // 0x0549(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ItemName;                                          // 0x0550(0x0018)(Edit, BlueprintVisible)
	class FText                                   Category;                                          // 0x0568(0x0018)(Edit, BlueprintVisible)
	bool                                          HasAugment;                                        // 0x0580(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_581[0x7];                                      // 0x0581(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Augment;                                           // 0x0588(0x0018)(Edit, BlueprintVisible)
	bool                                          CompactLayout;                                     // 0x05A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MinimalLayout;                                     // 0x05A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A2[0x6];                                      // 0x05A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ItemIcon;                                          // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          StartActive;                                       // 0x05B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Active;                                         // 0x05B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B2[0x6];                                      // 0x05B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FST_Style_Text                         NameTextStyle;                                     // 0x05B8(0x00C8)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FMargin                                NormalNamePadding;                                 // 0x0680(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FButtonStyle                           NormalButtonStyle;                                 // 0x0690(0x03F0)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FST_Style_Text                         NameTextStyle_Active;                              // 0x0A80(0x00C8)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	uint8                                         Pad_B48[0x8];                                      // 0x0B48(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FButtonStyle                           ActiveButtonStyle;                                 // 0x0B50(0x03F0)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void(class UW_LoadoutSlot_C* TriggeringSlot)> OnSlotClicked;            // 0x0F40(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class UW_LoadoutSlot_C* TriggeringSlot)> OnSlotHovered;            // 0x0F50(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class UW_LoadoutSlot_C* TriggeringSlot)> OnSlotUnhovered;          // 0x0F60(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	EItemClass                                    Item_Class;                                        // 0x0F70(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_F71[0x7];                                      // 0x0F71(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EItemCategory>                         Item_Categories;                                   // 0x0F78(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FItemVisualData                        Visuals;                                           // 0x0F88(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UTexture2D*                             Icon;                                              // 0x0FB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(class UW_LoadoutSlot_C* TriggeringSlot)> OnSlotDoubleClicked;      // 0x0FC0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<struct LoadoutCategory::FLoadoutCategory> Gear_Category_Classes;                          // 0x0FD0(0x0010)(Edit, BlueprintVisible)
	struct FST_Style_Text                         MinimalNameTextStyle;                              // 0x0FE0(0x00C8)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FMargin                                MinimalNamePadding;                                // 0x10A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FST_Style_Text                         MinimalNameTextStyle_Active;                       // 0x10B8(0x00C8)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          IsListItem;                                        // 0x1180(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Equipped;                                          // 0x1181(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_1182[0x2];                                     // 0x1182(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           NormalColor;                                       // 0x1184(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ActiveColor;                                       // 0x1194(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           EquippedColor;                                     // 0x11A4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           AugmentTextColor;                                  // 0x11B4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11C4[0xC];                                     // 0x11C4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FButtonStyle                           EquippedButtonStyle;                               // 0x11D0(0x03F0)(Edit, BlueprintVisible, DisableEditOnInstance)
	EItemType                                     ItemType;                                          // 0x15C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Attachment;                                        // 0x15C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_15C2[0x6];                                     // 0x15C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSavedLoadout                          Active_Loadout;                                    // 0x15C8(0x02E8)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          AugmentDisplayed;                                  // 0x18B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_18B1[0x7];                                     // 0x18B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CurrentAugment;                                    // 0x18B8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        EquippedLabelHeight;                               // 0x18D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewItem;                                           // 0x18D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FirstInitialization;                               // 0x18D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_18DA[0x2];                                     // 0x18DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CameraTag;                                         // 0x18DC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_18E4[0x4];                                     // 0x18E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PreviewAnimation;                                  // 0x18E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class FName                                   AmmoType_0;                                        // 0x18F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AmmoMax;                                           // 0x1900(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Hidden;                                            // 0x1908(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1909[0x7];                                     // 0x1909(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_Loadout_C*                           LoadoutWidget;                                     // 0x1910(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FText                                   CustomCategoryText;                                // 0x1918(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn)
	class UArmourMaterial*                        ArmourMaterialData_0;                              // 0x1930(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAmmunition;                                      // 0x1938(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsArmourMaterial;                                  // 0x1939(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPrimary;                                         // 0x193A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Refreshing;                                        // 0x193B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_193C[0x4];                                     // 0x193C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   AmmoCaliber;                                       // 0x1940(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsCollapsed;                                       // 0x1958(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1959[0x7];                                     // 0x1959(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MinimalHeight;                                     // 0x1960(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CompactHeight;                                     // 0x1968(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FullHeight;                                        // 0x1970(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ApplyAugment();
	void ApplyIcon();
	void BackPage(bool* Handled);
	void BndEvt__W_LoadoutSlot_SlotButton_K2Node_ComponentBoundEvent_0_DoubleClicked__DelegateSignature(class UW_Button_C* Button);
	void BndEvt__W_LoadoutSlot_SlotButton_K2Node_ComponentBoundEvent_1_Clicked__DelegateSignature(class UW_Button_C* Button);
	void BndEvt__W_LoadoutSlot_SlotButton_K2Node_ComponentBoundEvent_2_Hovered__DelegateSignature(class UW_Button_C* Button);
	void BndEvt__W_LoadoutSlot_SlotButton_K2Node_ComponentBoundEvent_3_Unhovered__DelegateSignature();
	void BP_OnEntryReleased();
	void BP_OnItemExpansionChanged(bool bIsExpanded);
	void BP_OnItemSelectionChanged(bool bIsSelected);
	void ChangePage(class FName PageName);
	void Collapse();
	void Construct();
	void DisableInteraction(bool Disabled);
	void ExecuteUbergraph_W_LoadoutSlot(int32 EntryPoint);
	void ExpandReveal();
	void ForceClick();
	void ForceDoubleClick();
	void GetAmmoCategoryText(class UClass* ItemData_0, class FText* Text);
	bool GetHoverState();
	void GetInvetoryCount();
	void GetIsSuppressed(bool* IsSuppressed);
	void GetLoadoutWidget(class UW_Loadout_C** LoadoutWidget_0);
	void HeaderSubpageNavigation(class FName OptionNameID);
	void Hide(double Delay, bool Collapse_0);
	void InitializeAmmoData(bool Primary, class FName AmmoType_0, class UClass* Weapon, int32 AmmoCount);
	void InitializeArmourMaterialData(class UArmourMaterial* ArmourMaterial);
	void InitializeAsListItem();
	void InitializeAsSlot();
	void InitializeItemData(class UClass* ItemData_0);
	void OnAddedToFocusPath(const struct FFocusEvent& InFocusEvent);
	void OnListItemObjectSet(class UObject* ListItemObject);
	void OnRemovedFromFocusPath(const struct FFocusEvent& InFocusEvent);
	void PreConstruct(bool IsDesignTime);
	void RefreshAmmoInfo();
	void RefreshArmourMaterialInfo();
	void RefreshItemInfo();
	void ReinitializeAmmoData(bool Primary, class FName AmmoType_0, class UClass* Weapon, int32 AmmoCount);
	void ReinitializeArmorMaterialData(class UArmourMaterial* ArmourMaterial);
	void ReinitializeItemData(class UClass* ItemData_0);
	void Reveal(double Delay);
	void Set_Active_Old(bool IsActive_0);
	void SetCompactLayout(bool CompactLayout_0);
	void SetCountText(const class FText& Text);
	void SetEquipped(bool Equipped_0);
	void SetExclusiveLock();
	void SetInputMode(bool IsGamepad);
	void SetLayout(bool MinimalLayout_0);
	void SetLoadoutWidget(class UW_Loadout_C* LoadoutWidget_0);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void UpdateActiveLoadout(const struct FSavedLoadout& ActiveLoadout);
	void UpdateAmmoCount(int32 Count);
	void UpdateAugment(const class FText& AugmentText);
	void UpdateCurrentItemMap(const TMap<EItemCategory, class UClass*>& ItemCategory);
	void UpdateCurrentSlot(class UW_LoadoutSlot_C* CurrentSlot);

	void GetFocusTarget(class UWidget** Focus) const;
	void GetItemIcon(TSoftObjectPtr<class UTexture2D>* Image) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_LoadoutSlot_C">();
	}
	static class UW_LoadoutSlot_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_LoadoutSlot_C>();
	}
};
static_assert(alignof(UW_LoadoutSlot_C) == 0x000010, "Wrong alignment on UW_LoadoutSlot_C");
static_assert(sizeof(UW_LoadoutSlot_C) == 0x001980, "Wrong size on UW_LoadoutSlot_C");
static_assert(offsetof(UW_LoadoutSlot_C, UberGraphFrame) == 0x000498, "Member 'UW_LoadoutSlot_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, animReveal_Expand) == 0x0004A0, "Member 'UW_LoadoutSlot_C::animReveal_Expand' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, animCollapse) == 0x0004A8, "Member 'UW_LoadoutSlot_C::animCollapse' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, animReveal) == 0x0004B0, "Member 'UW_LoadoutSlot_C::animReveal' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, animHideAugment) == 0x0004B8, "Member 'UW_LoadoutSlot_C::animHideAugment' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, animRevealAugment) == 0x0004C0, "Member 'UW_LoadoutSlot_C::animRevealAugment' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, AugmentContainer) == 0x0004C8, "Member 'UW_LoadoutSlot_C::AugmentContainer' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, Border_1) == 0x0004D0, "Member 'UW_LoadoutSlot_C::Border_1' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, img_DivBot) == 0x0004D8, "Member 'UW_LoadoutSlot_C::img_DivBot' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, img_ItemImage) == 0x0004E0, "Member 'UW_LoadoutSlot_C::img_ItemImage' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, lbl_Equipped) == 0x0004E8, "Member 'UW_LoadoutSlot_C::lbl_Equipped' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, Name_0) == 0x0004F0, "Member 'UW_LoadoutSlot_C::Name_0' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, SB_Equipped) == 0x0004F8, "Member 'UW_LoadoutSlot_C::SB_Equipped' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, SB_Icon) == 0x000500, "Member 'UW_LoadoutSlot_C::SB_Icon' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, scale_Name) == 0x000508, "Member 'UW_LoadoutSlot_C::scale_Name' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, SizeBox_0) == 0x000510, "Member 'UW_LoadoutSlot_C::SizeBox_0' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, SlotButton) == 0x000518, "Member 'UW_LoadoutSlot_C::SlotButton' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, SlotContents) == 0x000520, "Member 'UW_LoadoutSlot_C::SlotContents' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, txt_Augment) == 0x000528, "Member 'UW_LoadoutSlot_C::txt_Augment' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, txt_Category) == 0x000530, "Member 'UW_LoadoutSlot_C::txt_Category' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, txt_Count) == 0x000538, "Member 'UW_LoadoutSlot_C::txt_Count' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, txt_Name) == 0x000540, "Member 'UW_LoadoutSlot_C::txt_Name' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, StartCollapsed) == 0x000548, "Member 'UW_LoadoutSlot_C::StartCollapsed' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, ItemName) == 0x000550, "Member 'UW_LoadoutSlot_C::ItemName' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, Category) == 0x000568, "Member 'UW_LoadoutSlot_C::Category' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, HasAugment) == 0x000580, "Member 'UW_LoadoutSlot_C::HasAugment' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, Augment) == 0x000588, "Member 'UW_LoadoutSlot_C::Augment' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, CompactLayout) == 0x0005A0, "Member 'UW_LoadoutSlot_C::CompactLayout' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, MinimalLayout) == 0x0005A1, "Member 'UW_LoadoutSlot_C::MinimalLayout' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, ItemIcon) == 0x0005A8, "Member 'UW_LoadoutSlot_C::ItemIcon' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, StartActive) == 0x0005B0, "Member 'UW_LoadoutSlot_C::StartActive' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, Is_Active) == 0x0005B1, "Member 'UW_LoadoutSlot_C::Is_Active' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, NameTextStyle) == 0x0005B8, "Member 'UW_LoadoutSlot_C::NameTextStyle' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, NormalNamePadding) == 0x000680, "Member 'UW_LoadoutSlot_C::NormalNamePadding' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, NormalButtonStyle) == 0x000690, "Member 'UW_LoadoutSlot_C::NormalButtonStyle' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, NameTextStyle_Active) == 0x000A80, "Member 'UW_LoadoutSlot_C::NameTextStyle_Active' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, ActiveButtonStyle) == 0x000B50, "Member 'UW_LoadoutSlot_C::ActiveButtonStyle' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, OnSlotClicked) == 0x000F40, "Member 'UW_LoadoutSlot_C::OnSlotClicked' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, OnSlotHovered) == 0x000F50, "Member 'UW_LoadoutSlot_C::OnSlotHovered' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, OnSlotUnhovered) == 0x000F60, "Member 'UW_LoadoutSlot_C::OnSlotUnhovered' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, Item_Class) == 0x000F70, "Member 'UW_LoadoutSlot_C::Item_Class' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, Item_Categories) == 0x000F78, "Member 'UW_LoadoutSlot_C::Item_Categories' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, Visuals) == 0x000F88, "Member 'UW_LoadoutSlot_C::Visuals' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, Icon) == 0x000FB8, "Member 'UW_LoadoutSlot_C::Icon' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, OnSlotDoubleClicked) == 0x000FC0, "Member 'UW_LoadoutSlot_C::OnSlotDoubleClicked' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, Gear_Category_Classes) == 0x000FD0, "Member 'UW_LoadoutSlot_C::Gear_Category_Classes' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, MinimalNameTextStyle) == 0x000FE0, "Member 'UW_LoadoutSlot_C::MinimalNameTextStyle' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, MinimalNamePadding) == 0x0010A8, "Member 'UW_LoadoutSlot_C::MinimalNamePadding' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, MinimalNameTextStyle_Active) == 0x0010B8, "Member 'UW_LoadoutSlot_C::MinimalNameTextStyle_Active' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, IsListItem) == 0x001180, "Member 'UW_LoadoutSlot_C::IsListItem' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, Equipped) == 0x001181, "Member 'UW_LoadoutSlot_C::Equipped' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, NormalColor) == 0x001184, "Member 'UW_LoadoutSlot_C::NormalColor' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, ActiveColor) == 0x001194, "Member 'UW_LoadoutSlot_C::ActiveColor' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, EquippedColor) == 0x0011A4, "Member 'UW_LoadoutSlot_C::EquippedColor' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, AugmentTextColor) == 0x0011B4, "Member 'UW_LoadoutSlot_C::AugmentTextColor' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, EquippedButtonStyle) == 0x0011D0, "Member 'UW_LoadoutSlot_C::EquippedButtonStyle' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, ItemType) == 0x0015C0, "Member 'UW_LoadoutSlot_C::ItemType' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, Attachment) == 0x0015C1, "Member 'UW_LoadoutSlot_C::Attachment' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, Active_Loadout) == 0x0015C8, "Member 'UW_LoadoutSlot_C::Active_Loadout' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, AugmentDisplayed) == 0x0018B0, "Member 'UW_LoadoutSlot_C::AugmentDisplayed' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, CurrentAugment) == 0x0018B8, "Member 'UW_LoadoutSlot_C::CurrentAugment' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, EquippedLabelHeight) == 0x0018D0, "Member 'UW_LoadoutSlot_C::EquippedLabelHeight' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, NewItem) == 0x0018D8, "Member 'UW_LoadoutSlot_C::NewItem' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, FirstInitialization) == 0x0018D9, "Member 'UW_LoadoutSlot_C::FirstInitialization' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, CameraTag) == 0x0018DC, "Member 'UW_LoadoutSlot_C::CameraTag' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, PreviewAnimation) == 0x0018E8, "Member 'UW_LoadoutSlot_C::PreviewAnimation' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, AmmoType_0) == 0x0018F8, "Member 'UW_LoadoutSlot_C::AmmoType_0' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, AmmoMax) == 0x001900, "Member 'UW_LoadoutSlot_C::AmmoMax' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, Hidden) == 0x001908, "Member 'UW_LoadoutSlot_C::Hidden' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, LoadoutWidget) == 0x001910, "Member 'UW_LoadoutSlot_C::LoadoutWidget' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, CustomCategoryText) == 0x001918, "Member 'UW_LoadoutSlot_C::CustomCategoryText' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, ArmourMaterialData_0) == 0x001930, "Member 'UW_LoadoutSlot_C::ArmourMaterialData_0' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, IsAmmunition) == 0x001938, "Member 'UW_LoadoutSlot_C::IsAmmunition' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, IsArmourMaterial) == 0x001939, "Member 'UW_LoadoutSlot_C::IsArmourMaterial' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, IsPrimary) == 0x00193A, "Member 'UW_LoadoutSlot_C::IsPrimary' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, Refreshing) == 0x00193B, "Member 'UW_LoadoutSlot_C::Refreshing' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, AmmoCaliber) == 0x001940, "Member 'UW_LoadoutSlot_C::AmmoCaliber' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, IsCollapsed) == 0x001958, "Member 'UW_LoadoutSlot_C::IsCollapsed' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, MinimalHeight) == 0x001960, "Member 'UW_LoadoutSlot_C::MinimalHeight' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, CompactHeight) == 0x001968, "Member 'UW_LoadoutSlot_C::CompactHeight' has a wrong offset!");
static_assert(offsetof(UW_LoadoutSlot_C, FullHeight) == 0x001970, "Member 'UW_LoadoutSlot_C::FullHeight' has a wrong offset!");

}

