#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_Loadout

#include "Basic.hpp"

#include "ReadyOrNot_structs.hpp"
#include "ReadyOrNot_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_Loadout.W_Loadout_C
// 0x05C0 (0x1130 - 0x0B70)
class UW_Loadout_C final : public UPremissionPlanning
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0B70(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       AnimExtendListSlide;                               // 0x0B78(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UW_SubMenu_C*                           BackButtonPanel;                                   // 0x0B80(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Button_C*                            btn_SidebarBack;                                   // 0x0B88(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           CanvasPanel_Main;                                  // 0x0B90(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_PageWrapper_C*                       Header;                                            // 0x0B98(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 img_FadeFillLeft;                                  // 0x0BA0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 img_FadeLeft;                                      // 0x0BA8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 img_MimizeArrow_l;                                 // 0x0BB0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UMenuAnchor*                            InfoPanelAnchor;                                   // 0x0BB8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           RootCanvas;                                        // 0x0BC0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBackgroundBlur*                        SidebarButton;                                     // 0x0BC8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           UI_Canvas;                                         // 0x0BD0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Loadout_ItemList_Vertical_C*         VerticalItemList;                                  // 0x0BD8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_HotkeyBar_C*                         W_HotkeyBar;                                       // 0x0BE0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Loadout_InformationTable_C*          W_Loadout_InformationTable_C_1;                    // 0x0BE8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Loadout_ItemList_C*                  W_Loadout_ItemList_C_2;                            // 0x0BF0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Loadout_Overview_C*                  W_Loadout_Overview;                                // 0x0BF8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Loadout_UnitSelect_C*                W_LoadoutCharacterSelect;                          // 0x0C00(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(bool Pressed, const struct FVector2D& CursorPos)> PanMap;          // 0x0C08(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class UTexture2D* LayoutTexture)> UpdateMapMaterial;               // 0x0C18(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class AReadyOrNotPlayerController*            PlayerController;                                  // 0x0C28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AReadyOrNotCharacter*                   Character;                                         // 0x0C30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UInventoryComponent*                    InventoryComp;                                     // 0x0C38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UW_LoadoutSlot_C*                       CurrentActiveSlot;                                 // 0x0C40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UPremissionPlanning*                    PremissionPlanning;                                // 0x0C48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UW_LoadoutSlot_Attachment_C*            CurrentActiveAttachmentSlot;                       // 0x0C50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UW_Loadout_InformationTable_C*          InfoPanel;                                         // 0x0C58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UW_LoadoutSlot_C*                       HoveredSlot;                                       // 0x0C60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          InfoPanelRefreshCanceled;                          // 0x0C68(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OverviewSlotDoubleClickDelay;                      // 0x0C69(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPrimary;                                          // 0x0C6A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RemotePlayer;                                      // 0x0C6B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          QuartermasterOpen;                                 // 0x0C6C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C6D[0x3];                                      // 0x0C6D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        InfoPanelHideDelay;                                // 0x0C70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DoubleClickDelay;                                  // 0x0C78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           UnhoverTimer;                                      // 0x0C80(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<EEquippingSwat, struct FSavedLoadout>    LastSavedLoadout_0;                                // 0x0C88(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        OverviewRevealOffset;                              // 0x0CD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        QuartermasterRevealOffset;                         // 0x0CE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<EItemCategory, class FName>              CategoryCameraTags;                                // 0x0CE8(0x0050)(Edit, BlueprintVisible)
	TMap<EItemCategory, class FString>            CategoryPoses;                                     // 0x0D38(0x0050)(Edit, BlueprintVisible)
	class AReadyOrNotPlayerState*                 EquippingPlayerState_0;                            // 0x0D88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   CurrentCameraTag;                                  // 0x0D90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CurrentPreviewAnimation;                           // 0x0D98(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	struct FTimerHandle                           RedrawWeaponTimer;                                 // 0x0DA8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FString                                 PrimaryHolserAnim;                                 // 0x0DB0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 PrimaryDrawAnim;                                   // 0x0DC0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 SidearmHolserAnim;                                 // 0x0DD0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 SidearmDrawAnim;                                   // 0x0DE0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash)
	class FName                                   DefaultCameraTag;                                  // 0x0DF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EItemType                                     EquippingItemType;                                 // 0x0DF8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StartInQuartermaster;                              // 0x0DF9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInGame;                                           // 0x0DFA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bReady;                                            // 0x0DFB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DFC[0x4];                                      // 0x0DFC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWidget*>                        Overview_Widgets;                                  // 0x0E00(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TMap<class FString, struct FWeaponPreset>     CurrentWeaponPresets;                              // 0x0E10(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FString                                 CurrentlySelectedPreset;                           // 0x0E60(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	double                                        RevealDelay;                                       // 0x0E70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              OnQuartermasterListHidden;                         // 0x0E78(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bQuarterMasterListHidden;                          // 0x0E88(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E89[0x7];                                      // 0x0E89(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_StandardModal_C*                     PresetModal;                                       // 0x0E90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         PresetOverwriteIndex;                              // 0x0E98(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E9C[0x4];                                      // 0x0E9C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 WorkbenchCameraTarget;                             // 0x0EA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               DefaultWorkbenchCameraRotation;                    // 0x0EA8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class ACameraActor*                           WorkbenchCamera;                                   // 0x0EC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CurrentWorkbenchCameraRotation;                    // 0x0EC8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        CurrentWorkbenchCameraTransitionTime;              // 0x0EE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WorkbenchCameraLookSpeed;                          // 0x0EE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bWorkbenchCameraRotating;                          // 0x0EF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EF1[0x7];                                      // 0x0EF1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               TargetWorkbenchCameraRotation;                     // 0x0EF8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        WorkbenchCameraTransitionAlpha;                    // 0x0F10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               WorkbenchCameraRotation;                           // 0x0F18(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bUseTableOverview;                                 // 0x0F30(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_F31[0x7];                                      // 0x0F31(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_LobbyLoadout_C*                     OverviewTable;                                     // 0x0F38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<EItemCategory, class UClass*>            CurrentItems;                                      // 0x0F40(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          SelectingMunitions;                                // 0x0F90(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F91[0x7];                                      // 0x0F91(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class ABaseItem>>          ListExclusionItems;                                // 0x0F98(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          SelectingDeployables;                              // 0x0FA8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FA9[0x3];                                      // 0x0FA9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ExcludedAmmoType;                                  // 0x0FAC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ArmorEditorOpen;                                   // 0x0FB4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FB5[0x3];                                      // 0x0FB5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnPrimaryAmmoEquipped;                             // 0x0FB8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnSidearmAmmoEquipped;                             // 0x0FC8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnGrenadesEquipped;                                // 0x0FD8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnTacticalEquipped;                                // 0x0FE8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnPrimaryAmmoCountSaved;                           // 0x0FF8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnSidearmAmmoCountSaved;                           // 0x1008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnGrenadeCountSaved;                               // 0x1018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnTacticalCountSaved;                              // 0x1028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnPrimaryWeaponEquipped;                           // 0x1038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnSidearmWeaponEquipped;                           // 0x1048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnArmorEquipped;                                   // 0x1058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnArmorCoverageSaved;                              // 0x1068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          SelectingArmourMaterial;                           // 0x1078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1079[0x7];                                     // 0x1079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnArmorMaterialEquipped;                           // 0x1080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class FName AmmoType, class UClass* Weapon)> OnAmmoOptionSelected; // 0x1090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          ChangingPlayer;                                    // 0x10A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10A1[0x7];                                     // 0x10A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFMODEvent*                             WeaponEquippedSound;                               // 0x10A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             ArmorEquippedSound;                                // 0x10B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             ArmorMaterialEquippedSound;                        // 0x10B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             AmmoEquippedSound;                                 // 0x10C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             AttachmentEquippedSound;                           // 0x10C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             AttachmentRemovedSound;                            // 0x10D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             CleanWeaponSound;                                  // 0x10D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             QuartermasterOpenSound;                            // 0x10E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             DeployableEquippedSound;                           // 0x10E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             WeaponHolsteredSound;                              // 0x10F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UFMODEvent*                             WeaponDrawSound;                                   // 0x10F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        HolsterTimeRemaining;                              // 0x1100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AutoSelectAttachment;                              // 0x1108(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EWeaponAttachmentType                         AutoSelectAttachmentSlot;                          // 0x1109(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          VerticalListOpen;                                  // 0x110A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ListVisible;                                       // 0x110B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CurrentLoadoutPreset;                              // 0x110C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ApplyingPreset;                                    // 0x1114(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UsingPreset;                                       // 0x1115(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PresetDirty;                                       // 0x1116(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1117[0x1];                                     // 0x1117(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PresetCharacterLimit;                              // 0x1118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_111C[0x4];                                     // 0x111C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_LoadoutSlot_C*                       ActiveQuartermasterSlot;                           // 0x1120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UW_LoadoutSlot_C*                       CurrentHoveredSlot;                                // 0x1128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void ApplyLoadoutPreset(const struct FLoadoutPreset& LoadoutPreset);
	void AttachmentHovered(class UW_LoadoutSlot_Attachment_C* TriggeringAttachment);
	void AttachmentSlotClicked(class UW_LoadoutSlot_Attachment_C* TriggeringSlot);
	void AttachmentUnhovered(class UW_LoadoutSlot_Attachment_C* TriggeringAttachment);
	void BackPage(bool* Handled);
	void BndEvt__W_Loadout_btn_SidebarBack_K2Node_ComponentBoundEvent_14_Clicked__DelegateSignature(class UW_Button_C* Button);
	void BndEvt__W_Loadout_VerticalItemList_K2Node_ComponentBoundEvent_17_HandleBackPress__DelegateSignature();
	void BndEvt__W_Loadout_W_HotkeyBar_K2Node_ComponentBoundEvent_6_OnHotkeyClicked__DelegateSignature(const class FString& HotkeyID);
	void BndEvt__W_Loadout_W_Loadout_InformationTable_C_1_K2Node_ComponentBoundEvent_11_OnInfoPanelAttachmentClicked__DelegateSignature(EWeaponAttachmentType Slot_0, class UClass* AttachmentData);
	void BndEvt__W_Loadout_W_Loadout_InformationTable_C_1_K2Node_ComponentBoundEvent_4_OnModifyWeaponButtonClicked__DelegateSignature(class UClass* ItemToModify);
	void BndEvt__W_Loadout_W_Loadout_InformationTable_C_1_K2Node_ComponentBoundEvent_7_OnInfoPanelRemoveAttachmentClicked__DelegateSignature(EWeaponAttachmentType Slot_0);
	void BndEvt__W_Loadout_W_Loadout_ItemList_C_2_K2Node_ComponentBoundEvent_0_OnLoadoutItemClicked__DelegateSignature(class UClass* ItemData);
	void BndEvt__W_Loadout_W_Loadout_ItemList_C_2_K2Node_ComponentBoundEvent_13_OnArmourMaterialClicked__DelegateSignature(class UArmourMaterial* ArmourMaterial);
	void BndEvt__W_Loadout_W_Loadout_ItemList_C_2_K2Node_ComponentBoundEvent_2_OnAttachmentItemClicked__DelegateSignature(class UClass* AttachingWeapon, class UClass* AttachmentData);
	void BndEvt__W_Loadout_W_Loadout_ItemList_C_2_K2Node_ComponentBoundEvent_3_OnLoadoutItemDoubleClicked__DelegateSignature(class UClass* ItemData);
	void BndEvt__W_Loadout_W_Loadout_ItemList_C_2_K2Node_ComponentBoundEvent_9_OnAmmoItemClicked__DelegateSignature(class FName AmmoType, class UClass* Weapon);
	void BndEvt__W_Loadout_W_Loadout_ItemList_Vertical_C_5_K2Node_ComponentBoundEvent_12_OnLoadoutItemClicked__DelegateSignature(class UClass* ItemData);
	void BndEvt__W_Loadout_W_Loadout_ItemList_Vertical_C_5_K2Node_ComponentBoundEvent_16_OnAttachmentItemClicked__DelegateSignature(class UClass* AttachingWeapon, class UClass* AttachmentData);
	void BndEvt__W_Loadout_W_Loadout_ItemList_Vertical_C_5_K2Node_ComponentBoundEvent_19_OnLoadoutItemDoubleClicked__DelegateSignature(class UClass* ItemData);
	void BndEvt__W_Loadout_W_Loadout_ItemList_Vertical_C_5_K2Node_ComponentBoundEvent_24_OnAmmoItemClicked__DelegateSignature(class FName AmmoType, class UClass* Weapon);
	void BndEvt__W_Loadout_W_Loadout_ItemList_Vertical_C_5_K2Node_ComponentBoundEvent_26_OnArmourMaterialClicked__DelegateSignature(class UArmourMaterial* ArmourMaterial);
	void BndEvt__W_Loadout_W_Loadout_Overview_K2Node_ComponentBoundEvent_10_OnArmorEditorClosed__DelegateSignature();
	void BndEvt__W_Loadout_W_Loadout_Overview_K2Node_ComponentBoundEvent_15_OnCleanWeaponClicked__DelegateSignature();
	void BndEvt__W_Loadout_W_Loadout_Overview_K2Node_ComponentBoundEvent_18_OnOverviewItemDoubleClicked__DelegateSignature(class UW_LoadoutSlot_C* TriggeringSlot);
	void BndEvt__W_Loadout_W_Loadout_Overview_K2Node_ComponentBoundEvent_20_OnQuartermasterWeaponSwapped__DelegateSignature(bool IsPrimary, class UW_LoadoutSlot_C* NewLoadoutSlot);
	void BndEvt__W_Loadout_W_Loadout_Overview_K2Node_ComponentBoundEvent_22_OnQuartermasterClosed__DelegateSignature();
	void BndEvt__W_Loadout_W_Loadout_Overview_K2Node_ComponentBoundEvent_23_OnQuartermasterOpened__DelegateSignature();
	void BndEvt__W_Loadout_W_Loadout_Overview_K2Node_ComponentBoundEvent_5_OnArmorEditorOpen__DelegateSignature();
	void BndEvt__W_Loadout_W_Loadout_Overview_K2Node_ComponentBoundEvent_8_HandleBackPress__DelegateSignature();
	void BndEvt__W_Loadout_W_LoadoutCharacterSelect_K2Node_ComponentBoundEvent_1_OnEquippingUnitSelected__DelegateSignature(const struct FST_EquippingUnit& EquippingUnitInfo);
	bool BP_OnHandleBackAction();
	void CancelSavePreset(class UStandardModal* CallingModal);
	void ChangePage(class FName PageName);
	void CheckPreset();
	void CleanCurrentWeapon();
	void ClearPreset();
	void CloseArmorQuartermaster();
	void CloseLoadout();
	void CloseQuartermaster();
	void Construct();
	void DeleteLoadoutPreset(class UW_StandardModal_C* TriggeringModal, const class FText& TextEntry);
	void DeselectAttachmentSlot();
	void DeselectLoadoutSlot();
	void DoAttachmentUnhover();
	void DoItemUnhover();
	void EquipArmor(class UClass* ItemData);
	void EquipArmourMaterial(class UArmourMaterial* ArmourMaterial);
	void EquipAttachment(class UClass* AttachingWeapon, class UClass* AttachmentData);
	void EquipGrenades(TArray<class UClass*>& ItemData);
	void EquipHeadwear(class UClass* ItemData);
	void EquipItem(class UClass* ItemData);
	void EquipLongTactical(class UClass* ItemData);
	void EquipPrimaryAmmo(TArray<class FName>& PrimaryAmmo);
	void EquipPrimaryAttachments(EWeaponAttachmentType AttachmentType, class UClass* AttachmentData, class UClass* AttachingWeapon);
	void EquipSidearmAmmo(TArray<class FName>& SidearmAmmo);
	void EquipSidearmAttachments(EWeaponAttachmentType AttachmentType, class UClass* AttachmentData, class UClass* AttachingWeapon);
	void EquipTactical(TArray<class UClass*>& ItemData);
	void ExecuteUbergraph_W_Loadout(int32 EntryPoint);
	void GoBack();
	void HeaderSubpageNavigation(class FName OptionNameID);
	void Hide(double Delay, bool Collapse);
	void HideHUD();
	void HideItemInfoPanel();
	void HideItemList();
	void HolsterPreviewCharacterWeapon(bool* IsHolstering);
	void InitializeAttachmentSelectionPanel(class UW_LoadoutSlot_Attachment_C* TriggeringSlot);
	void InitializeItemSelectionPanel(class UW_LoadoutSlot_C* TriggeringSlot);
	void InitializeItemSelectionRemote(class UW_LoadoutSlot_C* TriggeringSlot);
	void InitializeOverview();
	void InitializeQuartermaster();
	void InitializeWeaponAttachmentMap();
	void IsNullAttachment(class UClass* Attachment, bool* IsNull);
	void ItemHovered(class UW_LoadoutSlot_C* TriggeringSlot);
	void ItemUnhovered(class UW_LoadoutSlot_C* TriggeringSlot);
	void LoadDefaultLoadout();
	void LookAtAttachmentSlot(EWeaponAttachmentType AttachmentSlot);
	void OnDragDetected(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation** Operation);
	void OnInitialized();
	struct FEventReply OnKeyDown(const struct FGeometry& MyGeometry, const struct FKeyEvent& InKeyEvent);
	void OnLoadoutLoaded();
	void OnLoadoutPresetsLoaded();
	void OnLoadoutSaved();
	struct FEventReply OnMouseButtonUp(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnSwatCharacterChanged();
	void Open_Armour_Material_List(bool VerticalList);
	void Open_Loadout_Preset_Modal(const class FString& CurrentPreset, bool Delete);
	void OpenAmmoList(bool VerticalList, class FName ExcludedAmmoType_0, class UClass* Weapon);
	void OpenArmorQuartermaster(class UClass* ItemToModify);
	void OpenAttachmentList(bool VerticalList, class UClass* ItemData, EWeaponAttachmentType AttachmentType);
	void OpenDeployableList(bool VerticalList, const EItemCategory LoadoutSlot, const TArray<struct LoadoutCategory::FLoadoutCategory>& GearCategoryClasses, const TArray<class UClass*>& ExcludedItems);
	void OpenItemList(bool VerticalList, const EItemCategory LoadoutSlot, const TArray<struct LoadoutCategory::FLoadoutCategory>& GearCategoryClasses);
	void OpenWeaponQuartermaster(class UClass* ItemToModify);
	void OverviewItemClicked(class UW_LoadoutSlot_C* TriggeringSlot);
	void PreConstruct(bool IsDesignTime);
	void PrimaryChanged();
	void QuartermasterWeaponClicked(class UW_LoadoutSlot_C* TriggeringSlot);
	void RedrawWeapon();
	void RefreshAttachmentInfoPanel(class UW_LoadoutSlot_Attachment_C* AttachmentSlot);
	void RefreshItemInfoPanel(class UW_LoadoutSlot_C* LoadoutSlot);
	void RefreshItemList();
	void Reveal(double Delay);
	void SaveActiveLoadoutOld();
	void SaveArmorCoverage(EArmourCoverage ArmorCoverage);
	void SaveGrenadeSlotCount(int32 Grenade_Slots_Count);
	void SaveLoadoutPreset(class UW_StandardModal_C* TriggeringModal, const class FText& TextEntry);
	void SavePrimaryAmmoSlotCount(int32 Primary_Ammo_Slots_Count);
	void SaveSidearmAmmoSlotCount(int32 Secondary_Ammo_Slots_Count);
	void SaveTacticalSlotcount(int32 Tactical_Slots_Count);
	void SaveWeaponPreset(class UW_StandardModal_C* TriggeringModal, const class FText& TextEntry);
	void SelectListItem(class UClass* ItemData);
	void SetActiveLoadout(const class FString& LoadoutName, class AReadyOrNotPlayerState* RoNPlayerState, EEquippingSwat EquippingUnit);
	void SetActiveQuartermasterSlot();
	void SetInputMode(bool IsGamepad);
	void SetLoadoutWidget(class UW_Loadout_C* LoadoutWidget);
	void SetPreMissionCamera(class FName Tag, const class FString& Animation, double BlendTime);
	void SetPreMissionCameraBySlot(EItemCategory LoadoutSlot, double BlendTime);
	void SetPresetModified(bool PresetDirty_0);
	void SetupBindings();
	void SetupWorkbenchCamera();
	void ShowHUD();
	void ShowItemInfoPanel(class UW_LoadoutSlot_C* LoadoutSlot);
	void ShowToolTip(const struct FLevelDataLookupTable& MissionDetails);
	void SidearmChanged();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void UpdateActiveLoadout(const struct FSavedLoadout& ActiveLoadout_0);
	void UpdateAllPreviewWeaponAttachments(bool IsWorkbench, const TSubclassOf<class ABaseItem>& Weapon, bool IsSidearm);
	void UpdateCurrentItem(EItemCategory ItemCategory, class UClass* ItemClass);
	void UpdateCurrentItemMap(const TMap<EItemCategory, class UClass*>& ItemCategory);
	void UpdateCurrentSlot(class UW_LoadoutSlot_C* CurrentSlot);
	void UpdateHUDStates();
	void UpdatePreview(EItemCategory Selection);
	void UpdateWorkbenchCameraRotation(double DeltaTime);

	void GetFocusTarget(class UWidget** Focus) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_Loadout_C">();
	}
	static class UW_Loadout_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_Loadout_C>();
	}
};
static_assert(alignof(UW_Loadout_C) == 0x000008, "Wrong alignment on UW_Loadout_C");
static_assert(sizeof(UW_Loadout_C) == 0x001130, "Wrong size on UW_Loadout_C");
static_assert(offsetof(UW_Loadout_C, UberGraphFrame) == 0x000B70, "Member 'UW_Loadout_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, AnimExtendListSlide) == 0x000B78, "Member 'UW_Loadout_C::AnimExtendListSlide' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, BackButtonPanel) == 0x000B80, "Member 'UW_Loadout_C::BackButtonPanel' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, btn_SidebarBack) == 0x000B88, "Member 'UW_Loadout_C::btn_SidebarBack' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, CanvasPanel_Main) == 0x000B90, "Member 'UW_Loadout_C::CanvasPanel_Main' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, Header) == 0x000B98, "Member 'UW_Loadout_C::Header' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, img_FadeFillLeft) == 0x000BA0, "Member 'UW_Loadout_C::img_FadeFillLeft' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, img_FadeLeft) == 0x000BA8, "Member 'UW_Loadout_C::img_FadeLeft' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, img_MimizeArrow_l) == 0x000BB0, "Member 'UW_Loadout_C::img_MimizeArrow_l' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, InfoPanelAnchor) == 0x000BB8, "Member 'UW_Loadout_C::InfoPanelAnchor' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, RootCanvas) == 0x000BC0, "Member 'UW_Loadout_C::RootCanvas' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, SidebarButton) == 0x000BC8, "Member 'UW_Loadout_C::SidebarButton' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, UI_Canvas) == 0x000BD0, "Member 'UW_Loadout_C::UI_Canvas' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, VerticalItemList) == 0x000BD8, "Member 'UW_Loadout_C::VerticalItemList' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, W_HotkeyBar) == 0x000BE0, "Member 'UW_Loadout_C::W_HotkeyBar' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, W_Loadout_InformationTable_C_1) == 0x000BE8, "Member 'UW_Loadout_C::W_Loadout_InformationTable_C_1' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, W_Loadout_ItemList_C_2) == 0x000BF0, "Member 'UW_Loadout_C::W_Loadout_ItemList_C_2' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, W_Loadout_Overview) == 0x000BF8, "Member 'UW_Loadout_C::W_Loadout_Overview' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, W_LoadoutCharacterSelect) == 0x000C00, "Member 'UW_Loadout_C::W_LoadoutCharacterSelect' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, PanMap) == 0x000C08, "Member 'UW_Loadout_C::PanMap' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, UpdateMapMaterial) == 0x000C18, "Member 'UW_Loadout_C::UpdateMapMaterial' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, PlayerController) == 0x000C28, "Member 'UW_Loadout_C::PlayerController' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, Character) == 0x000C30, "Member 'UW_Loadout_C::Character' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, InventoryComp) == 0x000C38, "Member 'UW_Loadout_C::InventoryComp' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, CurrentActiveSlot) == 0x000C40, "Member 'UW_Loadout_C::CurrentActiveSlot' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, PremissionPlanning) == 0x000C48, "Member 'UW_Loadout_C::PremissionPlanning' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, CurrentActiveAttachmentSlot) == 0x000C50, "Member 'UW_Loadout_C::CurrentActiveAttachmentSlot' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, InfoPanel) == 0x000C58, "Member 'UW_Loadout_C::InfoPanel' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, HoveredSlot) == 0x000C60, "Member 'UW_Loadout_C::HoveredSlot' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, InfoPanelRefreshCanceled) == 0x000C68, "Member 'UW_Loadout_C::InfoPanelRefreshCanceled' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, OverviewSlotDoubleClickDelay) == 0x000C69, "Member 'UW_Loadout_C::OverviewSlotDoubleClickDelay' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, bPrimary) == 0x000C6A, "Member 'UW_Loadout_C::bPrimary' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, RemotePlayer) == 0x000C6B, "Member 'UW_Loadout_C::RemotePlayer' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, QuartermasterOpen) == 0x000C6C, "Member 'UW_Loadout_C::QuartermasterOpen' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, InfoPanelHideDelay) == 0x000C70, "Member 'UW_Loadout_C::InfoPanelHideDelay' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, DoubleClickDelay) == 0x000C78, "Member 'UW_Loadout_C::DoubleClickDelay' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, UnhoverTimer) == 0x000C80, "Member 'UW_Loadout_C::UnhoverTimer' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, LastSavedLoadout_0) == 0x000C88, "Member 'UW_Loadout_C::LastSavedLoadout_0' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, OverviewRevealOffset) == 0x000CD8, "Member 'UW_Loadout_C::OverviewRevealOffset' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, QuartermasterRevealOffset) == 0x000CE0, "Member 'UW_Loadout_C::QuartermasterRevealOffset' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, CategoryCameraTags) == 0x000CE8, "Member 'UW_Loadout_C::CategoryCameraTags' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, CategoryPoses) == 0x000D38, "Member 'UW_Loadout_C::CategoryPoses' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, EquippingPlayerState_0) == 0x000D88, "Member 'UW_Loadout_C::EquippingPlayerState_0' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, CurrentCameraTag) == 0x000D90, "Member 'UW_Loadout_C::CurrentCameraTag' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, CurrentPreviewAnimation) == 0x000D98, "Member 'UW_Loadout_C::CurrentPreviewAnimation' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, RedrawWeaponTimer) == 0x000DA8, "Member 'UW_Loadout_C::RedrawWeaponTimer' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, PrimaryHolserAnim) == 0x000DB0, "Member 'UW_Loadout_C::PrimaryHolserAnim' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, PrimaryDrawAnim) == 0x000DC0, "Member 'UW_Loadout_C::PrimaryDrawAnim' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, SidearmHolserAnim) == 0x000DD0, "Member 'UW_Loadout_C::SidearmHolserAnim' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, SidearmDrawAnim) == 0x000DE0, "Member 'UW_Loadout_C::SidearmDrawAnim' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, DefaultCameraTag) == 0x000DF0, "Member 'UW_Loadout_C::DefaultCameraTag' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, EquippingItemType) == 0x000DF8, "Member 'UW_Loadout_C::EquippingItemType' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, StartInQuartermaster) == 0x000DF9, "Member 'UW_Loadout_C::StartInQuartermaster' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, bInGame) == 0x000DFA, "Member 'UW_Loadout_C::bInGame' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, bReady) == 0x000DFB, "Member 'UW_Loadout_C::bReady' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, Overview_Widgets) == 0x000E00, "Member 'UW_Loadout_C::Overview_Widgets' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, CurrentWeaponPresets) == 0x000E10, "Member 'UW_Loadout_C::CurrentWeaponPresets' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, CurrentlySelectedPreset) == 0x000E60, "Member 'UW_Loadout_C::CurrentlySelectedPreset' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, RevealDelay) == 0x000E70, "Member 'UW_Loadout_C::RevealDelay' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, OnQuartermasterListHidden) == 0x000E78, "Member 'UW_Loadout_C::OnQuartermasterListHidden' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, bQuarterMasterListHidden) == 0x000E88, "Member 'UW_Loadout_C::bQuarterMasterListHidden' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, PresetModal) == 0x000E90, "Member 'UW_Loadout_C::PresetModal' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, PresetOverwriteIndex) == 0x000E98, "Member 'UW_Loadout_C::PresetOverwriteIndex' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, WorkbenchCameraTarget) == 0x000EA0, "Member 'UW_Loadout_C::WorkbenchCameraTarget' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, DefaultWorkbenchCameraRotation) == 0x000EA8, "Member 'UW_Loadout_C::DefaultWorkbenchCameraRotation' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, WorkbenchCamera) == 0x000EC0, "Member 'UW_Loadout_C::WorkbenchCamera' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, CurrentWorkbenchCameraRotation) == 0x000EC8, "Member 'UW_Loadout_C::CurrentWorkbenchCameraRotation' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, CurrentWorkbenchCameraTransitionTime) == 0x000EE0, "Member 'UW_Loadout_C::CurrentWorkbenchCameraTransitionTime' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, WorkbenchCameraLookSpeed) == 0x000EE8, "Member 'UW_Loadout_C::WorkbenchCameraLookSpeed' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, bWorkbenchCameraRotating) == 0x000EF0, "Member 'UW_Loadout_C::bWorkbenchCameraRotating' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, TargetWorkbenchCameraRotation) == 0x000EF8, "Member 'UW_Loadout_C::TargetWorkbenchCameraRotation' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, WorkbenchCameraTransitionAlpha) == 0x000F10, "Member 'UW_Loadout_C::WorkbenchCameraTransitionAlpha' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, WorkbenchCameraRotation) == 0x000F18, "Member 'UW_Loadout_C::WorkbenchCameraRotation' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, bUseTableOverview) == 0x000F30, "Member 'UW_Loadout_C::bUseTableOverview' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, OverviewTable) == 0x000F38, "Member 'UW_Loadout_C::OverviewTable' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, CurrentItems) == 0x000F40, "Member 'UW_Loadout_C::CurrentItems' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, SelectingMunitions) == 0x000F90, "Member 'UW_Loadout_C::SelectingMunitions' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, ListExclusionItems) == 0x000F98, "Member 'UW_Loadout_C::ListExclusionItems' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, SelectingDeployables) == 0x000FA8, "Member 'UW_Loadout_C::SelectingDeployables' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, ExcludedAmmoType) == 0x000FAC, "Member 'UW_Loadout_C::ExcludedAmmoType' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, ArmorEditorOpen) == 0x000FB4, "Member 'UW_Loadout_C::ArmorEditorOpen' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, OnPrimaryAmmoEquipped) == 0x000FB8, "Member 'UW_Loadout_C::OnPrimaryAmmoEquipped' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, OnSidearmAmmoEquipped) == 0x000FC8, "Member 'UW_Loadout_C::OnSidearmAmmoEquipped' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, OnGrenadesEquipped) == 0x000FD8, "Member 'UW_Loadout_C::OnGrenadesEquipped' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, OnTacticalEquipped) == 0x000FE8, "Member 'UW_Loadout_C::OnTacticalEquipped' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, OnPrimaryAmmoCountSaved) == 0x000FF8, "Member 'UW_Loadout_C::OnPrimaryAmmoCountSaved' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, OnSidearmAmmoCountSaved) == 0x001008, "Member 'UW_Loadout_C::OnSidearmAmmoCountSaved' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, OnGrenadeCountSaved) == 0x001018, "Member 'UW_Loadout_C::OnGrenadeCountSaved' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, OnTacticalCountSaved) == 0x001028, "Member 'UW_Loadout_C::OnTacticalCountSaved' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, OnPrimaryWeaponEquipped) == 0x001038, "Member 'UW_Loadout_C::OnPrimaryWeaponEquipped' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, OnSidearmWeaponEquipped) == 0x001048, "Member 'UW_Loadout_C::OnSidearmWeaponEquipped' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, OnArmorEquipped) == 0x001058, "Member 'UW_Loadout_C::OnArmorEquipped' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, OnArmorCoverageSaved) == 0x001068, "Member 'UW_Loadout_C::OnArmorCoverageSaved' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, SelectingArmourMaterial) == 0x001078, "Member 'UW_Loadout_C::SelectingArmourMaterial' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, OnArmorMaterialEquipped) == 0x001080, "Member 'UW_Loadout_C::OnArmorMaterialEquipped' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, OnAmmoOptionSelected) == 0x001090, "Member 'UW_Loadout_C::OnAmmoOptionSelected' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, ChangingPlayer) == 0x0010A0, "Member 'UW_Loadout_C::ChangingPlayer' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, WeaponEquippedSound) == 0x0010A8, "Member 'UW_Loadout_C::WeaponEquippedSound' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, ArmorEquippedSound) == 0x0010B0, "Member 'UW_Loadout_C::ArmorEquippedSound' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, ArmorMaterialEquippedSound) == 0x0010B8, "Member 'UW_Loadout_C::ArmorMaterialEquippedSound' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, AmmoEquippedSound) == 0x0010C0, "Member 'UW_Loadout_C::AmmoEquippedSound' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, AttachmentEquippedSound) == 0x0010C8, "Member 'UW_Loadout_C::AttachmentEquippedSound' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, AttachmentRemovedSound) == 0x0010D0, "Member 'UW_Loadout_C::AttachmentRemovedSound' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, CleanWeaponSound) == 0x0010D8, "Member 'UW_Loadout_C::CleanWeaponSound' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, QuartermasterOpenSound) == 0x0010E0, "Member 'UW_Loadout_C::QuartermasterOpenSound' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, DeployableEquippedSound) == 0x0010E8, "Member 'UW_Loadout_C::DeployableEquippedSound' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, WeaponHolsteredSound) == 0x0010F0, "Member 'UW_Loadout_C::WeaponHolsteredSound' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, WeaponDrawSound) == 0x0010F8, "Member 'UW_Loadout_C::WeaponDrawSound' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, HolsterTimeRemaining) == 0x001100, "Member 'UW_Loadout_C::HolsterTimeRemaining' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, AutoSelectAttachment) == 0x001108, "Member 'UW_Loadout_C::AutoSelectAttachment' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, AutoSelectAttachmentSlot) == 0x001109, "Member 'UW_Loadout_C::AutoSelectAttachmentSlot' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, VerticalListOpen) == 0x00110A, "Member 'UW_Loadout_C::VerticalListOpen' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, ListVisible) == 0x00110B, "Member 'UW_Loadout_C::ListVisible' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, CurrentLoadoutPreset) == 0x00110C, "Member 'UW_Loadout_C::CurrentLoadoutPreset' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, ApplyingPreset) == 0x001114, "Member 'UW_Loadout_C::ApplyingPreset' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, UsingPreset) == 0x001115, "Member 'UW_Loadout_C::UsingPreset' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, PresetDirty) == 0x001116, "Member 'UW_Loadout_C::PresetDirty' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, PresetCharacterLimit) == 0x001118, "Member 'UW_Loadout_C::PresetCharacterLimit' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, ActiveQuartermasterSlot) == 0x001120, "Member 'UW_Loadout_C::ActiveQuartermasterSlot' has a wrong offset!");
static_assert(offsetof(UW_Loadout_C, CurrentHoveredSlot) == 0x001128, "Member 'UW_Loadout_C::CurrentHoveredSlot' has a wrong offset!");

}

