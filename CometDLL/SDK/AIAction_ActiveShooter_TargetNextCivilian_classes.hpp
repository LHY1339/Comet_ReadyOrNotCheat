#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AIAction_ActiveShooter_TargetNextCivilian

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "ReadyOrNot_structs.hpp"
#include "ReadyOrNot_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass AIAction_ActiveShooter_TargetNextCivilian.AIAction_ActiveShooter_TargetNextCivilian_C
// 0x0038 (0x0090 - 0x0058)
class UAIAction_ActiveShooter_TargetNextCivilian_C final : public UAIAction
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0058(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ACyberneticCharacter*                   TargetingCivilian;                                 // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        TimeUntilNextTarget;                               // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ACyberneticCharacter*>           FailedCivilianPaths;                               // 0x0070(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	double                                        TimeUntilKill;                                     // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TimeUntilNextVO;                                   // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BeginAction_Blueprint();
	void EndAction_Blueprint();
	void ExecuteUbergraph_AIAction_ActiveShooter_TargetNextCivilian(int32 EntryPoint);
	void FindNextCivilian();
	void OnPathFound_Blueprint(int32 PathId, ERonNavigationQueryResult Result);
	void Tick_Blueprint(float DeltaTime);
	void TryScriptedFireAtCivilian();

	void CanTargetCivilian(class ACyberneticCharacter* InCivilian, bool* Return_Value) const;
	class FString GatherDebugInfo() const;
	void GetNextClosestAliveCivilian(class ACyberneticCharacter** civilian, bool* Return_Value) const;
	bool ShouldPerformAction() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AIAction_ActiveShooter_TargetNextCivilian_C">();
	}
	static class UAIAction_ActiveShooter_TargetNextCivilian_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAIAction_ActiveShooter_TargetNextCivilian_C>();
	}
};
static_assert(alignof(UAIAction_ActiveShooter_TargetNextCivilian_C) == 0x000008, "Wrong alignment on UAIAction_ActiveShooter_TargetNextCivilian_C");
static_assert(sizeof(UAIAction_ActiveShooter_TargetNextCivilian_C) == 0x000090, "Wrong size on UAIAction_ActiveShooter_TargetNextCivilian_C");
static_assert(offsetof(UAIAction_ActiveShooter_TargetNextCivilian_C, UberGraphFrame) == 0x000058, "Member 'UAIAction_ActiveShooter_TargetNextCivilian_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UAIAction_ActiveShooter_TargetNextCivilian_C, TargetingCivilian) == 0x000060, "Member 'UAIAction_ActiveShooter_TargetNextCivilian_C::TargetingCivilian' has a wrong offset!");
static_assert(offsetof(UAIAction_ActiveShooter_TargetNextCivilian_C, TimeUntilNextTarget) == 0x000068, "Member 'UAIAction_ActiveShooter_TargetNextCivilian_C::TimeUntilNextTarget' has a wrong offset!");
static_assert(offsetof(UAIAction_ActiveShooter_TargetNextCivilian_C, FailedCivilianPaths) == 0x000070, "Member 'UAIAction_ActiveShooter_TargetNextCivilian_C::FailedCivilianPaths' has a wrong offset!");
static_assert(offsetof(UAIAction_ActiveShooter_TargetNextCivilian_C, TimeUntilKill) == 0x000080, "Member 'UAIAction_ActiveShooter_TargetNextCivilian_C::TimeUntilKill' has a wrong offset!");
static_assert(offsetof(UAIAction_ActiveShooter_TargetNextCivilian_C, TimeUntilNextVO) == 0x000088, "Member 'UAIAction_ActiveShooter_TargetNextCivilian_C::TimeUntilNextVO' has a wrong offset!");

}

