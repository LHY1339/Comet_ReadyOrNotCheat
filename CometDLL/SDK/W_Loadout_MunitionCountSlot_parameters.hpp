#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_Loadout_MunitionCountSlot

#include "Basic.hpp"

#include "ReadyOrNot_structs.hpp"
#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function W_Loadout_MunitionCountSlot.W_Loadout_MunitionCountSlot_C.BackPage
// 0x0001 (0x0001 - 0x0000)
struct W_Loadout_MunitionCountSlot_C_BackPage final
{
public:
	bool                                          Handled;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Loadout_MunitionCountSlot_C_BackPage) == 0x000001, "Wrong alignment on W_Loadout_MunitionCountSlot_C_BackPage");
static_assert(sizeof(W_Loadout_MunitionCountSlot_C_BackPage) == 0x000001, "Wrong size on W_Loadout_MunitionCountSlot_C_BackPage");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_BackPage, Handled) == 0x000000, "Member 'W_Loadout_MunitionCountSlot_C_BackPage::Handled' has a wrong offset!");

// Function W_Loadout_MunitionCountSlot.W_Loadout_MunitionCountSlot_C.BndEvt__W_Loadout_ArmorSlot_btn_decrease_K2Node_ComponentBoundEvent_0_Clicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_Loadout_MunitionCountSlot_C_BndEvt__W_Loadout_ArmorSlot_btn_decrease_K2Node_ComponentBoundEvent_0_Clicked__DelegateSignature final
{
public:
	class UW_Button_C*                            Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Loadout_MunitionCountSlot_C_BndEvt__W_Loadout_ArmorSlot_btn_decrease_K2Node_ComponentBoundEvent_0_Clicked__DelegateSignature) == 0x000008, "Wrong alignment on W_Loadout_MunitionCountSlot_C_BndEvt__W_Loadout_ArmorSlot_btn_decrease_K2Node_ComponentBoundEvent_0_Clicked__DelegateSignature");
static_assert(sizeof(W_Loadout_MunitionCountSlot_C_BndEvt__W_Loadout_ArmorSlot_btn_decrease_K2Node_ComponentBoundEvent_0_Clicked__DelegateSignature) == 0x000008, "Wrong size on W_Loadout_MunitionCountSlot_C_BndEvt__W_Loadout_ArmorSlot_btn_decrease_K2Node_ComponentBoundEvent_0_Clicked__DelegateSignature");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_BndEvt__W_Loadout_ArmorSlot_btn_decrease_K2Node_ComponentBoundEvent_0_Clicked__DelegateSignature, Button) == 0x000000, "Member 'W_Loadout_MunitionCountSlot_C_BndEvt__W_Loadout_ArmorSlot_btn_decrease_K2Node_ComponentBoundEvent_0_Clicked__DelegateSignature::Button' has a wrong offset!");

// Function W_Loadout_MunitionCountSlot.W_Loadout_MunitionCountSlot_C.BndEvt__W_Loadout_ArmorSlot_btn_increase_K2Node_ComponentBoundEvent_1_Clicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_Loadout_MunitionCountSlot_C_BndEvt__W_Loadout_ArmorSlot_btn_increase_K2Node_ComponentBoundEvent_1_Clicked__DelegateSignature final
{
public:
	class UW_Button_C*                            Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Loadout_MunitionCountSlot_C_BndEvt__W_Loadout_ArmorSlot_btn_increase_K2Node_ComponentBoundEvent_1_Clicked__DelegateSignature) == 0x000008, "Wrong alignment on W_Loadout_MunitionCountSlot_C_BndEvt__W_Loadout_ArmorSlot_btn_increase_K2Node_ComponentBoundEvent_1_Clicked__DelegateSignature");
static_assert(sizeof(W_Loadout_MunitionCountSlot_C_BndEvt__W_Loadout_ArmorSlot_btn_increase_K2Node_ComponentBoundEvent_1_Clicked__DelegateSignature) == 0x000008, "Wrong size on W_Loadout_MunitionCountSlot_C_BndEvt__W_Loadout_ArmorSlot_btn_increase_K2Node_ComponentBoundEvent_1_Clicked__DelegateSignature");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_BndEvt__W_Loadout_ArmorSlot_btn_increase_K2Node_ComponentBoundEvent_1_Clicked__DelegateSignature, Button) == 0x000000, "Member 'W_Loadout_MunitionCountSlot_C_BndEvt__W_Loadout_ArmorSlot_btn_increase_K2Node_ComponentBoundEvent_1_Clicked__DelegateSignature::Button' has a wrong offset!");

// Function W_Loadout_MunitionCountSlot.W_Loadout_MunitionCountSlot_C.BndEvt__W_Loadout_ArmorSlot_SpinBox_SlotCount_K2Node_ComponentBoundEvent_3_OnSpinBoxValueCommittedEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct W_Loadout_MunitionCountSlot_C_BndEvt__W_Loadout_ArmorSlot_SpinBox_SlotCount_K2Node_ComponentBoundEvent_3_OnSpinBoxValueCommittedEvent__DelegateSignature final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETextCommit                                   CommitMethod;                                      // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Loadout_MunitionCountSlot_C_BndEvt__W_Loadout_ArmorSlot_SpinBox_SlotCount_K2Node_ComponentBoundEvent_3_OnSpinBoxValueCommittedEvent__DelegateSignature) == 0x000004, "Wrong alignment on W_Loadout_MunitionCountSlot_C_BndEvt__W_Loadout_ArmorSlot_SpinBox_SlotCount_K2Node_ComponentBoundEvent_3_OnSpinBoxValueCommittedEvent__DelegateSignature");
static_assert(sizeof(W_Loadout_MunitionCountSlot_C_BndEvt__W_Loadout_ArmorSlot_SpinBox_SlotCount_K2Node_ComponentBoundEvent_3_OnSpinBoxValueCommittedEvent__DelegateSignature) == 0x000008, "Wrong size on W_Loadout_MunitionCountSlot_C_BndEvt__W_Loadout_ArmorSlot_SpinBox_SlotCount_K2Node_ComponentBoundEvent_3_OnSpinBoxValueCommittedEvent__DelegateSignature");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_BndEvt__W_Loadout_ArmorSlot_SpinBox_SlotCount_K2Node_ComponentBoundEvent_3_OnSpinBoxValueCommittedEvent__DelegateSignature, InValue) == 0x000000, "Member 'W_Loadout_MunitionCountSlot_C_BndEvt__W_Loadout_ArmorSlot_SpinBox_SlotCount_K2Node_ComponentBoundEvent_3_OnSpinBoxValueCommittedEvent__DelegateSignature::InValue' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_BndEvt__W_Loadout_ArmorSlot_SpinBox_SlotCount_K2Node_ComponentBoundEvent_3_OnSpinBoxValueCommittedEvent__DelegateSignature, CommitMethod) == 0x000004, "Member 'W_Loadout_MunitionCountSlot_C_BndEvt__W_Loadout_ArmorSlot_SpinBox_SlotCount_K2Node_ComponentBoundEvent_3_OnSpinBoxValueCommittedEvent__DelegateSignature::CommitMethod' has a wrong offset!");

// Function W_Loadout_MunitionCountSlot.W_Loadout_MunitionCountSlot_C.ChangePage
// 0x0008 (0x0008 - 0x0000)
struct W_Loadout_MunitionCountSlot_C_ChangePage final
{
public:
	class FName                                   PageName;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Loadout_MunitionCountSlot_C_ChangePage) == 0x000004, "Wrong alignment on W_Loadout_MunitionCountSlot_C_ChangePage");
static_assert(sizeof(W_Loadout_MunitionCountSlot_C_ChangePage) == 0x000008, "Wrong size on W_Loadout_MunitionCountSlot_C_ChangePage");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_ChangePage, PageName) == 0x000000, "Member 'W_Loadout_MunitionCountSlot_C_ChangePage::PageName' has a wrong offset!");

// Function W_Loadout_MunitionCountSlot.W_Loadout_MunitionCountSlot_C.ExecuteUbergraph_W_Loadout_MunitionCountSlot
// 0x03D0 (0x03D0 - 0x0000)
struct W_Loadout_MunitionCountSlot_C_ExecuteUbergraph_W_Loadout_MunitionCountSlot final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EItemCategory, class UClass*>            K2Node_Event_ItemCategory;                         // 0x0008(0x0050)()
	class UW_Loadout_C*                           K2Node_Event_LoadoutWidget;                        // 0x0058(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Event_OptionNameID;                         // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_Button_C*                            K2Node_ComponentBoundEvent_Button_1;               // 0x0070(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UW_Button_C*                            K2Node_ComponentBoundEvent_Button;                 // 0x0078(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_ComponentBoundEvent_InValue;                // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETextCommit                                   K2Node_ComponentBoundEvent_CommitMethod;           // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_Delay_1;                              // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_92[0x2];                                       // 0x0092(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_Delay;                                // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Collapse;                             // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue;         // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsGamepad;                            // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UW_LoadoutSlot_C*                       K2Node_Event_CurrentSlot;                          // 0x00C8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FSavedLoadout                          K2Node_Event_ActiveLoadout;                        // 0x00D0(0x02E8)()
	class FName                                   K2Node_Event_PageName;                             // 0x03B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FTrunc_A_ImplicitCast;                    // 0x03C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Delay_Duration_ImplicitCast;              // 0x03C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Delay_Duration_ImplicitCast_1;            // 0x03CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Loadout_MunitionCountSlot_C_ExecuteUbergraph_W_Loadout_MunitionCountSlot) == 0x000008, "Wrong alignment on W_Loadout_MunitionCountSlot_C_ExecuteUbergraph_W_Loadout_MunitionCountSlot");
static_assert(sizeof(W_Loadout_MunitionCountSlot_C_ExecuteUbergraph_W_Loadout_MunitionCountSlot) == 0x0003D0, "Wrong size on W_Loadout_MunitionCountSlot_C_ExecuteUbergraph_W_Loadout_MunitionCountSlot");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_ExecuteUbergraph_W_Loadout_MunitionCountSlot, EntryPoint) == 0x000000, "Member 'W_Loadout_MunitionCountSlot_C_ExecuteUbergraph_W_Loadout_MunitionCountSlot::EntryPoint' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_ExecuteUbergraph_W_Loadout_MunitionCountSlot, K2Node_Event_ItemCategory) == 0x000008, "Member 'W_Loadout_MunitionCountSlot_C_ExecuteUbergraph_W_Loadout_MunitionCountSlot::K2Node_Event_ItemCategory' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_ExecuteUbergraph_W_Loadout_MunitionCountSlot, K2Node_Event_LoadoutWidget) == 0x000058, "Member 'W_Loadout_MunitionCountSlot_C_ExecuteUbergraph_W_Loadout_MunitionCountSlot::K2Node_Event_LoadoutWidget' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_ExecuteUbergraph_W_Loadout_MunitionCountSlot, K2Node_Event_OptionNameID) == 0x000060, "Member 'W_Loadout_MunitionCountSlot_C_ExecuteUbergraph_W_Loadout_MunitionCountSlot::K2Node_Event_OptionNameID' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_ExecuteUbergraph_W_Loadout_MunitionCountSlot, K2Node_Event_IsDesignTime) == 0x000068, "Member 'W_Loadout_MunitionCountSlot_C_ExecuteUbergraph_W_Loadout_MunitionCountSlot::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_ExecuteUbergraph_W_Loadout_MunitionCountSlot, K2Node_ComponentBoundEvent_Button_1) == 0x000070, "Member 'W_Loadout_MunitionCountSlot_C_ExecuteUbergraph_W_Loadout_MunitionCountSlot::K2Node_ComponentBoundEvent_Button_1' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_ExecuteUbergraph_W_Loadout_MunitionCountSlot, K2Node_ComponentBoundEvent_Button) == 0x000078, "Member 'W_Loadout_MunitionCountSlot_C_ExecuteUbergraph_W_Loadout_MunitionCountSlot::K2Node_ComponentBoundEvent_Button' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_ExecuteUbergraph_W_Loadout_MunitionCountSlot, K2Node_ComponentBoundEvent_InValue) == 0x000080, "Member 'W_Loadout_MunitionCountSlot_C_ExecuteUbergraph_W_Loadout_MunitionCountSlot::K2Node_ComponentBoundEvent_InValue' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_ExecuteUbergraph_W_Loadout_MunitionCountSlot, K2Node_ComponentBoundEvent_CommitMethod) == 0x000084, "Member 'W_Loadout_MunitionCountSlot_C_ExecuteUbergraph_W_Loadout_MunitionCountSlot::K2Node_ComponentBoundEvent_CommitMethod' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_ExecuteUbergraph_W_Loadout_MunitionCountSlot, K2Node_Event_Delay_1) == 0x000088, "Member 'W_Loadout_MunitionCountSlot_C_ExecuteUbergraph_W_Loadout_MunitionCountSlot::K2Node_Event_Delay_1' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_ExecuteUbergraph_W_Loadout_MunitionCountSlot, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000090, "Member 'W_Loadout_MunitionCountSlot_C_ExecuteUbergraph_W_Loadout_MunitionCountSlot::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_ExecuteUbergraph_W_Loadout_MunitionCountSlot, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000091, "Member 'W_Loadout_MunitionCountSlot_C_ExecuteUbergraph_W_Loadout_MunitionCountSlot::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_ExecuteUbergraph_W_Loadout_MunitionCountSlot, CallFunc_FTrunc_ReturnValue) == 0x000094, "Member 'W_Loadout_MunitionCountSlot_C_ExecuteUbergraph_W_Loadout_MunitionCountSlot::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_ExecuteUbergraph_W_Loadout_MunitionCountSlot, CallFunc_BooleanOR_ReturnValue) == 0x000098, "Member 'W_Loadout_MunitionCountSlot_C_ExecuteUbergraph_W_Loadout_MunitionCountSlot::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_ExecuteUbergraph_W_Loadout_MunitionCountSlot, K2Node_Event_Delay) == 0x0000A0, "Member 'W_Loadout_MunitionCountSlot_C_ExecuteUbergraph_W_Loadout_MunitionCountSlot::K2Node_Event_Delay' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_ExecuteUbergraph_W_Loadout_MunitionCountSlot, K2Node_Event_Collapse) == 0x0000A8, "Member 'W_Loadout_MunitionCountSlot_C_ExecuteUbergraph_W_Loadout_MunitionCountSlot::K2Node_Event_Collapse' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_ExecuteUbergraph_W_Loadout_MunitionCountSlot, CallFunc_PlayAnimationReverse_ReturnValue) == 0x0000B0, "Member 'W_Loadout_MunitionCountSlot_C_ExecuteUbergraph_W_Loadout_MunitionCountSlot::CallFunc_PlayAnimationReverse_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_ExecuteUbergraph_W_Loadout_MunitionCountSlot, CallFunc_PlayAnimationForward_ReturnValue) == 0x0000B8, "Member 'W_Loadout_MunitionCountSlot_C_ExecuteUbergraph_W_Loadout_MunitionCountSlot::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_ExecuteUbergraph_W_Loadout_MunitionCountSlot, K2Node_Event_IsGamepad) == 0x0000C0, "Member 'W_Loadout_MunitionCountSlot_C_ExecuteUbergraph_W_Loadout_MunitionCountSlot::K2Node_Event_IsGamepad' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_ExecuteUbergraph_W_Loadout_MunitionCountSlot, K2Node_Event_CurrentSlot) == 0x0000C8, "Member 'W_Loadout_MunitionCountSlot_C_ExecuteUbergraph_W_Loadout_MunitionCountSlot::K2Node_Event_CurrentSlot' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_ExecuteUbergraph_W_Loadout_MunitionCountSlot, K2Node_Event_ActiveLoadout) == 0x0000D0, "Member 'W_Loadout_MunitionCountSlot_C_ExecuteUbergraph_W_Loadout_MunitionCountSlot::K2Node_Event_ActiveLoadout' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_ExecuteUbergraph_W_Loadout_MunitionCountSlot, K2Node_Event_PageName) == 0x0003B8, "Member 'W_Loadout_MunitionCountSlot_C_ExecuteUbergraph_W_Loadout_MunitionCountSlot::K2Node_Event_PageName' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_ExecuteUbergraph_W_Loadout_MunitionCountSlot, CallFunc_FTrunc_A_ImplicitCast) == 0x0003C0, "Member 'W_Loadout_MunitionCountSlot_C_ExecuteUbergraph_W_Loadout_MunitionCountSlot::CallFunc_FTrunc_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_ExecuteUbergraph_W_Loadout_MunitionCountSlot, CallFunc_Delay_Duration_ImplicitCast) == 0x0003C8, "Member 'W_Loadout_MunitionCountSlot_C_ExecuteUbergraph_W_Loadout_MunitionCountSlot::CallFunc_Delay_Duration_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_ExecuteUbergraph_W_Loadout_MunitionCountSlot, CallFunc_Delay_Duration_ImplicitCast_1) == 0x0003CC, "Member 'W_Loadout_MunitionCountSlot_C_ExecuteUbergraph_W_Loadout_MunitionCountSlot::CallFunc_Delay_Duration_ImplicitCast_1' has a wrong offset!");

// Function W_Loadout_MunitionCountSlot.W_Loadout_MunitionCountSlot_C.HeaderSubpageNavigation
// 0x0008 (0x0008 - 0x0000)
struct W_Loadout_MunitionCountSlot_C_HeaderSubpageNavigation final
{
public:
	class FName                                   OptionNameID;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Loadout_MunitionCountSlot_C_HeaderSubpageNavigation) == 0x000004, "Wrong alignment on W_Loadout_MunitionCountSlot_C_HeaderSubpageNavigation");
static_assert(sizeof(W_Loadout_MunitionCountSlot_C_HeaderSubpageNavigation) == 0x000008, "Wrong size on W_Loadout_MunitionCountSlot_C_HeaderSubpageNavigation");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_HeaderSubpageNavigation, OptionNameID) == 0x000000, "Member 'W_Loadout_MunitionCountSlot_C_HeaderSubpageNavigation::OptionNameID' has a wrong offset!");

// Function W_Loadout_MunitionCountSlot.W_Loadout_MunitionCountSlot_C.Hide
// 0x0010 (0x0010 - 0x0000)
struct W_Loadout_MunitionCountSlot_C_Hide final
{
public:
	double                                        Delay;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Collapse;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Loadout_MunitionCountSlot_C_Hide) == 0x000008, "Wrong alignment on W_Loadout_MunitionCountSlot_C_Hide");
static_assert(sizeof(W_Loadout_MunitionCountSlot_C_Hide) == 0x000010, "Wrong size on W_Loadout_MunitionCountSlot_C_Hide");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_Hide, Delay) == 0x000000, "Member 'W_Loadout_MunitionCountSlot_C_Hide::Delay' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_Hide, Collapse) == 0x000008, "Member 'W_Loadout_MunitionCountSlot_C_Hide::Collapse' has a wrong offset!");

// Function W_Loadout_MunitionCountSlot.W_Loadout_MunitionCountSlot_C.IncrementSlotCount
// 0x0024 (0x0024 - 0x0000)
struct W_Loadout_MunitionCountSlot_C_IncrementSlotCount final
{
public:
	int32                                         Increment;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Abs_Int_ReturnValue;                      // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_1;        // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Loadout_MunitionCountSlot_C_IncrementSlotCount) == 0x000004, "Wrong alignment on W_Loadout_MunitionCountSlot_C_IncrementSlotCount");
static_assert(sizeof(W_Loadout_MunitionCountSlot_C_IncrementSlotCount) == 0x000024, "Wrong size on W_Loadout_MunitionCountSlot_C_IncrementSlotCount");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_IncrementSlotCount, Increment) == 0x000000, "Member 'W_Loadout_MunitionCountSlot_C_IncrementSlotCount::Increment' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_IncrementSlotCount, CallFunc_Abs_Int_ReturnValue) == 0x000004, "Member 'W_Loadout_MunitionCountSlot_C_IncrementSlotCount::CallFunc_Abs_Int_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_IncrementSlotCount, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000008, "Member 'W_Loadout_MunitionCountSlot_C_IncrementSlotCount::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_IncrementSlotCount, CallFunc_Greater_IntInt_ReturnValue) == 0x000009, "Member 'W_Loadout_MunitionCountSlot_C_IncrementSlotCount::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_IncrementSlotCount, CallFunc_Subtract_IntInt_ReturnValue) == 0x00000C, "Member 'W_Loadout_MunitionCountSlot_C_IncrementSlotCount::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_IncrementSlotCount, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000010, "Member 'W_Loadout_MunitionCountSlot_C_IncrementSlotCount::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_IncrementSlotCount, CallFunc_GreaterEqual_IntInt_ReturnValue_1) == 0x000014, "Member 'W_Loadout_MunitionCountSlot_C_IncrementSlotCount::CallFunc_GreaterEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_IncrementSlotCount, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'W_Loadout_MunitionCountSlot_C_IncrementSlotCount::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_IncrementSlotCount, CallFunc_Add_IntInt_ReturnValue_1) == 0x00001C, "Member 'W_Loadout_MunitionCountSlot_C_IncrementSlotCount::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_IncrementSlotCount, CallFunc_Add_IntInt_ReturnValue_2) == 0x000020, "Member 'W_Loadout_MunitionCountSlot_C_IncrementSlotCount::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");

// Function W_Loadout_MunitionCountSlot.W_Loadout_MunitionCountSlot_C.Initialize
// 0x0010 (0x0010 - 0x0000)
struct W_Loadout_MunitionCountSlot_C_Initialize final
{
public:
	int32                                         CurrentSlotCount;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AvailableSlots_0;                                  // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MinSlots_0;                                        // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxSlots_0;                                        // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Loadout_MunitionCountSlot_C_Initialize) == 0x000004, "Wrong alignment on W_Loadout_MunitionCountSlot_C_Initialize");
static_assert(sizeof(W_Loadout_MunitionCountSlot_C_Initialize) == 0x000010, "Wrong size on W_Loadout_MunitionCountSlot_C_Initialize");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_Initialize, CurrentSlotCount) == 0x000000, "Member 'W_Loadout_MunitionCountSlot_C_Initialize::CurrentSlotCount' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_Initialize, AvailableSlots_0) == 0x000004, "Member 'W_Loadout_MunitionCountSlot_C_Initialize::AvailableSlots_0' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_Initialize, MinSlots_0) == 0x000008, "Member 'W_Loadout_MunitionCountSlot_C_Initialize::MinSlots_0' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_Initialize, MaxSlots_0) == 0x00000C, "Member 'W_Loadout_MunitionCountSlot_C_Initialize::MaxSlots_0' has a wrong offset!");

// Function W_Loadout_MunitionCountSlot.W_Loadout_MunitionCountSlot_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct W_Loadout_MunitionCountSlot_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Loadout_MunitionCountSlot_C_PreConstruct) == 0x000001, "Wrong alignment on W_Loadout_MunitionCountSlot_C_PreConstruct");
static_assert(sizeof(W_Loadout_MunitionCountSlot_C_PreConstruct) == 0x000001, "Wrong size on W_Loadout_MunitionCountSlot_C_PreConstruct");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'W_Loadout_MunitionCountSlot_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function W_Loadout_MunitionCountSlot.W_Loadout_MunitionCountSlot_C.Reveal
// 0x0008 (0x0008 - 0x0000)
struct W_Loadout_MunitionCountSlot_C_Reveal final
{
public:
	double                                        Delay;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Loadout_MunitionCountSlot_C_Reveal) == 0x000008, "Wrong alignment on W_Loadout_MunitionCountSlot_C_Reveal");
static_assert(sizeof(W_Loadout_MunitionCountSlot_C_Reveal) == 0x000008, "Wrong size on W_Loadout_MunitionCountSlot_C_Reveal");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_Reveal, Delay) == 0x000000, "Member 'W_Loadout_MunitionCountSlot_C_Reveal::Delay' has a wrong offset!");

// Function W_Loadout_MunitionCountSlot.W_Loadout_MunitionCountSlot_C.SetAvailableSlots
// 0x001C (0x001C - 0x0000)
struct W_Loadout_MunitionCountSlot_C_SetAvailableSlots final
{
public:
	int32                                         AvailableSlots_0;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Loadout_MunitionCountSlot_C_SetAvailableSlots) == 0x000004, "Wrong alignment on W_Loadout_MunitionCountSlot_C_SetAvailableSlots");
static_assert(sizeof(W_Loadout_MunitionCountSlot_C_SetAvailableSlots) == 0x00001C, "Wrong size on W_Loadout_MunitionCountSlot_C_SetAvailableSlots");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_SetAvailableSlots, AvailableSlots_0) == 0x000000, "Member 'W_Loadout_MunitionCountSlot_C_SetAvailableSlots::AvailableSlots_0' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_SetAvailableSlots, CallFunc_Add_IntInt_ReturnValue) == 0x000004, "Member 'W_Loadout_MunitionCountSlot_C_SetAvailableSlots::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_SetAvailableSlots, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000008, "Member 'W_Loadout_MunitionCountSlot_C_SetAvailableSlots::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_SetAvailableSlots, CallFunc_Subtract_IntInt_ReturnValue) == 0x00000C, "Member 'W_Loadout_MunitionCountSlot_C_SetAvailableSlots::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_SetAvailableSlots, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000010, "Member 'W_Loadout_MunitionCountSlot_C_SetAvailableSlots::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_SetAvailableSlots, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000014, "Member 'W_Loadout_MunitionCountSlot_C_SetAvailableSlots::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_SetAvailableSlots, CallFunc_BooleanOR_ReturnValue) == 0x000018, "Member 'W_Loadout_MunitionCountSlot_C_SetAvailableSlots::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_SetAvailableSlots, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000019, "Member 'W_Loadout_MunitionCountSlot_C_SetAvailableSlots::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");

// Function W_Loadout_MunitionCountSlot.W_Loadout_MunitionCountSlot_C.SetInfo
// 0x0068 (0x0068 - 0x0000)
struct W_Loadout_MunitionCountSlot_C_SetInfo final
{
public:
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_2;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_2;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_3;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_4;           // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetMinValue_NewValue_ImplicitCast;        // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetMaxValue_NewValue_ImplicitCast;        // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetValue_NewValue_ImplicitCast;           // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetValue_NewValue_ImplicitCast_1;         // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetMaxValue_NewValue_ImplicitCast_1;      // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Loadout_MunitionCountSlot_C_SetInfo) == 0x000008, "Wrong alignment on W_Loadout_MunitionCountSlot_C_SetInfo");
static_assert(sizeof(W_Loadout_MunitionCountSlot_C_SetInfo) == 0x000068, "Wrong size on W_Loadout_MunitionCountSlot_C_SetInfo");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_SetInfo, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000000, "Member 'W_Loadout_MunitionCountSlot_C_SetInfo::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_SetInfo, CallFunc_Greater_IntInt_ReturnValue) == 0x000008, "Member 'W_Loadout_MunitionCountSlot_C_SetInfo::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_SetInfo, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000009, "Member 'W_Loadout_MunitionCountSlot_C_SetInfo::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_SetInfo, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x00000A, "Member 'W_Loadout_MunitionCountSlot_C_SetInfo::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_SetInfo, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'W_Loadout_MunitionCountSlot_C_SetInfo::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_SetInfo, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x000010, "Member 'W_Loadout_MunitionCountSlot_C_SetInfo::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_SetInfo, CallFunc_Conv_IntToDouble_ReturnValue_2) == 0x000018, "Member 'W_Loadout_MunitionCountSlot_C_SetInfo::CallFunc_Conv_IntToDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_SetInfo, CallFunc_EqualEqual_IntInt_ReturnValue_2) == 0x000020, "Member 'W_Loadout_MunitionCountSlot_C_SetInfo::CallFunc_EqualEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_SetInfo, CallFunc_Conv_IntToDouble_ReturnValue_3) == 0x000028, "Member 'W_Loadout_MunitionCountSlot_C_SetInfo::CallFunc_Conv_IntToDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_SetInfo, CallFunc_BooleanOR_ReturnValue) == 0x000030, "Member 'W_Loadout_MunitionCountSlot_C_SetInfo::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_SetInfo, CallFunc_Not_PreBool_ReturnValue) == 0x000031, "Member 'W_Loadout_MunitionCountSlot_C_SetInfo::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_SetInfo, CallFunc_Subtract_IntInt_ReturnValue) == 0x000034, "Member 'W_Loadout_MunitionCountSlot_C_SetInfo::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_SetInfo, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000038, "Member 'W_Loadout_MunitionCountSlot_C_SetInfo::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_SetInfo, CallFunc_Add_IntInt_ReturnValue_1) == 0x00003C, "Member 'W_Loadout_MunitionCountSlot_C_SetInfo::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_SetInfo, CallFunc_BooleanOR_ReturnValue_1) == 0x000040, "Member 'W_Loadout_MunitionCountSlot_C_SetInfo::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_SetInfo, CallFunc_Conv_IntToDouble_ReturnValue_4) == 0x000048, "Member 'W_Loadout_MunitionCountSlot_C_SetInfo::CallFunc_Conv_IntToDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_SetInfo, CallFunc_SetMinValue_NewValue_ImplicitCast) == 0x000050, "Member 'W_Loadout_MunitionCountSlot_C_SetInfo::CallFunc_SetMinValue_NewValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_SetInfo, CallFunc_SetMaxValue_NewValue_ImplicitCast) == 0x000054, "Member 'W_Loadout_MunitionCountSlot_C_SetInfo::CallFunc_SetMaxValue_NewValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_SetInfo, CallFunc_SetValue_NewValue_ImplicitCast) == 0x000058, "Member 'W_Loadout_MunitionCountSlot_C_SetInfo::CallFunc_SetValue_NewValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_SetInfo, CallFunc_SetValue_NewValue_ImplicitCast_1) == 0x00005C, "Member 'W_Loadout_MunitionCountSlot_C_SetInfo::CallFunc_SetValue_NewValue_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_SetInfo, CallFunc_SetMaxValue_NewValue_ImplicitCast_1) == 0x000060, "Member 'W_Loadout_MunitionCountSlot_C_SetInfo::CallFunc_SetMaxValue_NewValue_ImplicitCast_1' has a wrong offset!");

// Function W_Loadout_MunitionCountSlot.W_Loadout_MunitionCountSlot_C.SetInputMode
// 0x0001 (0x0001 - 0x0000)
struct W_Loadout_MunitionCountSlot_C_SetInputMode final
{
public:
	bool                                          IsGamepad;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Loadout_MunitionCountSlot_C_SetInputMode) == 0x000001, "Wrong alignment on W_Loadout_MunitionCountSlot_C_SetInputMode");
static_assert(sizeof(W_Loadout_MunitionCountSlot_C_SetInputMode) == 0x000001, "Wrong size on W_Loadout_MunitionCountSlot_C_SetInputMode");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_SetInputMode, IsGamepad) == 0x000000, "Member 'W_Loadout_MunitionCountSlot_C_SetInputMode::IsGamepad' has a wrong offset!");

// Function W_Loadout_MunitionCountSlot.W_Loadout_MunitionCountSlot_C.SetLoadoutWidget
// 0x0008 (0x0008 - 0x0000)
struct W_Loadout_MunitionCountSlot_C_SetLoadoutWidget final
{
public:
	class UW_Loadout_C*                           LoadoutWidget;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Loadout_MunitionCountSlot_C_SetLoadoutWidget) == 0x000008, "Wrong alignment on W_Loadout_MunitionCountSlot_C_SetLoadoutWidget");
static_assert(sizeof(W_Loadout_MunitionCountSlot_C_SetLoadoutWidget) == 0x000008, "Wrong size on W_Loadout_MunitionCountSlot_C_SetLoadoutWidget");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_SetLoadoutWidget, LoadoutWidget) == 0x000000, "Member 'W_Loadout_MunitionCountSlot_C_SetLoadoutWidget::LoadoutWidget' has a wrong offset!");

// Function W_Loadout_MunitionCountSlot.W_Loadout_MunitionCountSlot_C.SetMaxSlots
// 0x0008 (0x0008 - 0x0000)
struct W_Loadout_MunitionCountSlot_C_SetMaxSlots final
{
public:
	int32                                         MaxSlotCount;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Loadout_MunitionCountSlot_C_SetMaxSlots) == 0x000004, "Wrong alignment on W_Loadout_MunitionCountSlot_C_SetMaxSlots");
static_assert(sizeof(W_Loadout_MunitionCountSlot_C_SetMaxSlots) == 0x000008, "Wrong size on W_Loadout_MunitionCountSlot_C_SetMaxSlots");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_SetMaxSlots, MaxSlotCount) == 0x000000, "Member 'W_Loadout_MunitionCountSlot_C_SetMaxSlots::MaxSlotCount' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_SetMaxSlots, CallFunc_Greater_IntInt_ReturnValue) == 0x000004, "Member 'W_Loadout_MunitionCountSlot_C_SetMaxSlots::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");

// Function W_Loadout_MunitionCountSlot.W_Loadout_MunitionCountSlot_C.SetSlotCount
// 0x0048 (0x0048 - 0x0000)
struct W_Loadout_MunitionCountSlot_C_SetSlotCount final
{
public:
	int32                                         NewCount;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_2;          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SetValue_NewValue_ImplicitCast;           // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetValue_NewValue_ImplicitCast_1;         // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Loadout_MunitionCountSlot_C_SetSlotCount) == 0x000008, "Wrong alignment on W_Loadout_MunitionCountSlot_C_SetSlotCount");
static_assert(sizeof(W_Loadout_MunitionCountSlot_C_SetSlotCount) == 0x000048, "Wrong size on W_Loadout_MunitionCountSlot_C_SetSlotCount");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_SetSlotCount, NewCount) == 0x000000, "Member 'W_Loadout_MunitionCountSlot_C_SetSlotCount::NewCount' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_SetSlotCount, Temp_byte_Variable) == 0x000004, "Member 'W_Loadout_MunitionCountSlot_C_SetSlotCount::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_SetSlotCount, Temp_byte_Variable_1) == 0x000005, "Member 'W_Loadout_MunitionCountSlot_C_SetSlotCount::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_SetSlotCount, Temp_bool_Variable) == 0x000006, "Member 'W_Loadout_MunitionCountSlot_C_SetSlotCount::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_SetSlotCount, Temp_byte_Variable_2) == 0x000007, "Member 'W_Loadout_MunitionCountSlot_C_SetSlotCount::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_SetSlotCount, Temp_byte_Variable_3) == 0x000008, "Member 'W_Loadout_MunitionCountSlot_C_SetSlotCount::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_SetSlotCount, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000009, "Member 'W_Loadout_MunitionCountSlot_C_SetSlotCount::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_SetSlotCount, CallFunc_Subtract_IntInt_ReturnValue) == 0x00000C, "Member 'W_Loadout_MunitionCountSlot_C_SetSlotCount::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_SetSlotCount, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000010, "Member 'W_Loadout_MunitionCountSlot_C_SetSlotCount::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_SetSlotCount, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'W_Loadout_MunitionCountSlot_C_SetSlotCount::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_SetSlotCount, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000018, "Member 'W_Loadout_MunitionCountSlot_C_SetSlotCount::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_SetSlotCount, CallFunc_BooleanOR_ReturnValue) == 0x000019, "Member 'W_Loadout_MunitionCountSlot_C_SetSlotCount::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_SetSlotCount, Temp_bool_Variable_1) == 0x00001A, "Member 'W_Loadout_MunitionCountSlot_C_SetSlotCount::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_SetSlotCount, K2Node_Select_Default) == 0x00001B, "Member 'W_Loadout_MunitionCountSlot_C_SetSlotCount::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_SetSlotCount, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000020, "Member 'W_Loadout_MunitionCountSlot_C_SetSlotCount::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_SetSlotCount, CallFunc_EqualEqual_IntInt_ReturnValue_2) == 0x000028, "Member 'W_Loadout_MunitionCountSlot_C_SetSlotCount::CallFunc_EqualEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_SetSlotCount, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x000030, "Member 'W_Loadout_MunitionCountSlot_C_SetSlotCount::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_SetSlotCount, K2Node_Select_Default_1) == 0x000038, "Member 'W_Loadout_MunitionCountSlot_C_SetSlotCount::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_SetSlotCount, CallFunc_SetValue_NewValue_ImplicitCast) == 0x00003C, "Member 'W_Loadout_MunitionCountSlot_C_SetSlotCount::CallFunc_SetValue_NewValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_SetSlotCount, CallFunc_SetValue_NewValue_ImplicitCast_1) == 0x000040, "Member 'W_Loadout_MunitionCountSlot_C_SetSlotCount::CallFunc_SetValue_NewValue_ImplicitCast_1' has a wrong offset!");

// Function W_Loadout_MunitionCountSlot.W_Loadout_MunitionCountSlot_C.UpdateActiveLoadout
// 0x02E8 (0x02E8 - 0x0000)
struct W_Loadout_MunitionCountSlot_C_UpdateActiveLoadout final
{
public:
	struct FSavedLoadout                          ActiveLoadout;                                     // 0x0000(0x02E8)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(W_Loadout_MunitionCountSlot_C_UpdateActiveLoadout) == 0x000008, "Wrong alignment on W_Loadout_MunitionCountSlot_C_UpdateActiveLoadout");
static_assert(sizeof(W_Loadout_MunitionCountSlot_C_UpdateActiveLoadout) == 0x0002E8, "Wrong size on W_Loadout_MunitionCountSlot_C_UpdateActiveLoadout");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_UpdateActiveLoadout, ActiveLoadout) == 0x000000, "Member 'W_Loadout_MunitionCountSlot_C_UpdateActiveLoadout::ActiveLoadout' has a wrong offset!");

// Function W_Loadout_MunitionCountSlot.W_Loadout_MunitionCountSlot_C.UpdateCurrentItemMap
// 0x0050 (0x0050 - 0x0000)
struct W_Loadout_MunitionCountSlot_C_UpdateCurrentItemMap final
{
public:
	TMap<EItemCategory, class UClass*>            ItemCategory;                                      // 0x0000(0x0050)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(W_Loadout_MunitionCountSlot_C_UpdateCurrentItemMap) == 0x000008, "Wrong alignment on W_Loadout_MunitionCountSlot_C_UpdateCurrentItemMap");
static_assert(sizeof(W_Loadout_MunitionCountSlot_C_UpdateCurrentItemMap) == 0x000050, "Wrong size on W_Loadout_MunitionCountSlot_C_UpdateCurrentItemMap");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_UpdateCurrentItemMap, ItemCategory) == 0x000000, "Member 'W_Loadout_MunitionCountSlot_C_UpdateCurrentItemMap::ItemCategory' has a wrong offset!");

// Function W_Loadout_MunitionCountSlot.W_Loadout_MunitionCountSlot_C.UpdateCurrentSlot
// 0x0008 (0x0008 - 0x0000)
struct W_Loadout_MunitionCountSlot_C_UpdateCurrentSlot final
{
public:
	class UW_LoadoutSlot_C*                       CurrentSlot;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Loadout_MunitionCountSlot_C_UpdateCurrentSlot) == 0x000008, "Wrong alignment on W_Loadout_MunitionCountSlot_C_UpdateCurrentSlot");
static_assert(sizeof(W_Loadout_MunitionCountSlot_C_UpdateCurrentSlot) == 0x000008, "Wrong size on W_Loadout_MunitionCountSlot_C_UpdateCurrentSlot");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_UpdateCurrentSlot, CurrentSlot) == 0x000000, "Member 'W_Loadout_MunitionCountSlot_C_UpdateCurrentSlot::CurrentSlot' has a wrong offset!");

// Function W_Loadout_MunitionCountSlot.W_Loadout_MunitionCountSlot_C.GetFocusTarget
// 0x0008 (0x0008 - 0x0000)
struct W_Loadout_MunitionCountSlot_C_GetFocusTarget final
{
public:
	class UWidget*                                Focus;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(W_Loadout_MunitionCountSlot_C_GetFocusTarget) == 0x000008, "Wrong alignment on W_Loadout_MunitionCountSlot_C_GetFocusTarget");
static_assert(sizeof(W_Loadout_MunitionCountSlot_C_GetFocusTarget) == 0x000008, "Wrong size on W_Loadout_MunitionCountSlot_C_GetFocusTarget");
static_assert(offsetof(W_Loadout_MunitionCountSlot_C_GetFocusTarget, Focus) == 0x000000, "Member 'W_Loadout_MunitionCountSlot_C_GetFocusTarget::Focus' has a wrong offset!");

}

