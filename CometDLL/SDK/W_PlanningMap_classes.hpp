#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_PlanningMap

#include "Basic.hpp"

#include "UMG_classes.hpp"
#include "ReadyOrNot_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_PlanningMap.W_PlanningMap_C
// 0x0948 (0x0C08 - 0x02C0)
class UW_PlanningMap_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UButton*                                MapInteraction;                                    // 0x02C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           RootCanvas;                                        // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_PlanningMap_BreachPoint_Info_C*      SpawnDetailsPanel;                                 // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           VB_FloorButtons;                                   // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_2DMap_C*                             W_2DMap;                                           // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FLevelDataLookupTable                  LevelData;                                         // 0x02F0(0x0818)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FLevelFloorData>                MapFloors;                                         // 0x0B08(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void(bool Pressed, const struct FVector2D& CursorPos)> PanMap;          // 0x0B18(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class UTexture2D* LayoutTexture)> UpdateMapMaterial;               // 0x0B28(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          Pressed;                                           // 0x0B38(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B39[0x7];                                      // 0x0B39(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              MouseDelta;                                        // 0x0B40(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              NewEventDispatcher_0;                              // 0x0B50(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<class UBP_UI_PlanningMap_SpawnPoint_C*> SpawnPointComponents;                             // 0x0B60(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class ABP_UI_PlanningMap_C*                   PlanningMapActor;                                  // 0x0B70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	TArray<class UW_Button_C*>                    FloorButtons;                                      // 0x0B78(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	int32                                         CurrentFloor;                                      // 0x0B88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B8C[0x4];                                      // 0x0B8C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class UBP_UI_PlanningMap_SpawnPoint_C*, class UW_PlanningMap_BreachPoint_C*> SpawnPoints;   // 0x0B90(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UW_PlanningMap_BreachPoint_C*           SelectedPoint;                                     // 0x0BE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              DetailPanelOffset;                                 // 0x0BE8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HeightCheck;                                       // 0x0BF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WidthCheck;                                        // 0x0C00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__Button_115_K2Node_ComponentBoundEvent_0_OnButtonPressedEvent__DelegateSignature();
	void BndEvt__MapInteraction_K2Node_ComponentBoundEvent_1_OnButtonReleasedEvent__DelegateSignature();
	void BndEvt__SpawnDetailsPanel_K2Node_ComponentBoundEvent_3_OnSetSpawnButtonClicked__DelegateSignature();
	void BndEvt__SpawnDetailsPanel_K2Node_ComponentBoundEvent_4_OnDetailPanelHide__DelegateSignature();
	void ChangeFloor(class UW_Button_C* Button);
	void Construct();
	void ExecuteUbergraph_W_PlanningMap(int32 EntryPoint);
	void ExitMap();
	struct FVector2D GetDetailPanePosition(const struct FVector2D& PointScreenPosition);
	void GetSpawnPointInfo(const class UW_PlanningMap_BreachPoint_C*& BreachPointButton, struct FSpawnPoints* SpawnPointInfo, int32* Index_0);
	void InitPlanningMap(class ABP_UI_PlanningMap_C* PlanningMapActor_0);
	void MapFloorUpdated(int32 Floor);
	void OnDragCancelled(const struct FPointerEvent& PointerEvent, class UDragDropOperation* Operation);
	void OnDragDetected(const struct FGeometry& MyGeometry, const struct FPointerEvent& PointerEvent, class UDragDropOperation** Operation);
	struct FEventReply OnMouseButtonDown(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply OnMouseButtonUp(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	struct FEventReply OnMouseMove(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OpenPlanningMarker();
	void PointClicked(class UW_PlanningMap_BreachPoint_C* ClickedPoint);
	void PointHovered(class UW_PlanningMap_BreachPoint_C* HoveredPoint);
	void RefreshSpawns(double ZoomValue);
	void UpdateMap(int32 FloorIndex);
	void UpdateSpawns(const TArray<class UBP_UI_PlanningMap_SpawnPoint_C*>& SpawnPointComponents_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_PlanningMap_C">();
	}
	static class UW_PlanningMap_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_PlanningMap_C>();
	}
};
static_assert(alignof(UW_PlanningMap_C) == 0x000008, "Wrong alignment on UW_PlanningMap_C");
static_assert(sizeof(UW_PlanningMap_C) == 0x000C08, "Wrong size on UW_PlanningMap_C");
static_assert(offsetof(UW_PlanningMap_C, UberGraphFrame) == 0x0002C0, "Member 'UW_PlanningMap_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_PlanningMap_C, MapInteraction) == 0x0002C8, "Member 'UW_PlanningMap_C::MapInteraction' has a wrong offset!");
static_assert(offsetof(UW_PlanningMap_C, RootCanvas) == 0x0002D0, "Member 'UW_PlanningMap_C::RootCanvas' has a wrong offset!");
static_assert(offsetof(UW_PlanningMap_C, SpawnDetailsPanel) == 0x0002D8, "Member 'UW_PlanningMap_C::SpawnDetailsPanel' has a wrong offset!");
static_assert(offsetof(UW_PlanningMap_C, VB_FloorButtons) == 0x0002E0, "Member 'UW_PlanningMap_C::VB_FloorButtons' has a wrong offset!");
static_assert(offsetof(UW_PlanningMap_C, W_2DMap) == 0x0002E8, "Member 'UW_PlanningMap_C::W_2DMap' has a wrong offset!");
static_assert(offsetof(UW_PlanningMap_C, LevelData) == 0x0002F0, "Member 'UW_PlanningMap_C::LevelData' has a wrong offset!");
static_assert(offsetof(UW_PlanningMap_C, MapFloors) == 0x000B08, "Member 'UW_PlanningMap_C::MapFloors' has a wrong offset!");
static_assert(offsetof(UW_PlanningMap_C, PanMap) == 0x000B18, "Member 'UW_PlanningMap_C::PanMap' has a wrong offset!");
static_assert(offsetof(UW_PlanningMap_C, UpdateMapMaterial) == 0x000B28, "Member 'UW_PlanningMap_C::UpdateMapMaterial' has a wrong offset!");
static_assert(offsetof(UW_PlanningMap_C, Pressed) == 0x000B38, "Member 'UW_PlanningMap_C::Pressed' has a wrong offset!");
static_assert(offsetof(UW_PlanningMap_C, MouseDelta) == 0x000B40, "Member 'UW_PlanningMap_C::MouseDelta' has a wrong offset!");
static_assert(offsetof(UW_PlanningMap_C, NewEventDispatcher_0) == 0x000B50, "Member 'UW_PlanningMap_C::NewEventDispatcher_0' has a wrong offset!");
static_assert(offsetof(UW_PlanningMap_C, SpawnPointComponents) == 0x000B60, "Member 'UW_PlanningMap_C::SpawnPointComponents' has a wrong offset!");
static_assert(offsetof(UW_PlanningMap_C, PlanningMapActor) == 0x000B70, "Member 'UW_PlanningMap_C::PlanningMapActor' has a wrong offset!");
static_assert(offsetof(UW_PlanningMap_C, FloorButtons) == 0x000B78, "Member 'UW_PlanningMap_C::FloorButtons' has a wrong offset!");
static_assert(offsetof(UW_PlanningMap_C, CurrentFloor) == 0x000B88, "Member 'UW_PlanningMap_C::CurrentFloor' has a wrong offset!");
static_assert(offsetof(UW_PlanningMap_C, SpawnPoints) == 0x000B90, "Member 'UW_PlanningMap_C::SpawnPoints' has a wrong offset!");
static_assert(offsetof(UW_PlanningMap_C, SelectedPoint) == 0x000BE0, "Member 'UW_PlanningMap_C::SelectedPoint' has a wrong offset!");
static_assert(offsetof(UW_PlanningMap_C, DetailPanelOffset) == 0x000BE8, "Member 'UW_PlanningMap_C::DetailPanelOffset' has a wrong offset!");
static_assert(offsetof(UW_PlanningMap_C, HeightCheck) == 0x000BF8, "Member 'UW_PlanningMap_C::HeightCheck' has a wrong offset!");
static_assert(offsetof(UW_PlanningMap_C, WidthCheck) == 0x000C00, "Member 'UW_PlanningMap_C::WidthCheck' has a wrong offset!");

}

