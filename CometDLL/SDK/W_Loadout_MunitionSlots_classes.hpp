#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_Loadout_MunitionSlots

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "ReadyOrNot_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_Loadout_MunitionSlots.W_Loadout_MunitionSlots_C
// 0x0B90 (0x0E50 - 0x02C0)
class UW_Loadout_MunitionSlots_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       animReveal;                                        // 0x02C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       animRevealMunitions;                               // 0x02D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       animFadeSummary;                                   // 0x02D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UW_Loadout_MunitionCountSlot_C*         ArmorSlotGrenadeCount;                             // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Loadout_MunitionCountSlot_C*         ArmorSlotPrimaryAmmoCount;                         // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Header_C*                            ArmorSlotsHeader;                                  // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Loadout_MunitionCountSlot_C*         ArmorSlotSidearmAmmoCount;                         // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Loadout_MunitionCountSlot_C*         ArmorSlotTacticalCount;                            // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Button_C*                            btn_Add_PrimaryAmmo1;                              // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Button_C*                            btn_Add_PrimaryAmmo2;                              // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Button_C*                            btn_Add_SidearmAmmo1;                              // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Button_C*                            btn_Add_SidearmAmmo2;                              // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Button_C*                            btn_Minimize;                                      // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Button_C*                            btn_NewGrenadeType;                                // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Button_C*                            btn_NewPrimaryAmmoType;                            // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Button_C*                            btn_NewSidearmAmmoType;                            // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Button_C*                            btn_NewTacticalType;                               // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Button_C*                            btn_SlotEdit;                                      // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Button_C*                            btn_Summary;                                       // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Header_C*                            GrenadeHeader;                                     // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Loadout_MunitionSlots_Deployable_C*  GrenadeSlotMain;                                   // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HB_GrenadeSummary;                                 // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HB_Munitions;                                      // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HB_MunitionSummary;                                // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HB_PrimaryAmmo2;                                   // 0x0388(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HB_PrimarySummary;                                 // 0x0390(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HB_SidearmAmmo2;                                   // 0x0398(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HB_SidearmSummary;                                 // 0x03A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         HB_TacticalSummary;                                // 0x03A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 img_div_summary_1;                                 // 0x03B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 img_div_summary_2;                                 // 0x03B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 img_div_summary_3;                                 // 0x03C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 img_MimizeArrow_l;                                 // 0x03C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              lbl_MunitionSlots;                                 // 0x03D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              lbl_MunitionSlots_total;                           // 0x03D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_SubMenu_C*                           MinimizePanel;                                     // 0x03E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                Munitions;                                         // 0x03E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               Overview;                                          // 0x03F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_LoadoutSlot_C*                       PrimaryAmmo1;                                      // 0x03F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_LoadoutSlot_C*                       PrimaryAmmo2;                                      // 0x0400(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Header_C*                            PrimaryAmmoHeader;                                 // 0x0408(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_LoadoutSlot_C*                       SidearmAmmo1;                                      // 0x0410(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_LoadoutSlot_C*                       SidearmAmmo2;                                      // 0x0418(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Header_C*                            SidearmAmmoHeader;                                 // 0x0420(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Header_C*                            TacticalHeader;                                    // 0x0428(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Loadout_MunitionSlots_Deployable_C*  TacticalSlotMain;                                  // 0x0430(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              txt_TotalArmorSlots;                               // 0x0438(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              txt_TotalGrenadeSlots;                             // 0x0440(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              txt_TotalPrimaryAmmoSlots;                         // 0x0448(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              txt_TotalSidearmAmmoSlots;                         // 0x0450(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              txt_TotalTacticalSlots;                            // 0x0458(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           VB_EditorSlotEntries;                              // 0x0460(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           VB_GrenadeSlots;                                   // 0x0468(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           VB_MunitionSlotEditor;                             // 0x0470(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           VB_MunitionSlots;                                  // 0x0478(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           VB_PrimaryAmmoSlots;                               // 0x0480(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           VB_SidearmAmmoSlots;                               // 0x0488(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           VB_TacticalSlots;                                  // 0x0490(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          Expanded;                                          // 0x0498(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_499[0x7];                                      // 0x0499(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSavedLoadout                          ActiveLoadout;                                     // 0x04A0(0x02E8)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<EItemCategory, class UClass*>            CurrentItems;                                      // 0x0788(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void(class UW_LoadoutSlot_C* TriggeringSlot)> OnMunitionSlotClicked;    // 0x07D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class UW_LoadoutSlot_C* TriggeringSlot)> OnMunitionSlotHovered;    // 0x07E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class UW_LoadoutSlot_C* TriggeringSlot)> OnMunitionSlotUnhovered;  // 0x07F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UW_Loadout_C*                           LoadoutWidget;                                     // 0x0808(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         PrimaryCount_1;                                    // 0x0810(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   PrimaryAmmoType_1;                                 // 0x0814(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PrimaryCount_2;                                    // 0x081C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   PrimaryAmmoType_2;                                 // 0x0820(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SidearmCount_1;                                    // 0x0828(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SidearmAmmoType_1;                                 // 0x082C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SidearmCount_2;                                    // 0x0834(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SidearmAmmoType_2;                                 // 0x0838(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TotalPrimarySlots;                                 // 0x0840(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TotalSidearmSlots;                                 // 0x0844(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           PrimaryAmmo;                                       // 0x0848(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           SidearmAmmo;                                       // 0x0858(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         TotalGrenadeSlots;                                 // 0x0868(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AvailableGrenadeSlots;                             // 0x086C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TotalTacticalSlots;                                // 0x0870(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AvailableTacticalSlots;                            // 0x0874(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EArmourCoverage                               ArmourCoverage;                                    // 0x0878(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_879[0x7];                                      // 0x0879(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UArmourMaterial*                        ArmourMaterial;                                    // 0x0880(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TSubclassOf<class ASWATArmour>                Armor;                                             // 0x0888(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TArray<TSubclassOf<class ABaseItem>>          EquippedGrenades;                                  // 0x0890(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<TSubclassOf<class ABaseItem>>          EquippedTacticals;                                 // 0x08A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class UClass*, int32>                    GrenadeCounts;                                     // 0x08B0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class UW_Loadout_MunitionSlots_Deployable_C*, class UClass*> GrenadeSlots;                  // 0x0900(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TMap<class UClass*, int32>                    TacticalCounts;                                    // 0x0950(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class UW_Loadout_MunitionSlots_Deployable_C*, class UClass*> TacticalSlots;                 // 0x09A0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UW_Loadout_MunitionSlots_Deployable_C*  CurrentActiveDeployableSlot;                       // 0x09F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UW_Loadout_MunitionSlots_Deployable_C*  CurrentHoveredDeployableSlot;                      // 0x09F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         TotalSlots;                                        // 0x0A00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AddingGrenade;                                     // 0x0A04(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A05[0x3];                                      // 0x0A05(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class ABaseItem>>          ListExclusionItems;                                // 0x0A08(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         TotalUnassignedSlots;                              // 0x0A18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1C[0x4];                                      // 0x0A1C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(int32 PrimaryAmmoSlotCount, int32 SidearmAmmoSlotCount, int32 GrenadeSlotCount, int32 TacticalSlotCount)> OnMunitionSlotCountChanged; // 0x0A20(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          SlotEditor;                                        // 0x0A30(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Hidden;                                            // 0x0A31(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A32[0x6];                                      // 0x0A32(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(TArray<class FName>& SidearmAmmo)> OnSidearmAmmoChanged;           // 0x0A38(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(TArray<class FName>& PrimaryAmmo)> OnPrimaryAmmoChanged;           // 0x0A48(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(TArray<class UClass*>& Grenades)> OnGrenadesChanged;               // 0x0A58(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UW_Loadout_Munition_SummaryEntry_C*     PrimarySummary_2;                                  // 0x0A68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UW_Loadout_Munition_SummaryEntry_C*     PrimarySummary_1;                                  // 0x0A70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UW_Loadout_Munition_SummaryEntry_C*     SidearmSummary_1;                                  // 0x0A78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UW_Loadout_Munition_SummaryEntry_C*     SidearmSummary_2;                                  // 0x0A80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TMap<class UClass*, class UW_Loadout_Munition_SummaryEntry_C*> GrenadeSummaryEntries;            // 0x0A88(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TMap<class UClass*, class UW_Loadout_Munition_SummaryEntry_C*> TacticalSummaryEntries;           // 0x0AD8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UW_Loadout_MunitionSlots_Deployable_C*  TempNewGrenadeSlot;                                // 0x0B28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<TSubclassOf<class ABaseItem>>          AllGrenadeTypes;                                   // 0x0B30(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<TSubclassOf<class ABaseItem>>          AllTacticalTypes;                                  // 0x0B40(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          AddingTactical;                                    // 0x0B50(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TransitioningSlotEditor;                           // 0x0B51(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RemotePlayer;                                      // 0x0B52(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PrimaryAmmoInitialized;                            // 0x0B53(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowingPrimary2;                                   // 0x0B54(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SidearmAmmoInitialized;                            // 0x0B55(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowingSidearm2;                                   // 0x0B56(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B57[0x1];                                      // 0x0B57(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AnimationSpeed;                                    // 0x0B58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Preview;                                           // 0x0B60(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B61[0x7];                                      // 0x0B61(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSavedLoadout                          PreviewLoadout;                                    // 0x0B68(0x02E8)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void AddGrenadeType();
	void AddTacticalType();
	void AmmoSelected(class FName NewAmmoType, class UClass* Weapon);
	void BackPage(bool* Handled);
	void BndEvt__W_Loadout_MunitionSlots_ArmorSlotGrenadeCount_K2Node_ComponentBoundEvent_15_OnSlotCountChanged__DelegateSignature(class UW_Loadout_MunitionCountSlot_C* TriggeringSlot);
	void BndEvt__W_Loadout_MunitionSlots_ArmorSlotPrimaryAmmoCount_K2Node_ComponentBoundEvent_13_OnSlotCountChanged__DelegateSignature(class UW_Loadout_MunitionCountSlot_C* TriggeringSlot);
	void BndEvt__W_Loadout_MunitionSlots_ArmorSlotSidearmAmmoCount_K2Node_ComponentBoundEvent_14_OnSlotCountChanged__DelegateSignature(class UW_Loadout_MunitionCountSlot_C* TriggeringSlot);
	void BndEvt__W_Loadout_MunitionSlots_ArmorSlotTacticalCount_K2Node_ComponentBoundEvent_16_OnSlotCountChanged__DelegateSignature(class UW_Loadout_MunitionCountSlot_C* TriggeringSlot);
	void BndEvt__W_Loadout_MunitionSlots_btn_Add_PrimaryAmmo1_K2Node_ComponentBoundEvent_3_Clicked__DelegateSignature(class UW_Button_C* Button);
	void BndEvt__W_Loadout_MunitionSlots_btn_Add_PrimaryAmmo2_K2Node_ComponentBoundEvent_4_Clicked__DelegateSignature(class UW_Button_C* Button);
	void BndEvt__W_Loadout_MunitionSlots_btn_Add_SidearmAmmo1_K2Node_ComponentBoundEvent_6_Clicked__DelegateSignature(class UW_Button_C* Button);
	void BndEvt__W_Loadout_MunitionSlots_btn_Add_SidearmAmmo2_K2Node_ComponentBoundEvent_7_Clicked__DelegateSignature(class UW_Button_C* Button);
	void BndEvt__W_Loadout_MunitionSlots_btn_Minimize_K2Node_ComponentBoundEvent_1_Clicked__DelegateSignature(class UW_Button_C* Button);
	void BndEvt__W_Loadout_MunitionSlots_btn_NewGrenadeType_K2Node_ComponentBoundEvent_8_Clicked__DelegateSignature(class UW_Button_C* Button);
	void BndEvt__W_Loadout_MunitionSlots_btn_NewPrimaryAmmoType_K2Node_ComponentBoundEvent_2_Clicked__DelegateSignature(class UW_Button_C* Button);
	void BndEvt__W_Loadout_MunitionSlots_btn_NewSidearmAmmoType_K2Node_ComponentBoundEvent_5_Clicked__DelegateSignature(class UW_Button_C* Button);
	void BndEvt__W_Loadout_MunitionSlots_btn_NewTacticalType_K2Node_ComponentBoundEvent_17_Clicked__DelegateSignature(class UW_Button_C* Button);
	void BndEvt__W_Loadout_MunitionSlots_btn_SlotEdit_K2Node_ComponentBoundEvent_18_Clicked__DelegateSignature(class UW_Button_C* Button);
	void BndEvt__W_Loadout_MunitionSlots_btn_Summary_K2Node_ComponentBoundEvent_0_Clicked__DelegateSignature(class UW_Button_C* Button);
	void BndEvt__W_Loadout_MunitionSlots_MinimizePanel_K2Node_ComponentBoundEvent_19_HandleBackPress__DelegateSignature();
	void BndEvt__W_Loadout_MunitionSlots_PrimaryAmmo1_K2Node_ComponentBoundEvent_9_OnSlotClicked__DelegateSignature(class UW_LoadoutSlot_C* TriggeringSlot);
	void BndEvt__W_Loadout_MunitionSlots_PrimaryAmmo2_K2Node_ComponentBoundEvent_10_OnSlotClicked__DelegateSignature(class UW_LoadoutSlot_C* TriggeringSlot);
	void BndEvt__W_Loadout_MunitionSlots_SidearmAmmo1_K2Node_ComponentBoundEvent_11_OnSlotClicked__DelegateSignature(class UW_LoadoutSlot_C* TriggeringSlot);
	void BndEvt__W_Loadout_MunitionSlots_SidearmAmmo2_K2Node_ComponentBoundEvent_12_OnSlotClicked__DelegateSignature(class UW_LoadoutSlot_C* TriggeringSlot);
	void ChangePage(class FName PageName);
	void Construct();
	void CreateAmmoSummaryEntry(class UClass* Weapon, class FName AmmoType, int32 Count, class UW_Loadout_Munition_SummaryEntry_C** EntryWidget);
	void CreateDeployableSlot(bool IsGrenade, class UClass* ItemData, const class FText& CategoryText, class UW_Loadout_MunitionSlots_Deployable_C** OutputPin);
	void CreateItemSummaryEntry(class UClass* ItemData, int32 Count, class UW_Loadout_Munition_SummaryEntry_C** EntryWidget);
	void CreateTacticalSlot(class UClass* Tactical, const class FText& CategoryText);
	void DeployableSlotClicked(class UW_Loadout_MunitionSlots_Deployable_C* TriggeringDeployableSlot, class UW_LoadoutSlot_C* LoadoutSlot);
	void DeployableSlotHovered(class UW_LoadoutSlot_C* LoadoutSlot, class UW_Loadout_MunitionSlots_Deployable_C* TriggeringDeployableSlot);
	void DeployableSlotUnhovered(class UW_LoadoutSlot_C* LoadoutSlot, class UW_Loadout_MunitionSlots_Deployable_C* TriggeringDeployableSlot);
	void DisplayPrimary2();
	void DisplaySidearm2();
	void EquipGrenades(class UClass* ItemData, int32 Count);
	void EquipTactical(class UClass* ItemData, int32 Count);
	void ExecuteUbergraph_W_Loadout_MunitionSlots(int32 EntryPoint);
	void FreeUpGrenadeSlot();
	void FreeUpTacticalSlot();
	void GetActiveLoadout(struct FSavedLoadout* Active_Loadout);
	void GetAllDeployableItems();
	void GetAllGrenadeTypes();
	void GetLoadoutWidget(class UW_Loadout_C** LoadoutWidget_0);
	void GetPrimaryDefaultAmmoType(class FName* Output, bool* SingleAmmoType);
	void GetSidearmDefaultAmmoType(class FName* Output, bool* SingleAmmoType);
	void GrenadeCountSaved();
	void GrenadeEquipped();
	void GrenadeSlotAddCount(class UW_Loadout_MunitionSlots_Deployable_C* TriggeringSlot);
	void GrenadeSlotMinusCount(class UW_Loadout_MunitionSlots_Deployable_C* TriggeringSlot);
	void GroupAmmo(class FName AmmoType1, int32 AmmoCount1, class FName AmmoType2, int32 AmmoCount2, TArray<class FName>* GroupedAmmo);
	void HandleRemainderPrimaryAmmo();
	void HandleRemainderSidearmAmmo();
	void HeaderSubpageNavigation(class FName OptionNameID);
	void Hide(double Delay, bool Collapse);
	void HidePrimary2();
	void HideSidearm2();
	void HideSlotEditor();
	void HideSlotEditorChildren(double* Delay);
	void Initialize_Deployables(bool IsGrenades);
	void InitializeMunitionSlotEditor();
	void InitializeMunitionSlots(bool RemotePlayer_0, bool Preview_0);
	void InitializePreviewSummary(const struct FSavedLoadout& PreviewLoadout_0);
	void InitializePrimaryAmmo(TArray<class FName>& AmmoTypes);
	void InitializeSidearmAmmo(TArray<class FName>& AmmoTypes);
	void InitializeTacticals(TArray<TSubclassOf<class ABaseItem>>& Tacticals);
	void PreConstruct(bool IsDesignTime);
	void PrimaryAmmoChanged();
	void PrimaryAmmoCountSaved();
	void PrimaryWeaponChanged();
	void ReplaceGrenades(class UClass* CurrentGrenade, class UClass* NewGrenade);
	void ReplacePrimaryAmmo(class FName CurrentAmmoType, class FName NewAmmoType);
	void ReplaceSidearmAmmo(class FName CurrentAmmoType, class FName NewAmmoType);
	void ReplaceTactical(class UClass* CurrentTactical, class UClass* NewTactical);
	void Reveal(double Delay);
	void RevealSlotEditor();
	void RevealSlotEditorChildren(double* Delay);
	void SelectGrenadeType(class UClass* ItemData);
	void SelectTacticalType(class UClass* ItemData);
	void SetGrenadeAddButtonVis();
	void SetInputMode(bool IsGamepad);
	void SetLoadoutWidget(class UW_Loadout_C* LoadoutWidget_0);
	void SetPrimaryAmmoCount1(int32 AmmoCount);
	void SetPrimaryAmmoCount2(int32 AmmoCount);
	void SetPrimaryAmmoType1(class FName AmmoType);
	void SetSidearmAmmoCount1(int32 AmmoCount);
	void SetSidearmAmmoCount2(int32 AmmoCount);
	void SetTacticalAddButtonVis();
	void SetupBinds();
	void SidearmAmmoChanged();
	void SidearmAmmoCountSaved();
	void SidearmWeaponChanged();
	void SlotClicked(class UW_LoadoutSlot_C* TriggeringSlot);
	void SlotHovered(class UW_LoadoutSlot_C* TriggeringSlot);
	void SlotUnhovered(class UW_LoadoutSlot_C* TriggeringSlot);
	void SplitSlots(int32 TotalSlots_0, int32* NewStack, int32* OriginalStack);
	void SwapWeaponAmmo(bool Sidearm);
	void TacticalCountSaved();
	void TacticalEquipped();
	void TacticalSlotAddCount(class UW_Loadout_MunitionSlots_Deployable_C* TriggeringSlot);
	void TacticalSlotMinusCount(class UW_Loadout_MunitionSlots_Deployable_C* TriggeringSlot);
	void UpdateActiveLoadout(const struct FSavedLoadout& ActiveLoadout_0);
	void UpdateCurrentData();
	void UpdateCurrentItemMap(const TMap<EItemCategory, class UClass*>& ItemCategory);
	void UpdateCurrentSlot(class UW_LoadoutSlot_C* CurrentSlot);
	void UpdateGrenadeSlots();
	void UpdateGrenadeSummary();
	void UpdateMunitionEditorTotalSlotCount();
	void UpdateMunitionSlotEditor();
	void UpdatePrimarySlots();
	void UpdatePrimarySummary();
	void UpdateSidearmSlots();
	void UpdateSidearmSummary();
	void UpdateSummary();
	void UpdateTacticalSummary();
	void UpdateTotalGrenadeCount();
	void UpdateTotalPrimarySlotCount();
	void UpdateTotalSidearmSlotCount();
	void UpdateTotalTacticalSlotCount();

	void GetFocusTarget(class UWidget** Focus) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_Loadout_MunitionSlots_C">();
	}
	static class UW_Loadout_MunitionSlots_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_Loadout_MunitionSlots_C>();
	}
};
static_assert(alignof(UW_Loadout_MunitionSlots_C) == 0x000008, "Wrong alignment on UW_Loadout_MunitionSlots_C");
static_assert(sizeof(UW_Loadout_MunitionSlots_C) == 0x000E50, "Wrong size on UW_Loadout_MunitionSlots_C");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, UberGraphFrame) == 0x0002C0, "Member 'UW_Loadout_MunitionSlots_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, animReveal) == 0x0002C8, "Member 'UW_Loadout_MunitionSlots_C::animReveal' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, animRevealMunitions) == 0x0002D0, "Member 'UW_Loadout_MunitionSlots_C::animRevealMunitions' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, animFadeSummary) == 0x0002D8, "Member 'UW_Loadout_MunitionSlots_C::animFadeSummary' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, ArmorSlotGrenadeCount) == 0x0002E0, "Member 'UW_Loadout_MunitionSlots_C::ArmorSlotGrenadeCount' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, ArmorSlotPrimaryAmmoCount) == 0x0002E8, "Member 'UW_Loadout_MunitionSlots_C::ArmorSlotPrimaryAmmoCount' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, ArmorSlotsHeader) == 0x0002F0, "Member 'UW_Loadout_MunitionSlots_C::ArmorSlotsHeader' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, ArmorSlotSidearmAmmoCount) == 0x0002F8, "Member 'UW_Loadout_MunitionSlots_C::ArmorSlotSidearmAmmoCount' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, ArmorSlotTacticalCount) == 0x000300, "Member 'UW_Loadout_MunitionSlots_C::ArmorSlotTacticalCount' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, btn_Add_PrimaryAmmo1) == 0x000308, "Member 'UW_Loadout_MunitionSlots_C::btn_Add_PrimaryAmmo1' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, btn_Add_PrimaryAmmo2) == 0x000310, "Member 'UW_Loadout_MunitionSlots_C::btn_Add_PrimaryAmmo2' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, btn_Add_SidearmAmmo1) == 0x000318, "Member 'UW_Loadout_MunitionSlots_C::btn_Add_SidearmAmmo1' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, btn_Add_SidearmAmmo2) == 0x000320, "Member 'UW_Loadout_MunitionSlots_C::btn_Add_SidearmAmmo2' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, btn_Minimize) == 0x000328, "Member 'UW_Loadout_MunitionSlots_C::btn_Minimize' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, btn_NewGrenadeType) == 0x000330, "Member 'UW_Loadout_MunitionSlots_C::btn_NewGrenadeType' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, btn_NewPrimaryAmmoType) == 0x000338, "Member 'UW_Loadout_MunitionSlots_C::btn_NewPrimaryAmmoType' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, btn_NewSidearmAmmoType) == 0x000340, "Member 'UW_Loadout_MunitionSlots_C::btn_NewSidearmAmmoType' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, btn_NewTacticalType) == 0x000348, "Member 'UW_Loadout_MunitionSlots_C::btn_NewTacticalType' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, btn_SlotEdit) == 0x000350, "Member 'UW_Loadout_MunitionSlots_C::btn_SlotEdit' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, btn_Summary) == 0x000358, "Member 'UW_Loadout_MunitionSlots_C::btn_Summary' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, GrenadeHeader) == 0x000360, "Member 'UW_Loadout_MunitionSlots_C::GrenadeHeader' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, GrenadeSlotMain) == 0x000368, "Member 'UW_Loadout_MunitionSlots_C::GrenadeSlotMain' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, HB_GrenadeSummary) == 0x000370, "Member 'UW_Loadout_MunitionSlots_C::HB_GrenadeSummary' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, HB_Munitions) == 0x000378, "Member 'UW_Loadout_MunitionSlots_C::HB_Munitions' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, HB_MunitionSummary) == 0x000380, "Member 'UW_Loadout_MunitionSlots_C::HB_MunitionSummary' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, HB_PrimaryAmmo2) == 0x000388, "Member 'UW_Loadout_MunitionSlots_C::HB_PrimaryAmmo2' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, HB_PrimarySummary) == 0x000390, "Member 'UW_Loadout_MunitionSlots_C::HB_PrimarySummary' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, HB_SidearmAmmo2) == 0x000398, "Member 'UW_Loadout_MunitionSlots_C::HB_SidearmAmmo2' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, HB_SidearmSummary) == 0x0003A0, "Member 'UW_Loadout_MunitionSlots_C::HB_SidearmSummary' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, HB_TacticalSummary) == 0x0003A8, "Member 'UW_Loadout_MunitionSlots_C::HB_TacticalSummary' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, img_div_summary_1) == 0x0003B0, "Member 'UW_Loadout_MunitionSlots_C::img_div_summary_1' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, img_div_summary_2) == 0x0003B8, "Member 'UW_Loadout_MunitionSlots_C::img_div_summary_2' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, img_div_summary_3) == 0x0003C0, "Member 'UW_Loadout_MunitionSlots_C::img_div_summary_3' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, img_MimizeArrow_l) == 0x0003C8, "Member 'UW_Loadout_MunitionSlots_C::img_MimizeArrow_l' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, lbl_MunitionSlots) == 0x0003D0, "Member 'UW_Loadout_MunitionSlots_C::lbl_MunitionSlots' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, lbl_MunitionSlots_total) == 0x0003D8, "Member 'UW_Loadout_MunitionSlots_C::lbl_MunitionSlots_total' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, MinimizePanel) == 0x0003E0, "Member 'UW_Loadout_MunitionSlots_C::MinimizePanel' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, Munitions) == 0x0003E8, "Member 'UW_Loadout_MunitionSlots_C::Munitions' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, Overview) == 0x0003F0, "Member 'UW_Loadout_MunitionSlots_C::Overview' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, PrimaryAmmo1) == 0x0003F8, "Member 'UW_Loadout_MunitionSlots_C::PrimaryAmmo1' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, PrimaryAmmo2) == 0x000400, "Member 'UW_Loadout_MunitionSlots_C::PrimaryAmmo2' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, PrimaryAmmoHeader) == 0x000408, "Member 'UW_Loadout_MunitionSlots_C::PrimaryAmmoHeader' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, SidearmAmmo1) == 0x000410, "Member 'UW_Loadout_MunitionSlots_C::SidearmAmmo1' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, SidearmAmmo2) == 0x000418, "Member 'UW_Loadout_MunitionSlots_C::SidearmAmmo2' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, SidearmAmmoHeader) == 0x000420, "Member 'UW_Loadout_MunitionSlots_C::SidearmAmmoHeader' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, TacticalHeader) == 0x000428, "Member 'UW_Loadout_MunitionSlots_C::TacticalHeader' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, TacticalSlotMain) == 0x000430, "Member 'UW_Loadout_MunitionSlots_C::TacticalSlotMain' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, txt_TotalArmorSlots) == 0x000438, "Member 'UW_Loadout_MunitionSlots_C::txt_TotalArmorSlots' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, txt_TotalGrenadeSlots) == 0x000440, "Member 'UW_Loadout_MunitionSlots_C::txt_TotalGrenadeSlots' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, txt_TotalPrimaryAmmoSlots) == 0x000448, "Member 'UW_Loadout_MunitionSlots_C::txt_TotalPrimaryAmmoSlots' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, txt_TotalSidearmAmmoSlots) == 0x000450, "Member 'UW_Loadout_MunitionSlots_C::txt_TotalSidearmAmmoSlots' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, txt_TotalTacticalSlots) == 0x000458, "Member 'UW_Loadout_MunitionSlots_C::txt_TotalTacticalSlots' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, VB_EditorSlotEntries) == 0x000460, "Member 'UW_Loadout_MunitionSlots_C::VB_EditorSlotEntries' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, VB_GrenadeSlots) == 0x000468, "Member 'UW_Loadout_MunitionSlots_C::VB_GrenadeSlots' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, VB_MunitionSlotEditor) == 0x000470, "Member 'UW_Loadout_MunitionSlots_C::VB_MunitionSlotEditor' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, VB_MunitionSlots) == 0x000478, "Member 'UW_Loadout_MunitionSlots_C::VB_MunitionSlots' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, VB_PrimaryAmmoSlots) == 0x000480, "Member 'UW_Loadout_MunitionSlots_C::VB_PrimaryAmmoSlots' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, VB_SidearmAmmoSlots) == 0x000488, "Member 'UW_Loadout_MunitionSlots_C::VB_SidearmAmmoSlots' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, VB_TacticalSlots) == 0x000490, "Member 'UW_Loadout_MunitionSlots_C::VB_TacticalSlots' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, Expanded) == 0x000498, "Member 'UW_Loadout_MunitionSlots_C::Expanded' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, ActiveLoadout) == 0x0004A0, "Member 'UW_Loadout_MunitionSlots_C::ActiveLoadout' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, CurrentItems) == 0x000788, "Member 'UW_Loadout_MunitionSlots_C::CurrentItems' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, OnMunitionSlotClicked) == 0x0007D8, "Member 'UW_Loadout_MunitionSlots_C::OnMunitionSlotClicked' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, OnMunitionSlotHovered) == 0x0007E8, "Member 'UW_Loadout_MunitionSlots_C::OnMunitionSlotHovered' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, OnMunitionSlotUnhovered) == 0x0007F8, "Member 'UW_Loadout_MunitionSlots_C::OnMunitionSlotUnhovered' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, LoadoutWidget) == 0x000808, "Member 'UW_Loadout_MunitionSlots_C::LoadoutWidget' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, PrimaryCount_1) == 0x000810, "Member 'UW_Loadout_MunitionSlots_C::PrimaryCount_1' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, PrimaryAmmoType_1) == 0x000814, "Member 'UW_Loadout_MunitionSlots_C::PrimaryAmmoType_1' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, PrimaryCount_2) == 0x00081C, "Member 'UW_Loadout_MunitionSlots_C::PrimaryCount_2' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, PrimaryAmmoType_2) == 0x000820, "Member 'UW_Loadout_MunitionSlots_C::PrimaryAmmoType_2' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, SidearmCount_1) == 0x000828, "Member 'UW_Loadout_MunitionSlots_C::SidearmCount_1' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, SidearmAmmoType_1) == 0x00082C, "Member 'UW_Loadout_MunitionSlots_C::SidearmAmmoType_1' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, SidearmCount_2) == 0x000834, "Member 'UW_Loadout_MunitionSlots_C::SidearmCount_2' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, SidearmAmmoType_2) == 0x000838, "Member 'UW_Loadout_MunitionSlots_C::SidearmAmmoType_2' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, TotalPrimarySlots) == 0x000840, "Member 'UW_Loadout_MunitionSlots_C::TotalPrimarySlots' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, TotalSidearmSlots) == 0x000844, "Member 'UW_Loadout_MunitionSlots_C::TotalSidearmSlots' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, PrimaryAmmo) == 0x000848, "Member 'UW_Loadout_MunitionSlots_C::PrimaryAmmo' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, SidearmAmmo) == 0x000858, "Member 'UW_Loadout_MunitionSlots_C::SidearmAmmo' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, TotalGrenadeSlots) == 0x000868, "Member 'UW_Loadout_MunitionSlots_C::TotalGrenadeSlots' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, AvailableGrenadeSlots) == 0x00086C, "Member 'UW_Loadout_MunitionSlots_C::AvailableGrenadeSlots' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, TotalTacticalSlots) == 0x000870, "Member 'UW_Loadout_MunitionSlots_C::TotalTacticalSlots' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, AvailableTacticalSlots) == 0x000874, "Member 'UW_Loadout_MunitionSlots_C::AvailableTacticalSlots' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, ArmourCoverage) == 0x000878, "Member 'UW_Loadout_MunitionSlots_C::ArmourCoverage' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, ArmourMaterial) == 0x000880, "Member 'UW_Loadout_MunitionSlots_C::ArmourMaterial' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, Armor) == 0x000888, "Member 'UW_Loadout_MunitionSlots_C::Armor' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, EquippedGrenades) == 0x000890, "Member 'UW_Loadout_MunitionSlots_C::EquippedGrenades' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, EquippedTacticals) == 0x0008A0, "Member 'UW_Loadout_MunitionSlots_C::EquippedTacticals' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, GrenadeCounts) == 0x0008B0, "Member 'UW_Loadout_MunitionSlots_C::GrenadeCounts' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, GrenadeSlots) == 0x000900, "Member 'UW_Loadout_MunitionSlots_C::GrenadeSlots' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, TacticalCounts) == 0x000950, "Member 'UW_Loadout_MunitionSlots_C::TacticalCounts' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, TacticalSlots) == 0x0009A0, "Member 'UW_Loadout_MunitionSlots_C::TacticalSlots' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, CurrentActiveDeployableSlot) == 0x0009F0, "Member 'UW_Loadout_MunitionSlots_C::CurrentActiveDeployableSlot' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, CurrentHoveredDeployableSlot) == 0x0009F8, "Member 'UW_Loadout_MunitionSlots_C::CurrentHoveredDeployableSlot' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, TotalSlots) == 0x000A00, "Member 'UW_Loadout_MunitionSlots_C::TotalSlots' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, AddingGrenade) == 0x000A04, "Member 'UW_Loadout_MunitionSlots_C::AddingGrenade' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, ListExclusionItems) == 0x000A08, "Member 'UW_Loadout_MunitionSlots_C::ListExclusionItems' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, TotalUnassignedSlots) == 0x000A18, "Member 'UW_Loadout_MunitionSlots_C::TotalUnassignedSlots' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, OnMunitionSlotCountChanged) == 0x000A20, "Member 'UW_Loadout_MunitionSlots_C::OnMunitionSlotCountChanged' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, SlotEditor) == 0x000A30, "Member 'UW_Loadout_MunitionSlots_C::SlotEditor' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, Hidden) == 0x000A31, "Member 'UW_Loadout_MunitionSlots_C::Hidden' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, OnSidearmAmmoChanged) == 0x000A38, "Member 'UW_Loadout_MunitionSlots_C::OnSidearmAmmoChanged' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, OnPrimaryAmmoChanged) == 0x000A48, "Member 'UW_Loadout_MunitionSlots_C::OnPrimaryAmmoChanged' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, OnGrenadesChanged) == 0x000A58, "Member 'UW_Loadout_MunitionSlots_C::OnGrenadesChanged' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, PrimarySummary_2) == 0x000A68, "Member 'UW_Loadout_MunitionSlots_C::PrimarySummary_2' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, PrimarySummary_1) == 0x000A70, "Member 'UW_Loadout_MunitionSlots_C::PrimarySummary_1' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, SidearmSummary_1) == 0x000A78, "Member 'UW_Loadout_MunitionSlots_C::SidearmSummary_1' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, SidearmSummary_2) == 0x000A80, "Member 'UW_Loadout_MunitionSlots_C::SidearmSummary_2' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, GrenadeSummaryEntries) == 0x000A88, "Member 'UW_Loadout_MunitionSlots_C::GrenadeSummaryEntries' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, TacticalSummaryEntries) == 0x000AD8, "Member 'UW_Loadout_MunitionSlots_C::TacticalSummaryEntries' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, TempNewGrenadeSlot) == 0x000B28, "Member 'UW_Loadout_MunitionSlots_C::TempNewGrenadeSlot' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, AllGrenadeTypes) == 0x000B30, "Member 'UW_Loadout_MunitionSlots_C::AllGrenadeTypes' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, AllTacticalTypes) == 0x000B40, "Member 'UW_Loadout_MunitionSlots_C::AllTacticalTypes' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, AddingTactical) == 0x000B50, "Member 'UW_Loadout_MunitionSlots_C::AddingTactical' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, TransitioningSlotEditor) == 0x000B51, "Member 'UW_Loadout_MunitionSlots_C::TransitioningSlotEditor' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, RemotePlayer) == 0x000B52, "Member 'UW_Loadout_MunitionSlots_C::RemotePlayer' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, PrimaryAmmoInitialized) == 0x000B53, "Member 'UW_Loadout_MunitionSlots_C::PrimaryAmmoInitialized' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, ShowingPrimary2) == 0x000B54, "Member 'UW_Loadout_MunitionSlots_C::ShowingPrimary2' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, SidearmAmmoInitialized) == 0x000B55, "Member 'UW_Loadout_MunitionSlots_C::SidearmAmmoInitialized' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, ShowingSidearm2) == 0x000B56, "Member 'UW_Loadout_MunitionSlots_C::ShowingSidearm2' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, AnimationSpeed) == 0x000B58, "Member 'UW_Loadout_MunitionSlots_C::AnimationSpeed' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, Preview) == 0x000B60, "Member 'UW_Loadout_MunitionSlots_C::Preview' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionSlots_C, PreviewLoadout) == 0x000B68, "Member 'UW_Loadout_MunitionSlots_C::PreviewLoadout' has a wrong offset!");

}

