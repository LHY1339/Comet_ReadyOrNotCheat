#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CameraSaveGame

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass CameraSaveGame.CameraSaveGame_C
// 0x0148 (0x0170 - 0x0028)
class UCameraSaveGame_C final : public USaveGame
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0028(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FVector4                               ColorGradingSaturation;                            // 0x0030(0x0020)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector4                               ColorGradingContrast;                              // 0x0050(0x0020)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ColorGradingTemp;                                  // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ColorGradingTint;                                  // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FilmSlope;                                         // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FilmToe;                                           // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FilmShoulder;                                      // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FilmBlackClip;                                     // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FilmWhiteClip;                                     // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LenseFlareTintRed;                                 // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LensFlareTintGreen;                                // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LensFlareTintBlue;                                 // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LensFlareTintAlpha;                                // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LenseFlareIntensity;                               // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LenseFlareSize;                                    // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LenseFlareThreshold;                               // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LenseImageVignette;                                // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LenseImageGrainJitter;                             // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LenseImageGrainIntensity;                          // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LenseImageChromaticAbIntensity;                    // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LenseImageChromaticAbOffset;                       // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MotionBlurIntensity;                               // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LenseBloomIntensity;                               // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LenseBloomThreshold;                               // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LensBloomScale;                                    // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PostProcessBlendWeight;                            // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LenseMinFocalLength;                               // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LenseMaxFocalLength;                               // 0x0138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LenseMinFStop;                                     // 0x0140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LenseMaxFStop;                                     // 0x0148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LenseDiaphragmBladeCount;                          // 0x0150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_154[0x4];                                      // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        FocusDistance;                                     // 0x0158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CameraSaveName;                                    // 0x0160(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_CameraSaveGame(int32 EntryPoint);
	void Get(class UW_Main_C* W_Main);
	void Set(class UW_Main_C* W_Main);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"CameraSaveGame_C">();
	}
	static class UCameraSaveGame_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraSaveGame_C>();
	}
};
static_assert(alignof(UCameraSaveGame_C) == 0x000010, "Wrong alignment on UCameraSaveGame_C");
static_assert(sizeof(UCameraSaveGame_C) == 0x000170, "Wrong size on UCameraSaveGame_C");
static_assert(offsetof(UCameraSaveGame_C, UberGraphFrame) == 0x000028, "Member 'UCameraSaveGame_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UCameraSaveGame_C, ColorGradingSaturation) == 0x000030, "Member 'UCameraSaveGame_C::ColorGradingSaturation' has a wrong offset!");
static_assert(offsetof(UCameraSaveGame_C, ColorGradingContrast) == 0x000050, "Member 'UCameraSaveGame_C::ColorGradingContrast' has a wrong offset!");
static_assert(offsetof(UCameraSaveGame_C, ColorGradingTemp) == 0x000070, "Member 'UCameraSaveGame_C::ColorGradingTemp' has a wrong offset!");
static_assert(offsetof(UCameraSaveGame_C, ColorGradingTint) == 0x000078, "Member 'UCameraSaveGame_C::ColorGradingTint' has a wrong offset!");
static_assert(offsetof(UCameraSaveGame_C, FilmSlope) == 0x000080, "Member 'UCameraSaveGame_C::FilmSlope' has a wrong offset!");
static_assert(offsetof(UCameraSaveGame_C, FilmToe) == 0x000088, "Member 'UCameraSaveGame_C::FilmToe' has a wrong offset!");
static_assert(offsetof(UCameraSaveGame_C, FilmShoulder) == 0x000090, "Member 'UCameraSaveGame_C::FilmShoulder' has a wrong offset!");
static_assert(offsetof(UCameraSaveGame_C, FilmBlackClip) == 0x000098, "Member 'UCameraSaveGame_C::FilmBlackClip' has a wrong offset!");
static_assert(offsetof(UCameraSaveGame_C, FilmWhiteClip) == 0x0000A0, "Member 'UCameraSaveGame_C::FilmWhiteClip' has a wrong offset!");
static_assert(offsetof(UCameraSaveGame_C, LenseFlareTintRed) == 0x0000A8, "Member 'UCameraSaveGame_C::LenseFlareTintRed' has a wrong offset!");
static_assert(offsetof(UCameraSaveGame_C, LensFlareTintGreen) == 0x0000B0, "Member 'UCameraSaveGame_C::LensFlareTintGreen' has a wrong offset!");
static_assert(offsetof(UCameraSaveGame_C, LensFlareTintBlue) == 0x0000B8, "Member 'UCameraSaveGame_C::LensFlareTintBlue' has a wrong offset!");
static_assert(offsetof(UCameraSaveGame_C, LensFlareTintAlpha) == 0x0000C0, "Member 'UCameraSaveGame_C::LensFlareTintAlpha' has a wrong offset!");
static_assert(offsetof(UCameraSaveGame_C, LenseFlareIntensity) == 0x0000C8, "Member 'UCameraSaveGame_C::LenseFlareIntensity' has a wrong offset!");
static_assert(offsetof(UCameraSaveGame_C, LenseFlareSize) == 0x0000D0, "Member 'UCameraSaveGame_C::LenseFlareSize' has a wrong offset!");
static_assert(offsetof(UCameraSaveGame_C, LenseFlareThreshold) == 0x0000D8, "Member 'UCameraSaveGame_C::LenseFlareThreshold' has a wrong offset!");
static_assert(offsetof(UCameraSaveGame_C, LenseImageVignette) == 0x0000E0, "Member 'UCameraSaveGame_C::LenseImageVignette' has a wrong offset!");
static_assert(offsetof(UCameraSaveGame_C, LenseImageGrainJitter) == 0x0000E8, "Member 'UCameraSaveGame_C::LenseImageGrainJitter' has a wrong offset!");
static_assert(offsetof(UCameraSaveGame_C, LenseImageGrainIntensity) == 0x0000F0, "Member 'UCameraSaveGame_C::LenseImageGrainIntensity' has a wrong offset!");
static_assert(offsetof(UCameraSaveGame_C, LenseImageChromaticAbIntensity) == 0x0000F8, "Member 'UCameraSaveGame_C::LenseImageChromaticAbIntensity' has a wrong offset!");
static_assert(offsetof(UCameraSaveGame_C, LenseImageChromaticAbOffset) == 0x000100, "Member 'UCameraSaveGame_C::LenseImageChromaticAbOffset' has a wrong offset!");
static_assert(offsetof(UCameraSaveGame_C, MotionBlurIntensity) == 0x000108, "Member 'UCameraSaveGame_C::MotionBlurIntensity' has a wrong offset!");
static_assert(offsetof(UCameraSaveGame_C, LenseBloomIntensity) == 0x000110, "Member 'UCameraSaveGame_C::LenseBloomIntensity' has a wrong offset!");
static_assert(offsetof(UCameraSaveGame_C, LenseBloomThreshold) == 0x000118, "Member 'UCameraSaveGame_C::LenseBloomThreshold' has a wrong offset!");
static_assert(offsetof(UCameraSaveGame_C, LensBloomScale) == 0x000120, "Member 'UCameraSaveGame_C::LensBloomScale' has a wrong offset!");
static_assert(offsetof(UCameraSaveGame_C, PostProcessBlendWeight) == 0x000128, "Member 'UCameraSaveGame_C::PostProcessBlendWeight' has a wrong offset!");
static_assert(offsetof(UCameraSaveGame_C, LenseMinFocalLength) == 0x000130, "Member 'UCameraSaveGame_C::LenseMinFocalLength' has a wrong offset!");
static_assert(offsetof(UCameraSaveGame_C, LenseMaxFocalLength) == 0x000138, "Member 'UCameraSaveGame_C::LenseMaxFocalLength' has a wrong offset!");
static_assert(offsetof(UCameraSaveGame_C, LenseMinFStop) == 0x000140, "Member 'UCameraSaveGame_C::LenseMinFStop' has a wrong offset!");
static_assert(offsetof(UCameraSaveGame_C, LenseMaxFStop) == 0x000148, "Member 'UCameraSaveGame_C::LenseMaxFStop' has a wrong offset!");
static_assert(offsetof(UCameraSaveGame_C, LenseDiaphragmBladeCount) == 0x000150, "Member 'UCameraSaveGame_C::LenseDiaphragmBladeCount' has a wrong offset!");
static_assert(offsetof(UCameraSaveGame_C, FocusDistance) == 0x000158, "Member 'UCameraSaveGame_C::FocusDistance' has a wrong offset!");
static_assert(offsetof(UCameraSaveGame_C, CameraSaveName) == 0x000160, "Member 'UCameraSaveGame_C::CameraSaveName' has a wrong offset!");

}

