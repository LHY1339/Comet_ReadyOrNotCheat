#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LenFlare_RoadFlare

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_LenFlare_RoadFlare.BP_LenFlare_RoadFlare_C
// 0x03F0 (0x0688 - 0x0298)
class ABP_LenFlare_RoadFlare_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UMaterialBillboardComponent*            LensFlare;                                         // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        DeltaTime;                                         // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               FlareDynamicMI;                                    // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     FlareMat;                                          // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        GlobalBrightness;                                  // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        GhostsBrightness;                                  // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseFadeDistance;                                   // 0x02D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D9[0x7];                                      // 0x02D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        FadeDistance;                                      // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseDistanceBloom;                                  // 0x02E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E9[0x7];                                      // 0x02E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        IncreasingBloomByDistance;                         // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           GlobalColor;                                       // 0x02F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FadeOutSpeed;                                      // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FadeInSpeed;                                       // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BaseSizeY;                                         // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BaseSizeX;                                         // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FlickerIntensity;                                  // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FlickerTime;                                       // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Luminosity;                                        // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Actors_for_ignore_lens_flare_;                     // 0x0340(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	double                                        HaloBrightness;                                    // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HaloContrast;                                      // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HaloOpacity;                                       // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HaloInnerRadius;                                   // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           HaloOuterColor;                                    // 0x0370(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           HaloInnerColor;                                    // 0x0380(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               HaloTexture;                                       // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CentreFlareBrightness;                             // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CentreFlareContrast;                               // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CentreFlareColor;                                  // 0x03A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               CentreFlareTexture;                                // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        MainFlareBrightness;                               // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MainFlareContrast;                                 // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MainFlareInnerRadius;                              // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MainFlareSize;                                     // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           MainLensInnerColor;                                // 0x03E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           MainOuterColor;                                    // 0x03F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               MainFlare;                                         // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        HaloTextureSize;                                   // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CentreFlareSize;                                   // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ReflectionBrightness;                              // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ReflectionContrast;                                // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ReflectionColor;                                   // 0x0428(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               ReflectionCentreTexture;                           // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        ReflectionSize;                                    // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FlareOpposite1_Brightness;                         // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FlareOpposite1_Contrast;                           // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FlareOppositeSize01;                               // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           FlareOppositeColor01;                              // 0x0460(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               FlareOpposite01;                                   // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        FlareOpposite2_Brightness;                         // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FlareOpposite2_Contrast;                           // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FlareOppositeSize02;                               // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               FlareOpposite02;                                   // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           FlareOppositeColor02;                              // 0x0498(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        OppositeFlaresAxisProjection;                      // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FlareFrontBrightness01;                            // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FlareFrontContrast01;                              // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FlareFrontSize01;                                  // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FlareFrontProximityCentre01;                       // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           FlareFrontColor01;                                 // 0x04D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               FlareFront01;                                      // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        FlareFrontBrightness02;                            // 0x04E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FlareFrontContrast02;                              // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FlareFrontSize02;                                  // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FlareFrontProximityCentre02;                       // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           FlareFrontColor02;                                 // 0x0508(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               FlareFront02;                                      // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        FrontFlaresAxisProjection;                         // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ReflectedFlareBrightness01;                        // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ReflectedFlareContrast01;                          // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ReflectedFlareSize01;                              // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ReflectedFlareProximityCentre01;                   // 0x0540(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ReflectedFlareColor01;                             // 0x0548(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               ReflectedFlare01;                                  // 0x0558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        ReflectedFlareBrightness02;                        // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ReflectedFlareContrast02;                          // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ReflectedFlareSize02;                              // 0x0570(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ReflectedFlareProximityCentre02;                   // 0x0578(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ReflectedFlareColor02;                             // 0x0580(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               ReflectedFlare02;                                  // 0x0590(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        MinorFlareBrightness01;                            // 0x0598(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinorFlareContrast01;                              // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinorFlareSize01;                                  // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinorFlareSizeRandom01;                            // 0x05B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinorFlareProximityCentre01;                       // 0x05B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           MinorFlareColor01;                                 // 0x05C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               MinorFlare01;                                      // 0x05D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        MinorFlareBrightness02;                            // 0x05D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinorFlareContrast02;                              // 0x05E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinorFlareSize02;                                  // 0x05E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinorFlareSizeRandom02;                            // 0x05F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinorFlareProximityCentre02;                       // 0x05F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           MinorFlareColor02;                                 // 0x0600(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               MinorFlare02;                                      // 0x0610(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        AdditionalFlareBrightness;                         // 0x0618(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AdditionalFlareContrast;                           // 0x0620(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AdditionalFlareSize;                               // 0x0628(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           AdditionalFlareColor;                              // 0x0630(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               AdditionalFlare;                                   // 0x0640(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        IrisBrightness;                                    // 0x0648(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        IrisContrast;                                      // 0x0650(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        IrisSize;                                          // 0x0658(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        IrisProximityCentre;                               // 0x0660(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           IrisColor;                                         // 0x0668(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Iris;                                              // 0x0678(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DMI_LensFlare;                                     // 0x0680(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_LenFlare_RoadFlare(int32 EntryPoint);
	void InitFlare();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_LenFlare_RoadFlare_C">();
	}
	static class ABP_LenFlare_RoadFlare_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_LenFlare_RoadFlare_C>();
	}
};
static_assert(alignof(ABP_LenFlare_RoadFlare_C) == 0x000008, "Wrong alignment on ABP_LenFlare_RoadFlare_C");
static_assert(sizeof(ABP_LenFlare_RoadFlare_C) == 0x000688, "Wrong size on ABP_LenFlare_RoadFlare_C");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, UberGraphFrame) == 0x000298, "Member 'ABP_LenFlare_RoadFlare_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, LensFlare) == 0x0002A0, "Member 'ABP_LenFlare_RoadFlare_C::LensFlare' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, Scene) == 0x0002A8, "Member 'ABP_LenFlare_RoadFlare_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, DeltaTime) == 0x0002B0, "Member 'ABP_LenFlare_RoadFlare_C::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FlareDynamicMI) == 0x0002B8, "Member 'ABP_LenFlare_RoadFlare_C::FlareDynamicMI' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FlareMat) == 0x0002C0, "Member 'ABP_LenFlare_RoadFlare_C::FlareMat' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, GlobalBrightness) == 0x0002C8, "Member 'ABP_LenFlare_RoadFlare_C::GlobalBrightness' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, GhostsBrightness) == 0x0002D0, "Member 'ABP_LenFlare_RoadFlare_C::GhostsBrightness' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, UseFadeDistance) == 0x0002D8, "Member 'ABP_LenFlare_RoadFlare_C::UseFadeDistance' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FadeDistance) == 0x0002E0, "Member 'ABP_LenFlare_RoadFlare_C::FadeDistance' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, UseDistanceBloom) == 0x0002E8, "Member 'ABP_LenFlare_RoadFlare_C::UseDistanceBloom' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, IncreasingBloomByDistance) == 0x0002F0, "Member 'ABP_LenFlare_RoadFlare_C::IncreasingBloomByDistance' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, GlobalColor) == 0x0002F8, "Member 'ABP_LenFlare_RoadFlare_C::GlobalColor' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FadeOutSpeed) == 0x000308, "Member 'ABP_LenFlare_RoadFlare_C::FadeOutSpeed' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FadeInSpeed) == 0x000310, "Member 'ABP_LenFlare_RoadFlare_C::FadeInSpeed' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, BaseSizeY) == 0x000318, "Member 'ABP_LenFlare_RoadFlare_C::BaseSizeY' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, BaseSizeX) == 0x000320, "Member 'ABP_LenFlare_RoadFlare_C::BaseSizeX' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FlickerIntensity) == 0x000328, "Member 'ABP_LenFlare_RoadFlare_C::FlickerIntensity' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FlickerTime) == 0x000330, "Member 'ABP_LenFlare_RoadFlare_C::FlickerTime' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, Luminosity) == 0x000338, "Member 'ABP_LenFlare_RoadFlare_C::Luminosity' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, Actors_for_ignore_lens_flare_) == 0x000340, "Member 'ABP_LenFlare_RoadFlare_C::Actors_for_ignore_lens_flare_' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, HaloBrightness) == 0x000350, "Member 'ABP_LenFlare_RoadFlare_C::HaloBrightness' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, HaloContrast) == 0x000358, "Member 'ABP_LenFlare_RoadFlare_C::HaloContrast' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, HaloOpacity) == 0x000360, "Member 'ABP_LenFlare_RoadFlare_C::HaloOpacity' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, HaloInnerRadius) == 0x000368, "Member 'ABP_LenFlare_RoadFlare_C::HaloInnerRadius' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, HaloOuterColor) == 0x000370, "Member 'ABP_LenFlare_RoadFlare_C::HaloOuterColor' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, HaloInnerColor) == 0x000380, "Member 'ABP_LenFlare_RoadFlare_C::HaloInnerColor' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, HaloTexture) == 0x000390, "Member 'ABP_LenFlare_RoadFlare_C::HaloTexture' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, CentreFlareBrightness) == 0x000398, "Member 'ABP_LenFlare_RoadFlare_C::CentreFlareBrightness' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, CentreFlareContrast) == 0x0003A0, "Member 'ABP_LenFlare_RoadFlare_C::CentreFlareContrast' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, CentreFlareColor) == 0x0003A8, "Member 'ABP_LenFlare_RoadFlare_C::CentreFlareColor' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, CentreFlareTexture) == 0x0003B8, "Member 'ABP_LenFlare_RoadFlare_C::CentreFlareTexture' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, MainFlareBrightness) == 0x0003C0, "Member 'ABP_LenFlare_RoadFlare_C::MainFlareBrightness' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, MainFlareContrast) == 0x0003C8, "Member 'ABP_LenFlare_RoadFlare_C::MainFlareContrast' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, MainFlareInnerRadius) == 0x0003D0, "Member 'ABP_LenFlare_RoadFlare_C::MainFlareInnerRadius' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, MainFlareSize) == 0x0003D8, "Member 'ABP_LenFlare_RoadFlare_C::MainFlareSize' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, MainLensInnerColor) == 0x0003E0, "Member 'ABP_LenFlare_RoadFlare_C::MainLensInnerColor' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, MainOuterColor) == 0x0003F0, "Member 'ABP_LenFlare_RoadFlare_C::MainOuterColor' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, MainFlare) == 0x000400, "Member 'ABP_LenFlare_RoadFlare_C::MainFlare' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, HaloTextureSize) == 0x000408, "Member 'ABP_LenFlare_RoadFlare_C::HaloTextureSize' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, CentreFlareSize) == 0x000410, "Member 'ABP_LenFlare_RoadFlare_C::CentreFlareSize' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, ReflectionBrightness) == 0x000418, "Member 'ABP_LenFlare_RoadFlare_C::ReflectionBrightness' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, ReflectionContrast) == 0x000420, "Member 'ABP_LenFlare_RoadFlare_C::ReflectionContrast' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, ReflectionColor) == 0x000428, "Member 'ABP_LenFlare_RoadFlare_C::ReflectionColor' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, ReflectionCentreTexture) == 0x000438, "Member 'ABP_LenFlare_RoadFlare_C::ReflectionCentreTexture' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, ReflectionSize) == 0x000440, "Member 'ABP_LenFlare_RoadFlare_C::ReflectionSize' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FlareOpposite1_Brightness) == 0x000448, "Member 'ABP_LenFlare_RoadFlare_C::FlareOpposite1_Brightness' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FlareOpposite1_Contrast) == 0x000450, "Member 'ABP_LenFlare_RoadFlare_C::FlareOpposite1_Contrast' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FlareOppositeSize01) == 0x000458, "Member 'ABP_LenFlare_RoadFlare_C::FlareOppositeSize01' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FlareOppositeColor01) == 0x000460, "Member 'ABP_LenFlare_RoadFlare_C::FlareOppositeColor01' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FlareOpposite01) == 0x000470, "Member 'ABP_LenFlare_RoadFlare_C::FlareOpposite01' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FlareOpposite2_Brightness) == 0x000478, "Member 'ABP_LenFlare_RoadFlare_C::FlareOpposite2_Brightness' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FlareOpposite2_Contrast) == 0x000480, "Member 'ABP_LenFlare_RoadFlare_C::FlareOpposite2_Contrast' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FlareOppositeSize02) == 0x000488, "Member 'ABP_LenFlare_RoadFlare_C::FlareOppositeSize02' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FlareOpposite02) == 0x000490, "Member 'ABP_LenFlare_RoadFlare_C::FlareOpposite02' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FlareOppositeColor02) == 0x000498, "Member 'ABP_LenFlare_RoadFlare_C::FlareOppositeColor02' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, OppositeFlaresAxisProjection) == 0x0004A8, "Member 'ABP_LenFlare_RoadFlare_C::OppositeFlaresAxisProjection' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FlareFrontBrightness01) == 0x0004B0, "Member 'ABP_LenFlare_RoadFlare_C::FlareFrontBrightness01' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FlareFrontContrast01) == 0x0004B8, "Member 'ABP_LenFlare_RoadFlare_C::FlareFrontContrast01' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FlareFrontSize01) == 0x0004C0, "Member 'ABP_LenFlare_RoadFlare_C::FlareFrontSize01' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FlareFrontProximityCentre01) == 0x0004C8, "Member 'ABP_LenFlare_RoadFlare_C::FlareFrontProximityCentre01' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FlareFrontColor01) == 0x0004D0, "Member 'ABP_LenFlare_RoadFlare_C::FlareFrontColor01' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FlareFront01) == 0x0004E0, "Member 'ABP_LenFlare_RoadFlare_C::FlareFront01' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FlareFrontBrightness02) == 0x0004E8, "Member 'ABP_LenFlare_RoadFlare_C::FlareFrontBrightness02' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FlareFrontContrast02) == 0x0004F0, "Member 'ABP_LenFlare_RoadFlare_C::FlareFrontContrast02' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FlareFrontSize02) == 0x0004F8, "Member 'ABP_LenFlare_RoadFlare_C::FlareFrontSize02' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FlareFrontProximityCentre02) == 0x000500, "Member 'ABP_LenFlare_RoadFlare_C::FlareFrontProximityCentre02' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FlareFrontColor02) == 0x000508, "Member 'ABP_LenFlare_RoadFlare_C::FlareFrontColor02' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FlareFront02) == 0x000518, "Member 'ABP_LenFlare_RoadFlare_C::FlareFront02' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, FrontFlaresAxisProjection) == 0x000520, "Member 'ABP_LenFlare_RoadFlare_C::FrontFlaresAxisProjection' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, ReflectedFlareBrightness01) == 0x000528, "Member 'ABP_LenFlare_RoadFlare_C::ReflectedFlareBrightness01' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, ReflectedFlareContrast01) == 0x000530, "Member 'ABP_LenFlare_RoadFlare_C::ReflectedFlareContrast01' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, ReflectedFlareSize01) == 0x000538, "Member 'ABP_LenFlare_RoadFlare_C::ReflectedFlareSize01' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, ReflectedFlareProximityCentre01) == 0x000540, "Member 'ABP_LenFlare_RoadFlare_C::ReflectedFlareProximityCentre01' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, ReflectedFlareColor01) == 0x000548, "Member 'ABP_LenFlare_RoadFlare_C::ReflectedFlareColor01' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, ReflectedFlare01) == 0x000558, "Member 'ABP_LenFlare_RoadFlare_C::ReflectedFlare01' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, ReflectedFlareBrightness02) == 0x000560, "Member 'ABP_LenFlare_RoadFlare_C::ReflectedFlareBrightness02' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, ReflectedFlareContrast02) == 0x000568, "Member 'ABP_LenFlare_RoadFlare_C::ReflectedFlareContrast02' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, ReflectedFlareSize02) == 0x000570, "Member 'ABP_LenFlare_RoadFlare_C::ReflectedFlareSize02' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, ReflectedFlareProximityCentre02) == 0x000578, "Member 'ABP_LenFlare_RoadFlare_C::ReflectedFlareProximityCentre02' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, ReflectedFlareColor02) == 0x000580, "Member 'ABP_LenFlare_RoadFlare_C::ReflectedFlareColor02' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, ReflectedFlare02) == 0x000590, "Member 'ABP_LenFlare_RoadFlare_C::ReflectedFlare02' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, MinorFlareBrightness01) == 0x000598, "Member 'ABP_LenFlare_RoadFlare_C::MinorFlareBrightness01' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, MinorFlareContrast01) == 0x0005A0, "Member 'ABP_LenFlare_RoadFlare_C::MinorFlareContrast01' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, MinorFlareSize01) == 0x0005A8, "Member 'ABP_LenFlare_RoadFlare_C::MinorFlareSize01' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, MinorFlareSizeRandom01) == 0x0005B0, "Member 'ABP_LenFlare_RoadFlare_C::MinorFlareSizeRandom01' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, MinorFlareProximityCentre01) == 0x0005B8, "Member 'ABP_LenFlare_RoadFlare_C::MinorFlareProximityCentre01' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, MinorFlareColor01) == 0x0005C0, "Member 'ABP_LenFlare_RoadFlare_C::MinorFlareColor01' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, MinorFlare01) == 0x0005D0, "Member 'ABP_LenFlare_RoadFlare_C::MinorFlare01' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, MinorFlareBrightness02) == 0x0005D8, "Member 'ABP_LenFlare_RoadFlare_C::MinorFlareBrightness02' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, MinorFlareContrast02) == 0x0005E0, "Member 'ABP_LenFlare_RoadFlare_C::MinorFlareContrast02' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, MinorFlareSize02) == 0x0005E8, "Member 'ABP_LenFlare_RoadFlare_C::MinorFlareSize02' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, MinorFlareSizeRandom02) == 0x0005F0, "Member 'ABP_LenFlare_RoadFlare_C::MinorFlareSizeRandom02' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, MinorFlareProximityCentre02) == 0x0005F8, "Member 'ABP_LenFlare_RoadFlare_C::MinorFlareProximityCentre02' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, MinorFlareColor02) == 0x000600, "Member 'ABP_LenFlare_RoadFlare_C::MinorFlareColor02' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, MinorFlare02) == 0x000610, "Member 'ABP_LenFlare_RoadFlare_C::MinorFlare02' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, AdditionalFlareBrightness) == 0x000618, "Member 'ABP_LenFlare_RoadFlare_C::AdditionalFlareBrightness' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, AdditionalFlareContrast) == 0x000620, "Member 'ABP_LenFlare_RoadFlare_C::AdditionalFlareContrast' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, AdditionalFlareSize) == 0x000628, "Member 'ABP_LenFlare_RoadFlare_C::AdditionalFlareSize' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, AdditionalFlareColor) == 0x000630, "Member 'ABP_LenFlare_RoadFlare_C::AdditionalFlareColor' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, AdditionalFlare) == 0x000640, "Member 'ABP_LenFlare_RoadFlare_C::AdditionalFlare' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, IrisBrightness) == 0x000648, "Member 'ABP_LenFlare_RoadFlare_C::IrisBrightness' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, IrisContrast) == 0x000650, "Member 'ABP_LenFlare_RoadFlare_C::IrisContrast' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, IrisSize) == 0x000658, "Member 'ABP_LenFlare_RoadFlare_C::IrisSize' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, IrisProximityCentre) == 0x000660, "Member 'ABP_LenFlare_RoadFlare_C::IrisProximityCentre' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, IrisColor) == 0x000668, "Member 'ABP_LenFlare_RoadFlare_C::IrisColor' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, Iris) == 0x000678, "Member 'ABP_LenFlare_RoadFlare_C::Iris' has a wrong offset!");
static_assert(offsetof(ABP_LenFlare_RoadFlare_C, DMI_LensFlare) == 0x000680, "Member 'ABP_LenFlare_RoadFlare_C::DMI_LensFlare' has a wrong offset!");

}

