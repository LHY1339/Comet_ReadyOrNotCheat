#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SBL_Code

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "BPS_SBL_ArrayOfActors_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SBL_Code.BP_SBL_Code_C
// 0x0150 (0x03E8 - 0x0298)
class ABP_SBL_Code_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0298(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TMap<class UPDA_SBL_ModData_C*, bool>         ModDataArray;                                      // 0x02A8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class UPDA_SBL_ModData_C*, struct FBPS_SBL_ArrayOfActors> SpawnedMods;                      // 0x02F8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class AActor*>                         CurrentDataSpawned;                                // 0x0348(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, AdvancedDisplay)
	bool                                          EnableNewMods;                                     // 0x0358(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_359[0x7];                                      // 0x0359(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class UPDA_SBL_ModData_C*, class UBPS_SBL_SaveGame_C*> ModDataSaves;                        // 0x0360(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FString                                 ScanPath;                                          // 0x03B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	struct FTopLevelAssetPath                     ClassPathName;                                     // 0x03C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_SMM_UI_C>         SMM_UI;                                            // 0x03D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SMMLoaded;                                         // 0x03E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Completed_30E1EB6045E7387A3DC32FA010F14C0C(class USaveGame* SaveGame, bool bSuccess);
	void Completed_CD6D25DB48A8F9CFEA11D6A8B3AA7831(class USaveGame* SaveGame, bool bSuccess);
	void ExecuteUbergraph_BP_SBL_Code(int32 EntryPoint);
	void GetAllModActors(TArray<class AActor*>* Actors);
	void GetAllModData(bool OnlyActive, TArray<class UPDA_SBL_ModData_C*>* ModData);
	void GetModActorsFromData(class UPDA_SBL_ModData_C* ModData, TArray<class AActor*>* Actors, bool* IsActive);
	void GetModDataActive(class UPDA_SBL_ModData_C* ModData, bool* IsActive);
	void GetModDataFromModActor(class AActor* Actor, class UPDA_SBL_ModData_C** ModData, bool* Valid);
	void GetModInfo(class UPDA_SBL_ModData_C* ModData, class FText* ModName, class FText* ModOverview, TArray<class FText>* ModAuthors, class FText* ModVersion, class FName* ModPakName, int32* ModNexusID, class FName* ModModioID, bool* IsActive);
	void InitSaveGames();
	void LogSMM(const class FString& Object, bool Index_0);
	void LogUpdated();
	void ModMenuPostInit(const TScriptInterface<class IBPI_SMM_UI_C> SMM_UI_0);
	void NextActor();
	void NextData();
	void NextSave();
	void OnLoaded_A329052240A6FFD12481AA97B9BA4BBD(TSubclassOf<class UObject> Loaded);
	void OnRetrievedSG(const class FString& ModName, const class FString& SlotName, class USMM_SaveGame_Base_C* SMM_SaveGame_Config);
	void OnSavedSG(const class FString& ModName, const class FString& SlotName, class USMM_SaveGame_Base_C* SMM_SaveGame);
	void PageClosed();
	void PageOpened();
	void PostSpawnedInit();
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ScanForModData();
	void SendTabButton(class UButton* Button);
	void SetModDataActive(class UPDA_SBL_ModData_C* ModData, bool IsActive);
	void SetNavigationFocus(class UWidget** Widget);
	void SpawnModActors();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SBL_Code_C">();
	}
	static class ABP_SBL_Code_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SBL_Code_C>();
	}
};
static_assert(alignof(ABP_SBL_Code_C) == 0x000008, "Wrong alignment on ABP_SBL_Code_C");
static_assert(sizeof(ABP_SBL_Code_C) == 0x0003E8, "Wrong size on ABP_SBL_Code_C");
static_assert(offsetof(ABP_SBL_Code_C, UberGraphFrame) == 0x000298, "Member 'ABP_SBL_Code_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_SBL_Code_C, DefaultSceneRoot) == 0x0002A0, "Member 'ABP_SBL_Code_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_SBL_Code_C, ModDataArray) == 0x0002A8, "Member 'ABP_SBL_Code_C::ModDataArray' has a wrong offset!");
static_assert(offsetof(ABP_SBL_Code_C, SpawnedMods) == 0x0002F8, "Member 'ABP_SBL_Code_C::SpawnedMods' has a wrong offset!");
static_assert(offsetof(ABP_SBL_Code_C, CurrentDataSpawned) == 0x000348, "Member 'ABP_SBL_Code_C::CurrentDataSpawned' has a wrong offset!");
static_assert(offsetof(ABP_SBL_Code_C, EnableNewMods) == 0x000358, "Member 'ABP_SBL_Code_C::EnableNewMods' has a wrong offset!");
static_assert(offsetof(ABP_SBL_Code_C, ModDataSaves) == 0x000360, "Member 'ABP_SBL_Code_C::ModDataSaves' has a wrong offset!");
static_assert(offsetof(ABP_SBL_Code_C, ScanPath) == 0x0003B0, "Member 'ABP_SBL_Code_C::ScanPath' has a wrong offset!");
static_assert(offsetof(ABP_SBL_Code_C, ClassPathName) == 0x0003C0, "Member 'ABP_SBL_Code_C::ClassPathName' has a wrong offset!");
static_assert(offsetof(ABP_SBL_Code_C, SMM_UI) == 0x0003D0, "Member 'ABP_SBL_Code_C::SMM_UI' has a wrong offset!");
static_assert(offsetof(ABP_SBL_Code_C, SMMLoaded) == 0x0003E0, "Member 'ABP_SBL_Code_C::SMMLoaded' has a wrong offset!");

}

