#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: W_Loadout_MunitionCountSlot

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "ReadyOrNot_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass W_Loadout_MunitionCountSlot.W_Loadout_MunitionCountSlot_C
// 0x0078 (0x0338 - 0x02C0)
class UW_Loadout_MunitionCountSlot_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       animReveal;                                        // 0x02C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UW_Button_C*                            btn_decrease;                                      // 0x02D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Button_C*                            btn_increase;                                      // 0x02D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                MunitionSlot;                                      // 0x02E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USpinBox*                               SpinBox_SlotCount;                                 // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UW_Text_C*                              txt_SlotType;                                      // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class FText                                   SlotName;                                          // 0x02F8(0x0018)(Edit, BlueprintVisible)
	int32                                         SlotCount;                                         // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MinSlots;                                          // 0x0314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxSlots;                                          // 0x0318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31C[0x4];                                      // 0x031C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UW_Loadout_MunitionCountSlot_C* TriggeringSlot)> OnSlotCountChanged; // 0x0320(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         AvailableSlots;                                    // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Hidden;                                            // 0x0334(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BackPage(bool* Handled);
	void BndEvt__W_Loadout_ArmorSlot_btn_decrease_K2Node_ComponentBoundEvent_0_Clicked__DelegateSignature(class UW_Button_C* Button);
	void BndEvt__W_Loadout_ArmorSlot_btn_increase_K2Node_ComponentBoundEvent_1_Clicked__DelegateSignature(class UW_Button_C* Button);
	void BndEvt__W_Loadout_ArmorSlot_SpinBox_SlotCount_K2Node_ComponentBoundEvent_3_OnSpinBoxValueCommittedEvent__DelegateSignature(float InValue, ETextCommit CommitMethod);
	void ChangePage(class FName PageName);
	void Construct();
	void ExecuteUbergraph_W_Loadout_MunitionCountSlot(int32 EntryPoint);
	void HeaderSubpageNavigation(class FName OptionNameID);
	void Hide(double Delay, bool Collapse);
	void IncrementSlotCount(int32 Increment);
	void Initialize(int32 CurrentSlotCount, int32 AvailableSlots_0, int32 MinSlots_0, int32 MaxSlots_0);
	void PreConstruct(bool IsDesignTime);
	void Reveal(double Delay);
	void SetAvailableSlots(int32 AvailableSlots_0);
	void SetInfo();
	void SetInputMode(bool IsGamepad);
	void SetLoadoutWidget(class UW_Loadout_C* LoadoutWidget);
	void SetMaxSlots(int32 MaxSlotCount);
	void SetSlotCount(int32 NewCount);
	void UpdateActiveLoadout(const struct FSavedLoadout& ActiveLoadout);
	void UpdateCurrentItemMap(const TMap<EItemCategory, class UClass*>& ItemCategory);
	void UpdateCurrentSlot(class UW_LoadoutSlot_C* CurrentSlot);

	void GetFocusTarget(class UWidget** Focus) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"W_Loadout_MunitionCountSlot_C">();
	}
	static class UW_Loadout_MunitionCountSlot_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UW_Loadout_MunitionCountSlot_C>();
	}
};
static_assert(alignof(UW_Loadout_MunitionCountSlot_C) == 0x000008, "Wrong alignment on UW_Loadout_MunitionCountSlot_C");
static_assert(sizeof(UW_Loadout_MunitionCountSlot_C) == 0x000338, "Wrong size on UW_Loadout_MunitionCountSlot_C");
static_assert(offsetof(UW_Loadout_MunitionCountSlot_C, UberGraphFrame) == 0x0002C0, "Member 'UW_Loadout_MunitionCountSlot_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionCountSlot_C, animReveal) == 0x0002C8, "Member 'UW_Loadout_MunitionCountSlot_C::animReveal' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionCountSlot_C, btn_decrease) == 0x0002D0, "Member 'UW_Loadout_MunitionCountSlot_C::btn_decrease' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionCountSlot_C, btn_increase) == 0x0002D8, "Member 'UW_Loadout_MunitionCountSlot_C::btn_increase' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionCountSlot_C, MunitionSlot) == 0x0002E0, "Member 'UW_Loadout_MunitionCountSlot_C::MunitionSlot' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionCountSlot_C, SpinBox_SlotCount) == 0x0002E8, "Member 'UW_Loadout_MunitionCountSlot_C::SpinBox_SlotCount' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionCountSlot_C, txt_SlotType) == 0x0002F0, "Member 'UW_Loadout_MunitionCountSlot_C::txt_SlotType' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionCountSlot_C, SlotName) == 0x0002F8, "Member 'UW_Loadout_MunitionCountSlot_C::SlotName' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionCountSlot_C, SlotCount) == 0x000310, "Member 'UW_Loadout_MunitionCountSlot_C::SlotCount' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionCountSlot_C, MinSlots) == 0x000314, "Member 'UW_Loadout_MunitionCountSlot_C::MinSlots' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionCountSlot_C, MaxSlots) == 0x000318, "Member 'UW_Loadout_MunitionCountSlot_C::MaxSlots' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionCountSlot_C, OnSlotCountChanged) == 0x000320, "Member 'UW_Loadout_MunitionCountSlot_C::OnSlotCountChanged' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionCountSlot_C, AvailableSlots) == 0x000330, "Member 'UW_Loadout_MunitionCountSlot_C::AvailableSlots' has a wrong offset!");
static_assert(offsetof(UW_Loadout_MunitionCountSlot_C, Hidden) == 0x000334, "Member 'UW_Loadout_MunitionCountSlot_C::Hidden' has a wrong offset!");

}

